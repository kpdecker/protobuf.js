{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../node_modules/path-browserify/index.js","../src/common.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/equals.js","../src/fetch.js","../src/field.js","../src/index-light.js","../src/index-minimal.js","../src/index","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/parse.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/tokenize.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["undefined","modules","cache","entries","protobuf","1","require","module","exports","base64","length","string","p","n","Math","ceil","b64","Array","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","apply","slice","join","invalidEncoding","decode","offset","c","charCodeAt","Error","test","codegen","functionParams","functionName","body","Codegen","formatStringOrScope","source","toString","verbose","console","log","scopeKeys","Object","keys","scopeParams","scopeValues","scopeOffset","Function","formatParams","arguments","formatOffset","replace","$0","$1","value","floor","JSON","stringify","functionNameOverride","EventEmitter","this","_listeners","prototype","on","evt","fn","ctx","off","listeners","splice","emit","args","factory","writeFloat_ieee754","writeUint","val","buf","pos","exponent","sign","isNaN","round","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeFloat_f32_cpy","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","le","f64","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","Float32Array","Uint8Array","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","inquire","moduleName","mod","eval","e","path","isAbsolute","normalize","split","absolute","prefix","shift","resolve","originPath","includePath","alreadyNormalized","alloc","size","SIZE","MAX","slab","call","utf8","len","read","write","c1","c2","normalizeArray","allowAboveRoot","up","last","unshift","filter","xs","f","res","resolvedPath","resolvedAbsolute","process","cwd","TypeError","trailingSlash","substr","paths","relative","from","to","trim","arr","fromParts","toParts","min","samePartsLength","outputParts","concat","sep","delimiter","dirname","code","hasRoot","matchedSlash","basename","ext","extname","startDot","startPart","preDotState","str","common","timeType","commonRe","name","json","nested","google.protobuf","Any","fields","type_url","type","id","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","oneof","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","FieldMask","get","file","converter","Enum","util","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","fromObject","mtype","fieldsArray","safeProp","map","toObject","isTypescript","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","arrayDefault","long","low","high","unsigned","toNumber","bytes","hasKs2","index","_fieldsArray","indexOf","group","ref","types","defaults","basic","packed","rfield","required","wireType","mapKey","genTypePartial","optional","ReflectionObject","create","constructor","className","Namespace","options","comment","comments","valuesById","reserved","originalKey","key","fromJSON","filename","enm","toJSON","toJSONOptions","keepComments","add","isString","isInteger","isReservedId","isReservedName","allow_alias","remove","genValuePartial_equals","fetch","fs","Promise","reject","callback","err","data","xhr","readFile","contents","XMLHttpRequest","binary","onreadystatechange","readyState","status","response","responseText","overrideMimeType","responseType","open","send","Field","Type","ruleRe","extend","isObject","toLowerCase","message","defaultValue","Long","extensionField","declaringField","_packed","defineProperty","getOption","setOption","ifNotSet","resolved","parent","lookupTypeOrEnum","fromNumber","freeze","newBuffer","emptyObject","emptyArray","ctor","d","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","build","load","root","Root","encoder","decoder","verifier","OneOf","MapField","Service","Method","Message","wrappers","equals","configure","Writer","BufferWriter","Reader","BufferReader","rpc","roots","tokenize","parse","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","writer","encodeDelimited","reader","decodeDelimited","verify","object","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","_nestedArray","ns","addJSON","clearCache","_pathMap","toArray","nestedArray","nestedJson","names","methods","define","isArray","pathMap","_loadPathMap","ptr","walkPath","children","find","child","node","forEach","nameComponents","component","newEl","existing","mapEl","childPathMap","getEnum","prev","setOptions","onAdd","onRemove","startsWith","filenames","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Service_","Enum_","parsedOptions","defineProperties","isFileRoot","_handleAdd","_handleRemove","setParsedOption","propName","opt","newValue","newOpt","hasOwnProperty","setProperty","Root_","fieldNames","addFieldsToParent","oneofName","oneOfGetter","set","oneOfSetter","keepCase","base10Re","base10NegRe","base16Re","base16NegRe","base8Re","base8NegRe","numberRe","nameRe","typeRefRe","fqTypeRefRe","pkg","imports","weakImports","syntax","token","preferTrailingComment","tn","alternateCommentMode","next","peek","skip","cmnt","head","isProto3","applyCase","camelCase","illegal","insideTryCatch","line","readString","readValue","acceptTypeRef","substring","parseInt","parseFloat","parseNumber","readRanges","target","acceptStrings","parseId","acceptNegative","parseCommon","parseOption","ifBlock","valueType","parseInlineOptions","parseMapField","parseField","parseOneOf","extensions","parseType","dummy","parseEnumValue","parseEnum","service","commentText","method","parseMethod","parseService","reference","parseExtension","fnIf","fnElse","trailingLine","lcFirst","ucFirst","parseGroup","isCustom","option","optionValue","parseOptionValue","result","prevValue","simpleValue","flattenNamespace","pkgComponent","parsePackage","whichImports","parseImport","parseSyntax","package","LongBits","indexOutOfRange","writeLength","RangeError","Buffer","isBuffer","create_array","readLongVarint","bits","readFixed32_end","readFixed64","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","double","skipType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Path","deferred","files","resolvePath","self","finish","getBundledFileName","idx","lastIndexOf","altname","referenced","parsed","sync","queued","weak","setTimeout","readFileSync","then","exposeRe","tryHandleExtension","extendedType","sisterField","parse_","common_","rpcImpl","requestDelimited","responseDelimited","endedByRPC","_methodsArray","inherited","methodsArray","rpcService","methodName","isReserved","m","delimRe","stringDoubleRe","stringSingleRe","setCommentRe","setCommentAltRe","setCommentSplitRe","whitespaceRe","unescapeRe","unescapeMap","0","r","unescape","commentType","commentLine","commentLineEmpty","commentIsLeading","stack","stringDelim","subject","charAt","setComment","isLeading","commentOffset","lines","isDoubleSlashCommentLine","startOffset","endOffset","findEndOfLine","lineText","cursor","re","lastIndex","match","exec","repeat","curr","isDoc","isLeadingComment","expected","actual","ret","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","ctorProperties","oneOf","setup","originalThis","wrapper","fork","ldelim","typeName","s","bake","o","safePropBackslashRe","safePropQuoteRe","toUpperCase","camelCaseRe","a","decorateRoot","enumerable","decorateEnumIndex","dst","setProp","part","zero","zzEncode","zeroHash","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","src","newError","CustomError","captureStackTrace","pool","isNode","global","versions","window","Number","isFinite","isset","isSet","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","bytesEquals","findIndex","aValue","mapEquals","aKeys","longEquals","isLong","dcodeIO","longValue","fromValue","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","longs","encoding","allocUnsafe","seenFirstField","oneofProp","invalid","genVerifyKey","genVerifyValue","Op","noop","State","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength","$require","$module","amd"],"mappings":";;;;;;CAAA,SAAAA,gBAAA,IAAAC,EAAAC,EAAAC,EAcAC,EAdAH,EAiCA,CAAAI,EAAA,CAAA,SAAAC,EAAAC,EAAAC,GC1BA,IAAAC,EAAAD,EAOAC,EAAAC,OAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAD,OACA,IAAAE,EACA,OAAA,EAEA,IADA,IAAAC,EAAA,EACA,IAAAD,EAAA,GAAA,KAAAD,EAAAA,EAAAC,MACAC,EACA,OAAAC,KAAAC,KAAA,EAAAJ,EAAAD,QAAA,EAAAG,GAUA,IANA,IAAAG,EAAAC,MAAA,IAGAC,EAAAD,MAAA,KAGAE,EAAA,EAAAA,EAAA,IACAD,EAAAF,EAAAG,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,EAAAA,EAAA,GAAA,IAAAA,IASAV,EAAAW,OAAA,SAAAC,EAAAC,EAAAC,GAMA,IALA,IAIAC,EAJAC,EAAA,KACAC,EAAA,GACAP,EAAA,EACAQ,EAAA,EAEAL,EAAAC,GAAA,CACA,IAAAK,EAAAP,EAAAC,KACA,OAAAK,GACA,KAAA,EACAD,EAAAP,KAAAH,EAAAY,GAAA,GACAJ,GAAA,EAAAI,IAAA,EACAD,EAAA,EACA,MACA,KAAA,EACAD,EAAAP,KAAAH,EAAAQ,EAAAI,GAAA,GACAJ,GAAA,GAAAI,IAAA,EACAD,EAAA,EACA,MACA,KAAA,EACAD,EAAAP,KAAAH,EAAAQ,EAAAI,GAAA,GACAF,EAAAP,KAAAH,EAAA,GAAAY,GACAD,EAAA,EAGA,KAAAR,KACAM,EAAAA,GAAA,IAAAI,KAAAC,OAAAC,aAAAC,MAAAF,OAAAJ,IACAP,EAAA,GASA,OANAQ,IACAD,EAAAP,KAAAH,EAAAQ,GACAE,EAAAP,KAAA,GACA,IAAAQ,IACAD,EAAAP,KAAA,KAEAM,GACAN,GACAM,EAAAI,KAAAC,OAAAC,aAAAC,MAAAF,OAAAJ,EAAAO,MAAA,EAAAd,KACAM,EAAAS,KAAA,KAEAJ,OAAAC,aAAAC,MAAAF,OAAAJ,EAAAO,MAAA,EAAAd,KAGA,IAAAgB,EAAA,mBAUA1B,EAAA2B,OAAA,SAAAzB,EAAAU,EAAAgB,GAIA,IAHA,IAEAb,EAFAF,EAAAe,EACAV,EAAA,EAEAR,EAAA,EAAAA,EAAAR,EAAAD,QAAA,CACA,IAAA4B,EAAA3B,EAAA4B,WAAApB,KACA,GAAA,IAAAmB,GAAA,EAAAX,EACA,MACA,IAAAW,EAAApB,EAAAoB,MAAAtC,EACA,MAAAwC,MAAAL,GACA,OAAAR,GACA,KAAA,EACAH,EAAAc,EACAX,EAAA,EACA,MACA,KAAA,EACAN,EAAAgB,KAAAb,GAAA,GAAA,GAAAc,IAAA,EACAd,EAAAc,EACAX,EAAA,EACA,MACA,KAAA,EACAN,EAAAgB,MAAA,GAAAb,IAAA,GAAA,GAAAc,IAAA,EACAd,EAAAc,EACAX,EAAA,EACA,MACA,KAAA,EACAN,EAAAgB,MAAA,EAAAb,IAAA,EAAAc,EACAX,EAAA,GAIA,GAAA,IAAAA,EACA,MAAAa,MAAAL,GACA,OAAAE,EAAAf,GAQAb,EAAAgC,KAAA,SAAA9B,GACA,MAAA,mEAAA8B,KAAA9B,K,qBC/HA,SAAA+B,EAAAC,EAAAC,GAGA,iBAAAD,IACAC,EAAAD,EACAA,EAAA3C,GAGA,IAAA6C,EAAA,GAYA,SAAAC,EAAAC,GAIA,GAAA,iBAAAA,EAAA,CACA,IAAAC,EAAAC,IAIA,GAHAP,EAAAQ,SACAC,QAAAC,IAAA,YAAAJ,GACAA,EAAA,UAAAA,EACAD,EAAA,CAKA,IAJA,IAAAM,EAAAC,OAAAC,KAAAR,GACAS,EAAAvC,MAAAoC,EAAA3C,OAAA,GACA+C,EAAAxC,MAAAoC,EAAA3C,QACAgD,EAAA,EACAA,EAAAL,EAAA3C,QACA8C,EAAAE,GAAAL,EAAAK,GACAD,EAAAC,GAAAX,EAAAM,EAAAK,MAGA,OADAF,EAAAE,GAAAV,EACAW,SAAA3B,MAAA,KAAAwB,GAAAxB,MAAA,KAAAyB,GAEA,OAAAE,SAAAX,EAAAW,GAMA,IAFA,IAAAC,EAAA3C,MAAA4C,UAAAnD,OAAA,GACAoD,EAAA,EACAA,EAAAF,EAAAlD,QACAkD,EAAAE,GAAAD,YAAAC,GAYA,GAXAA,EAAA,EACAf,EAAAA,EAAAgB,QAAA,eAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAN,EAAAE,KACA,OAAAG,GACA,IAAA,IAAA,IAAA,IAAA,OAAAC,EAAApC,GACA,IAAA,IAAA,OAAAhB,KAAAqD,MAAAD,GAAApC,GACA,IAAA,IAAA,OAAAsC,KAAAC,UAAAH,GACA,IAAA,IAAA,OAAAA,EAAApC,GAEA,MAAA,MAEAgC,IAAAF,EAAAlD,OACA,MAAA8B,MAAA,4BAEA,OADAK,EAAAhB,KAAAkB,GACAD,EAGA,SAAAG,EAAAqB,GACA,MAAA,aAAAA,GAAA1B,GAAA,IAAA,KAAAD,GAAAA,EAAAT,KAAA,MAAA,IAAA,SAAAW,EAAAX,KAAA,QAAA,MAIA,OADAY,EAAAG,SAAAA,EACAH,GAhFAvC,EAAAC,QAAAkC,GAiGAQ,SAAA,G,qBCzFA,SAAAqB,IAOAC,KAAAC,EAAA,IAfAlE,EAAAC,QAAA+D,GAyBAG,UAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAKA,OAJAN,KAAAC,EAAAG,KAAAJ,KAAAC,EAAAG,GAAA,KAAA/C,KAAA,CACAgD,GAAAA,EACAC,IAAAA,GAAAN,OAEAA,MASAD,EAAAG,UAAAK,IAAA,SAAAH,EAAAC,GACA,GAAAD,IAAA5E,EACAwE,KAAAC,EAAA,QAEA,GAAAI,IAAA7E,EACAwE,KAAAC,EAAAG,GAAA,QAGA,IADA,IAAAI,EAAAR,KAAAC,EAAAG,GACAzD,EAAA,EAAAA,EAAA6D,EAAAtE,QACAsE,EAAA7D,GAAA0D,KAAAA,EACAG,EAAAC,OAAA9D,EAAA,KAEAA,EAGA,OAAAqD,MASAD,EAAAG,UAAAQ,KAAA,SAAAN,GACA,IAAAI,EAAAR,KAAAC,EAAAG,GACA,GAAAI,EAAA,CAGA,IAFA,IAAAG,EAAA,GACAhE,EAAA,EACAA,EAAA0C,UAAAnD,QACAyE,EAAAtD,KAAAgC,UAAA1C,MACA,IAAAA,EAAA,EAAAA,EAAA6D,EAAAtE,QACAsE,EAAA7D,GAAA0D,GAAA7C,MAAAgD,EAAA7D,KAAA2D,IAAAK,GAEA,OAAAX,O,qBCaA,SAAAY,EAAA5E,GAsDA,SAAA6E,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAYAC,EAZAC,EAAAJ,EAAA,EAAA,EAAA,EACAI,IACAJ,GAAAA,GAEAD,EADA,IAAAC,EACA,EAAA,EAAAA,EAAA,EAAA,WACAK,MAAAL,GACA,WACA,qBAAAA,GACAI,GAAA,GAAA,cAAA,EACAJ,EAAA,uBACAI,GAAA,GAAA7E,KAAA+E,MAAAN,EAAA,yBAAA,GAIAI,GAAA,GAAA,KAFAD,EAAA5E,KAAAqD,MAAArD,KAAAsC,IAAAmC,GAAAzE,KAAAgF,OAEA,GADA,QAAAhF,KAAA+E,MAAAN,EAAAzE,KAAAiF,IAAA,GAAAL,GAAA,YACA,EAVAF,EAAAC,GAiBA,SAAAO,EAAAC,EAAAT,EAAAC,GACA,IAAAS,EAAAD,EAAAT,EAAAC,GACAE,EAAA,GAAAO,GAAA,IAAA,EACAR,EAAAQ,IAAA,GAAA,IACAC,EAAA,QAAAD,EACA,OAAA,KAAAR,EACAS,EACAC,IACAC,EAAAA,EAAAV,EACA,GAAAD,EACA,qBAAAC,EAAAQ,EACAR,EAAA7E,KAAAiF,IAAA,EAAAL,EAAA,MAAA,QAAAS,GA9EA,SAAAG,EAAAf,EAAAC,EAAAC,GACAc,EAAA,GAAAhB,EACAC,EAAAC,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GAGA,SAAAC,EAAAlB,EAAAC,EAAAC,GACAc,EAAA,GAAAhB,EACAC,EAAAC,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GAQA,SAAAE,EAAAlB,EAAAC,GAKA,OAJAe,EAAA,GAAAhB,EAAAC,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAc,EAAA,GAGA,SAAAI,EAAAnB,EAAAC,GAKA,OAJAe,EAAA,GAAAhB,EAAAC,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAc,EAAA,GAxCA,IAEAA,EACAC,EACAI,EA2FAC,EACAL,EACAI,EA+DA,SAAAE,EAAAxB,EAAAyB,EAAAC,EAAAzB,EAAAC,EAAAC,GACA,IAaAU,EAMAT,EAnBAC,EAAAJ,EAAA,EAAA,EAAA,EACAI,IACAJ,GAAAA,GACA,IAAAA,GACAD,EAAA,EAAAE,EAAAC,EAAAsB,GACAzB,EAAA,EAAA,EAAAC,EAAA,EAAA,WAAAC,EAAAC,EAAAuB,IACApB,MAAAL,IACAD,EAAA,EAAAE,EAAAC,EAAAsB,GACAzB,EAAA,WAAAE,EAAAC,EAAAuB,IACA,sBAAAzB,GACAD,EAAA,EAAAE,EAAAC,EAAAsB,GACAzB,GAAAK,GAAA,GAAA,cAAA,EAAAH,EAAAC,EAAAuB,IAGAzB,EAAA,wBAEAD,GADAa,EAAAZ,EAAA,UACA,EAAAC,EAAAC,EAAAsB,GACAzB,GAAAK,GAAA,GAAAQ,EAAA,cAAA,EAAAX,EAAAC,EAAAuB,KAGA,QADAtB,EAAA5E,KAAAqD,MAAArD,KAAAsC,IAAAmC,GAAAzE,KAAAgF,QAEAJ,EAAA,MAEAJ,EAAA,kBADAa,EAAAZ,EAAAzE,KAAAiF,IAAA,GAAAL,MACA,EAAAF,EAAAC,EAAAsB,GACAzB,GAAAK,GAAA,GAAAD,EAAA,MAAA,GAAA,QAAAS,EAAA,WAAA,EAAAX,EAAAC,EAAAuB,IAQA,SAAAC,EAAAhB,EAAAc,EAAAC,EAAAxB,EAAAC,GACA,IAAAyB,EAAAjB,EAAAT,EAAAC,EAAAsB,GACAI,EAAAlB,EAAAT,EAAAC,EAAAuB,GACArB,EAAA,GAAAwB,GAAA,IAAA,EACAzB,EAAAyB,IAAA,GAAA,KACAhB,EAAA,YAAA,QAAAgB,GAAAD,EACA,OAAA,MAAAxB,EACAS,EACAC,IACAC,EAAAA,EAAAV,EACA,GAAAD,EACA,OAAAC,EAAAQ,EACAR,EAAA7E,KAAAiF,IAAA,EAAAL,EAAA,OAAAS,EAAA,kBA1GA,SAAAiB,EAAA7B,EAAAC,EAAAC,GACAoB,EAAA,GAAAtB,EACAC,EAAAC,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GAGA,SAAAa,EAAA9B,EAAAC,EAAAC,GACAoB,EAAA,GAAAtB,EACAC,EAAAC,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GACAhB,EAAAC,EAAA,GAAAe,EAAA,GAQA,SAAAc,EAAA9B,EAAAC,GASA,OARAe,EAAA,GAAAhB,EAAAC,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAoB,EAAA,GAGA,SAAAU,EAAA/B,EAAAC,GASA,OARAe,EAAA,GAAAhB,EAAAC,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAe,EAAA,GAAAhB,EAAAC,EAAA,GACAoB,EAAA,GAgEA,MArNA,oBAAAW,cAEAjB,EAAA,IAAAiB,aAAA,EAAA,IACAhB,EAAA,IAAAiB,WAAAlB,EAAAlF,QACAuF,EAAA,MAAAJ,EAAA,GAmBAhG,EAAAkH,aAAAd,EAAAN,EAAAG,EAEAjG,EAAAmH,aAAAf,EAAAH,EAAAH,EAmBA9F,EAAAoH,YAAAhB,EAAAF,EAAAC,EAEAnG,EAAAqH,YAAAjB,EAAAD,EAAAD,IAwBAlG,EAAAkH,aAAArC,EAAAyC,KAAA,KAAAC,GACAvH,EAAAmH,aAAAtC,EAAAyC,KAAA,KAAAE,GAgBAxH,EAAAoH,YAAA5B,EAAA8B,KAAA,KAAAG,GACAzH,EAAAqH,YAAA7B,EAAA8B,KAAA,KAAAI,IAKA,oBAAAC,cAEAtB,EAAA,IAAAsB,aAAA,EAAA,IACA3B,EAAA,IAAAiB,WAAAZ,EAAAxF,QACAuF,EAAA,MAAAJ,EAAA,GA2BAhG,EAAA4H,cAAAxB,EAAAQ,EAAAC,EAEA7G,EAAA6H,cAAAzB,EAAAS,EAAAD,EA2BA5G,EAAA8H,aAAA1B,EAAAU,EAAAC,EAEA/G,EAAA+H,aAAA3B,EAAAW,EAAAD,IAmCA9G,EAAA4H,cAAAtB,EAAAgB,KAAA,KAAAC,EAAA,EAAA,GACAvH,EAAA6H,cAAAvB,EAAAgB,KAAA,KAAAE,EAAA,EAAA,GAiBAxH,EAAA8H,aAAArB,EAAAa,KAAA,KAAAG,EAAA,EAAA,GACAzH,EAAA+H,aAAAtB,EAAAa,KAAA,KAAAI,EAAA,EAAA,IAIA1H,EAKA,SAAAuH,EAAAxC,EAAAC,EAAAC,GACAD,EAAAC,GAAA,IAAAF,EACAC,EAAAC,EAAA,GAAAF,IAAA,EAAA,IACAC,EAAAC,EAAA,GAAAF,IAAA,GAAA,IACAC,EAAAC,EAAA,GAAAF,IAAA,GAGA,SAAAyC,EAAAzC,EAAAC,EAAAC,GACAD,EAAAC,GAAAF,IAAA,GACAC,EAAAC,EAAA,GAAAF,IAAA,GAAA,IACAC,EAAAC,EAAA,GAAAF,IAAA,EAAA,IACAC,EAAAC,EAAA,GAAA,IAAAF,EAGA,SAAA0C,EAAAzC,EAAAC,GACA,OAAAD,EAAAC,GACAD,EAAAC,EAAA,IAAA,EACAD,EAAAC,EAAA,IAAA,GACAD,EAAAC,EAAA,IAAA,MAAA,EAGA,SAAAyC,EAAA1C,EAAAC,GACA,OAAAD,EAAAC,IAAA,GACAD,EAAAC,EAAA,IAAA,GACAD,EAAAC,EAAA,IAAA,EACAD,EAAAC,EAAA,MAAA,EA3UAlF,EAAAC,QAAA4E,EAAAA,I,uBCOA,SAAAoD,EAAAC,GACA,IACA,IAAAC,EAAAC,KAAA,UAAAA,CAAAF,GACA,GAAAC,IAAAA,EAAAhI,QAAA4C,OAAAC,KAAAmF,GAAAhI,QACA,OAAAgI,EACA,MAAAE,IACA,OAAA,KAdArI,EAAAC,QAAAgI,G,uBCMA,IAAAK,EAAArI,EAEAsI,EAMAD,EAAAC,WAAA,SAAAD,GACA,MAAA,eAAApG,KAAAoG,IAGAE,EAMAF,EAAAE,UAAA,SAAAF,GAGA,IAAApH,GAFAoH,EAAAA,EAAA9E,QAAA,MAAA,KACAA,QAAA,UAAA,MACAiF,MAAA,KACAC,EAAAH,EAAAD,GACAK,EAAA,GACAD,IACAC,EAAAzH,EAAA0H,QAAA,KACA,IAAA,IAAAhI,EAAA,EAAAA,EAAAM,EAAAf,QACA,OAAAe,EAAAN,GACA,EAAAA,GAAA,OAAAM,EAAAN,EAAA,GACAM,EAAAwD,SAAA9D,EAAA,GACA8H,EACAxH,EAAAwD,OAAA9D,EAAA,KAEAA,EACA,MAAAM,EAAAN,GACAM,EAAAwD,OAAA9D,EAAA,KAEAA,EAEA,OAAA+H,EAAAzH,EAAAS,KAAA,MAUA2G,EAAAO,QAAA,SAAAC,EAAAC,EAAAC,GAGA,OAFAA,IACAD,EAAAP,EAAAO,IACAR,EAAAQ,GACAA,GACAC,IACAF,EAAAN,EAAAM,KACAA,EAAAA,EAAAtF,QAAA,iBAAA,KAAArD,OAAAqI,EAAAM,EAAA,IAAAC,GAAAA,K,qBC9DA/I,EAAAC,QA6BA,SAAAgJ,EAAAvH,EAAAwH,GACA,IAAAC,EAAAD,GAAA,KACAE,EAAAD,IAAA,EACAE,EAAA,KACAvH,EAAAqH,EACA,OAAA,SAAAD,GACA,GAAAA,EAAA,GAAAE,EAAAF,EACA,OAAAD,EAAAC,GACAC,EAAArH,EAAAoH,IACAG,EAAAJ,EAAAE,GACArH,EAAA,GAEA,IAAAmD,EAAAvD,EAAA4H,KAAAD,EAAAvH,EAAAA,GAAAoH,GAGA,OAFA,EAAApH,IACAA,EAAA,GAAA,EAAAA,IACAmD,K,uBCtCA,IAAAsE,EAAAtJ,EAOAsJ,EAAApJ,OAAA,SAAAC,GAGA,IAFA,IACA2B,EADAyH,EAAA,EAEA5I,EAAA,EAAAA,EAAAR,EAAAD,SAAAS,GACAmB,EAAA3B,EAAA4B,WAAApB,IACA,IACA4I,GAAA,EACAzH,EAAA,KACAyH,GAAA,EACA,QAAA,MAAAzH,IAAA,QAAA,MAAA3B,EAAA4B,WAAApB,EAAA,OACAA,EACA4I,GAAA,GAEAA,GAAA,EAEA,OAAAA,GAUAD,EAAAE,KAAA,SAAA3I,EAAAC,EAAAC,GAEA,GADAA,EAAAD,EACA,EACA,MAAA,GAKA,IAJA,IAGAE,EAHAC,EAAA,KACAC,EAAA,GACAP,EAAA,EAEAG,EAAAC,IACAC,EAAAH,EAAAC,MACA,IACAI,EAAAP,KAAAK,EACA,IAAAA,GAAAA,EAAA,IACAE,EAAAP,MAAA,GAAAK,IAAA,EAAA,GAAAH,EAAAC,KACA,IAAAE,GAAAA,EAAA,KACAA,IAAA,EAAAA,IAAA,IAAA,GAAAH,EAAAC,OAAA,IAAA,GAAAD,EAAAC,OAAA,EAAA,GAAAD,EAAAC,MAAA,MACAI,EAAAP,KAAA,OAAAK,GAAA,IACAE,EAAAP,KAAA,OAAA,KAAAK,IAEAE,EAAAP,MAAA,GAAAK,IAAA,IAAA,GAAAH,EAAAC,OAAA,EAAA,GAAAD,EAAAC,KACA,KAAAH,KACAM,EAAAA,GAAA,IAAAI,KAAAC,OAAAC,aAAAC,MAAAF,OAAAJ,IACAP,EAAA,GAGA,OAAAM,GACAN,GACAM,EAAAI,KAAAC,OAAAC,aAAAC,MAAAF,OAAAJ,EAAAO,MAAA,EAAAd,KACAM,EAAAS,KAAA,KAEAJ,OAAAC,aAAAC,MAAAF,OAAAJ,EAAAO,MAAA,EAAAd,KAUA2I,EAAAG,MAAA,SAAAtJ,EAAAU,EAAAgB,GAIA,IAHA,IACA6H,EACAC,EAFA7I,EAAAe,EAGAlB,EAAA,EAAAA,EAAAR,EAAAD,SAAAS,GACA+I,EAAAvJ,EAAA4B,WAAApB,IACA,IACAE,EAAAgB,KAAA6H,GACAA,EAAA,KACA7I,EAAAgB,KAAA6H,GAAA,EAAA,KAEA,QAAA,MAAAA,IAAA,QAAA,OAAAC,EAAAxJ,EAAA4B,WAAApB,EAAA,MACA+I,EAAA,QAAA,KAAAA,IAAA,KAAA,KAAAC,KACAhJ,EACAE,EAAAgB,KAAA6H,GAAA,GAAA,IACA7I,EAAAgB,KAAA6H,GAAA,GAAA,GAAA,KAIA7I,EAAAgB,KAAA6H,GAAA,GAAA,IAHA7I,EAAAgB,KAAA6H,GAAA,EAAA,GAAA,KANA7I,EAAAgB,KAAA,GAAA6H,EAAA,KAcA,OAAA7H,EAAAf,I,uBC3EA,SAAA8I,EAAA3I,EAAA4I,GAGA,IADA,IAAAC,EAAA,EACAnJ,EAAAM,EAAAf,OAAA,EAAA,GAAAS,EAAAA,IAAA,CACA,IAAAoJ,EAAA9I,EAAAN,GACA,MAAAoJ,EACA9I,EAAAwD,OAAA9D,EAAA,GACA,OAAAoJ,GACA9I,EAAAwD,OAAA9D,EAAA,GACAmJ,KACAA,IACA7I,EAAAwD,OAAA9D,EAAA,GACAmJ,KAKA,GAAAD,EACA,KAAAC,KACA7I,EAAA+I,QAAA,MAIA,OAAA/I,EA0OA,SAAAgJ,EAAAC,EAAAC,GACA,GAAAD,EAAAD,OAAA,OAAAC,EAAAD,OAAAE,GAEA,IADA,IAAAC,EAAA,GACAzJ,EAAA,EAAAA,EAAAuJ,EAAAhK,OAAAS,IACAwJ,EAAAD,EAAAvJ,GAAAA,EAAAuJ,IAAAE,EAAA/I,KAAA6I,EAAAvJ,IAEA,OAAAyJ,EA3OApK,EAAA4I,QAAA,WAIA,IAHA,IAAAyB,EAAA,GACAC,GAAA,EAEA3J,EAAA0C,UAAAnD,OAAA,GAAA,GAAAS,IAAA2J,EAAA3J,IAAA,CACA,IAAA0H,EAAA,GAAA1H,EAAA0C,UAAA1C,GAAA4J,QAAAC,MAGA,GAAA,iBAAAnC,EACA,MAAA,IAAAoC,UAAA,6CACApC,IAIAgC,EAAAhC,EAAA,IAAAgC,EACAC,EAAA,KAAAjC,EAAA,IAWA,OAAAiC,EAAA,IAAA,KAJAD,EAAAT,EAAAK,EAAAI,EAAA7B,MAAA,KAAA,SAAApI,GACA,QAAAA,KACAkK,GAAA5I,KAAA,OAEA,KAKA1B,EAAAuI,UAAA,SAAAF,GACA,IAAAC,EAAAtI,EAAAsI,WAAAD,GACAqC,EAAA,MAAAC,EAAAtC,GAAA,GAcA,OAXAA,EAAAuB,EAAAK,EAAA5B,EAAAG,MAAA,KAAA,SAAApI,GACA,QAAAA,KACAkI,GAAA5G,KAAA,OAEA4G,IACAD,EAAA,KAEAA,GAAAqC,IACArC,GAAA,MAGAC,EAAA,IAAA,IAAAD,GAIArI,EAAAsI,WAAA,SAAAD,GACA,MAAA,KAAAA,EAAA,IAIArI,EAAA0B,KAAA,WACA,IAAAkJ,EAAAnK,MAAAyD,UAAAzC,MAAA4H,KAAAhG,UAAA,GACA,OAAArD,EAAAuI,UAAA0B,EAAAW,EAAA,SAAAxK,GACA,GAAA,iBAAAA,EACA,MAAA,IAAAqK,UAAA,0CAEA,OAAArK,IACAsB,KAAA,OAMA1B,EAAA6K,SAAA,SAAAC,EAAAC,GAIA,SAAAC,EAAAC,GAEA,IADA,IAAAnK,EAAA,EACAA,EAAAmK,EAAA/K,QACA,KAAA+K,EAAAnK,GADAA,KAKA,IADA,IAAAC,EAAAkK,EAAA/K,OAAA,EACA,GAAAa,GACA,KAAAkK,EAAAlK,GADAA,KAIA,OAAAA,EAAAD,EAAA,GACAmK,EAAAxJ,MAAAX,EAAAC,EAAAD,EAAA,GAfAgK,EAAA9K,EAAA4I,QAAAkC,GAAAH,OAAA,GACAI,EAAA/K,EAAA4I,QAAAmC,GAAAJ,OAAA,GAsBA,IALA,IAAAO,EAAAF,EAAAF,EAAAtC,MAAA,MACA2C,EAAAH,EAAAD,EAAAvC,MAAA,MAEAtI,EAAAI,KAAA8K,IAAAF,EAAAhL,OAAAiL,EAAAjL,QACAmL,EAAAnL,EACAS,EAAA,EAAAA,EAAAT,EAAAS,IACA,GAAAuK,EAAAvK,KAAAwK,EAAAxK,GAAA,CACA0K,EAAA1K,EACA,MAKA,IADA,IAAA2K,EAAA,GACA3K,EAAA0K,EAAA1K,EAAAuK,EAAAhL,OAAAS,IACA2K,EAAAjK,KAAA,MAKA,OAFAiK,EAAAA,EAAAC,OAAAJ,EAAA1J,MAAA4J,KAEA3J,KAAA,MAGA1B,EAAAwL,IAAA,IACAxL,EAAAyL,UAAA,IAEAzL,EAAA0L,QAAA,SAAArD,GAEA,GADA,iBAAAA,IAAAA,GAAA,IACA,IAAAA,EAAAnI,OAAA,MAAA,IAKA,IAJA,IAAAyL,EAAAtD,EAAAtG,WAAA,GACA6J,EAAA,IAAAD,EACA5K,GAAA,EACA8K,GAAA,EACAlL,EAAA0H,EAAAnI,OAAA,EAAA,GAAAS,IAAAA,EAEA,GAAA,IADA0H,EAAAtG,WAAApB,IAEA,IAAAkL,EAAA,CACA9K,EAAAJ,EACA,YAIAkL,GAAA,EAIA,OAAA,IAAA9K,EAAA6K,EAAA,IAAA,IACAA,GAAA,IAAA7K,EAGA,IAEAsH,EAAA5G,MAAA,EAAAV,IAiCAf,EAAA8L,SAAA,SAAAzD,EAAA0D,GACA,IAAA5B,EA/BA,SAAA9B,GACA,iBAAAA,IAAAA,GAAA,IAOA,IALA,IAAAvH,EAAA,EACAC,GAAA,EACA8K,GAAA,EAGAlL,EAAA0H,EAAAnI,OAAA,EAAA,GAAAS,IAAAA,EACA,GAAA,IAAA0H,EAAAtG,WAAApB,IAGA,IAAAkL,EAAA,CACA/K,EAAAH,EAAA,EACA,YAEA,IAAAI,IAGA8K,GAAA,EACA9K,EAAAJ,EAAA,GAIA,OAAA,IAAAI,EAAA,GACAsH,EAAA5G,MAAAX,EAAAC,GAMA+K,CAAAzD,GAIA,OAHA0D,GAAA5B,EAAAQ,QAAA,EAAAoB,EAAA7L,UAAA6L,IACA5B,EAAAA,EAAAQ,OAAA,EAAAR,EAAAjK,OAAA6L,EAAA7L,SAEAiK,GAGAnK,EAAAgM,QAAA,SAAA3D,GACA,iBAAAA,IAAAA,GAAA,IAQA,IAPA,IAAA4D,GAAA,EACAC,EAAA,EACAnL,GAAA,EACA8K,GAAA,EAGAM,EAAA,EACAxL,EAAA0H,EAAAnI,OAAA,EAAA,GAAAS,IAAAA,EAAA,CACA,IAAAgL,EAAAtD,EAAAtG,WAAApB,GACA,GAAA,IAAAgL,EAAA,CAGA,GAAAE,EAIA,SAHAK,EAAAvL,EAAA,EACA,OAIA,IAAAI,IAGA8K,GAAA,EACA9K,EAAAJ,EAAA,GAEA,IAAAgL,GAEA,IAAAM,EACAA,EAAAtL,EACA,IAAAwL,IACAA,EAAA,IACA,IAAAF,IAGAE,GAAA,GAIA,OAAA,IAAAF,IAAA,IAAAlL,GAEA,IAAAoL,GAEA,IAAAA,GAAAF,IAAAlL,EAAA,GAAAkL,IAAAC,EAAA,EACA,GAEA7D,EAAA5G,MAAAwK,EAAAlL,IAaA,IAAA4J,EACA,SAAAyB,EAAAtL,EAAAyI,GAAA,OAAA6C,EAAAzB,OAAA7J,EAAAyI,K,sBCvSAxJ,EAAAC,QAAAqM,EAEA,IA+DAC,EA/DAC,EAAA,QAsBA,SAAAF,EAAAG,EAAAC,GACAF,EAAAtK,KAAAuK,KACAA,EAAA,mBAAAA,EAAA,SACAC,EAAA,CAAAC,OAAA,CAAAC,kBAAA,CAAAD,OAAAD,MAEAJ,EAAAG,GAAAC,EAYAJ,EAAA,MAAA,CAUAO,IAAA,CACAC,OAAA,CACAC,SAAA,CACAC,KAAA,SACAC,GAAA,GAEAtJ,MAAA,CACAqJ,KAAA,QACAC,GAAA,OAQAX,EAAA,WAAA,CAUAY,SAAAX,EAAA,CACAO,OAAA,CACAK,QAAA,CACAH,KAAA,QACAC,GAAA,GAEAG,MAAA,CACAJ,KAAA,QACAC,GAAA,OAMAX,EAAA,YAAA,CAUAe,UAAAd,IAGAD,EAAA,QAAA,CAOAgB,MAAA,CACAR,OAAA,MAIAR,EAAA,SAAA,CASAiB,OAAA,CACAT,OAAA,CACAA,OAAA,CACAU,QAAA,SACAR,KAAA,QACAC,GAAA,KAkBAQ,MAAA,CACAC,OAAA,CACAC,KAAA,CACAC,MAAA,CACA,YACA,cACA,cACA,YACA,cACA,eAIAd,OAAA,CACAe,UAAA,CACAb,KAAA,YACAC,GAAA,GAEAa,YAAA,CACAd,KAAA,SACAC,GAAA,GAEAc,YAAA,CACAf,KAAA,SACAC,GAAA,GAEAe,UAAA,CACAhB,KAAA,OACAC,GAAA,GAEAgB,YAAA,CACAjB,KAAA,SACAC,GAAA,GAEAiB,UAAA,CACAlB,KAAA,YACAC,GAAA,KAKAkB,UAAA,CACAC,OAAA,CACAC,WAAA,IAWAC,UAAA,CACAxB,OAAA,CACAsB,OAAA,CACAG,KAAA,WACAvB,KAAA,QACAC,GAAA,OAMAX,EAAA,WAAA,CASAkC,YAAA,CACA1B,OAAA,CACAnJ,MAAA,CACAqJ,KAAA,SACAC,GAAA,KAYAwB,WAAA,CACA3B,OAAA,CACAnJ,MAAA,CACAqJ,KAAA,QACAC,GAAA,KAYAyB,WAAA,CACA5B,OAAA,CACAnJ,MAAA,CACAqJ,KAAA,QACAC,GAAA,KAYA0B,YAAA,CACA7B,OAAA,CACAnJ,MAAA,CACAqJ,KAAA,SACAC,GAAA,KAYA2B,WAAA,CACA9B,OAAA,CACAnJ,MAAA,CACAqJ,KAAA,QACAC,GAAA,KAYA4B,YAAA,CACA/B,OAAA,CACAnJ,MAAA,CACAqJ,KAAA,SACAC,GAAA,KAYA6B,UAAA,CACAhC,OAAA,CACAnJ,MAAA,CACAqJ,KAAA,OACAC,GAAA,KAYA8B,YAAA,CACAjC,OAAA,CACAnJ,MAAA,CACAqJ,KAAA,SACAC,GAAA,KAYA+B,WAAA,CACAlC,OAAA,CACAnJ,MAAA,CACAqJ,KAAA,QACAC,GAAA,OAMAX,EAAA,aAAA,CASA2C,UAAA,CACAnC,OAAA,CACAjC,MAAA,CACA0D,KAAA,WACAvB,KAAA,SACAC,GAAA,OAqBAX,EAAA4C,IAAA,SAAAC,GACA,OAAA7C,EAAA6C,IAAA,O,wBCxYA,IAAAC,EAAAnP,EAEAoP,EAAAtP,EAAA,IACAuP,EAAAvP,EAAA,IAWA,SAAAwP,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAF,EAAAG,aACA,GAAAH,EAAAG,wBAAAP,EAAA,CAAAG,EACA,eAAAG,GACA,IAAA,IAAAvB,EAAAqB,EAAAG,aAAAxB,OAAApL,EAAAD,OAAAC,KAAAoL,GAAAxN,EAAA,EAAAA,EAAAoC,EAAA7C,SAAAS,EACA6O,EAAAI,UAAAzB,EAAApL,EAAApC,MAAA6O,EAAAK,aAAAN,EACA,YACAA,EACA,UAAAxM,EAAApC,GADA4O,CAEA,WAAApB,EAAApL,EAAApC,IAFA4O,CAGA,SAAAG,EAAAvB,EAAApL,EAAApC,IAHA4O,CAIA,SACAA,EACA,UACAA,EACA,4BAAAG,EADAH,CAEA,sBAAAC,EAAAM,SAAA,oBAFAP,CAGA,gCAAAG,EAAAD,EAAAC,OACA,CACA,IAAAK,GAAA,EACA,OAAAP,EAAAzC,MACA,IAAA,SACA,IAAA,QAAAwC,EACA,kBAAAG,EAAAA,GACA,MACA,IAAA,SACA,IAAA,UAAAH,EACA,cAAAG,EAAAA,GACA,MACA,IAAA,QACA,IAAA,SACA,IAAA,WAAAH,EACA,YAAAG,EAAAA,GACA,MACA,IAAA,SACAK,GAAA,EAEA,IAAA,QACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAR,EACA,8BAAAG,EAAAA,EAAAK,GACA,MACA,IAAA,QAAAR,EACA,4BAAAG,EADAH,CAEA,wEAAAG,EAAAA,EAAAA,EAFAH,CAGA,sBAAAG,EAHAH,CAIA,UAAAG,EAAAA,GACA,MACA,IAAA,SAAAH,EACA,kBAAAG,EAAAA,GACA,MACA,IAAA,OAAAH,EACA,mBAAAG,EAAAA,IAOA,OAAAH,EAmEA,SAAAS,EAAAT,EAAAC,EAAAC,EAAAC,GAEA,GAAAF,EAAAG,aACAH,EAAAG,wBAAAP,EAAAG,EACA,UAAAG,EAAAA,GACAH,EACA,gCAAAG,EAAAD,EAAAC,OACA,CACA,IAAAK,GAAA,EACA,OAAAP,EAAAzC,MACA,IAAA,SACA,IAAA,QAAAwC,EACA,6CAAAG,EAAAA,EAAAA,EAAAA,GACA,MACA,IAAA,SACAK,GAAA,EAEA,IAAA,QACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAR,EACA,4BAAAG,EADAH,CAEA,uCAAAG,EAAAA,EAAAA,EAFAH,CAGA,OAHAA,CAIA,uHAAAG,EAAAA,EAAAA,EAAAK,EAAA,OAAA,GAAAL,GACA,MACA,IAAA,QAAAH,EACA,gHAAAG,EAAAA,EAAAA,EAAAA,EAAAA,GACA,MACA,QAAAH,EACA,UAAAG,EAAAA,IAIA,OAAAH,EA5FAJ,EAAAc,WAAA,SAAAC,GAEA,IAAArD,EAAAqD,EAAAC,YACAZ,EAAAF,EAAAnN,QAAA,CAAA,KAAAgO,EAAA1D,KAAA,cAAA6C,CACA,6BADAA,CAEA,YACA,IAAAxC,EAAA3M,OAAA,OAAAqP,EACA,wBACAA,EACA,uBACA,IAAA,IAAA5O,EAAA,EAAAA,EAAAkM,EAAA3M,SAAAS,EAAA,CACA,IAAA6O,EAAA3C,EAAAlM,GAAAiI,UACA8G,EAAAL,EAAAe,SAAAZ,EAAAhD,MAGAgD,EAAAa,KAAAd,EACA,WAAAG,EADAH,CAEA,4BAAAG,EAFAH,CAGA,sBAAAC,EAAAM,SAAA,oBAHAP,CAIA,SAAAG,EAJAH,CAKA,oDAAAG,GACAJ,EAAAC,EAAAC,EAAA7O,EAAA+O,EAAA,UAAAJ,CACA,IADAA,CAEA,MAGAE,EAAAI,UAAAL,EACA,WAAAG,EADAH,CAEA,0BAAAG,EAFAH,CAGA,sBAAAC,EAAAM,SAAA,mBAHAP,CAIA,SAAAG,EAJAH,CAKA,iCAAAG,GACAJ,EAAAC,EAAAC,EAAA7O,EAAA+O,EAAA,MAAAJ,CACA,IADAA,CAEA,OAIAE,EAAAG,wBAAAP,GAAAG,EACA,iBAAAG,GACAJ,EAAAC,EAAAC,EAAA7O,EAAA+O,GACAF,EAAAG,wBAAAP,GAAAG,EACA,MAEA,OAAAA,EACA,aAyDAJ,EAAAmB,SAAA,SAAAJ,EAAAK,GAEA,IAAA1D,EAAAqD,EAAAC,YAAA1O,QAAA+O,KAAAnB,EAAAoB,mBACA,IAAA5D,EAAA3M,OACA,OAAAmP,EAAAnN,SAAAmN,CAAA,aACA,IAAAE,EAAAF,EAAAnN,QAAA,CAAA,IAAA,KAAAgO,EAAA1D,KAAA,cAEA+D,EAKAhB,EAJAA,EAAA,SAAAA,CACA,SAGA,YAOA,IAJA,IAAAmB,EAAA,GACAC,EAAA,GACAC,EAAA,GACAjQ,EAAA,EACAA,EAAAkM,EAAA3M,SAAAS,EACAkM,EAAAlM,GAAAkQ,SACAhE,EAAAlM,GAAAiI,UAAAgH,SAAAc,EACA7D,EAAAlM,GAAA0P,IAAAM,EACAC,GAAAvP,KAAAwL,EAAAlM,IAEA,GAAA+P,EAAAxQ,OAAA,CAEA,IAFAqP,EACA,6BACA5O,EAAA,EAAAA,EAAA+P,EAAAxQ,SAAAS,EAAA4O,EACA,SAAAF,EAAAe,SAAAM,EAAA/P,GAAA6L,OACA+C,EACA,KAGA,GAAAoB,EAAAzQ,OAAA,CAEA,IAFAqP,EACA,8BACA5O,EAAA,EAAAA,EAAAgQ,EAAAzQ,SAAAS,EAAA4O,EACA,SAAAF,EAAAe,SAAAO,EAAAhQ,GAAA6L,OACA+C,EACA,KAGA,GAAAqB,EAAA1Q,OAAA,CAEA,IAFAqP,EACA,mBACA5O,EAAA,EAAAA,EAAAiQ,EAAA1Q,SAAAS,EAAA,CACA,IAWAmQ,EAXAtB,EAAAoB,EAAAjQ,GACA+O,EAAAL,EAAAe,SAAAZ,EAAAhD,MACAgD,EAAAG,wBAAAP,IAAAmB,EAAAhB,EACA,SAAAG,EAAAF,EAAAK,aACAL,EAAAuB,KAAAxB,EACA,iBADAA,CAEA,gCAAAC,EAAAK,YAAAmB,IAAAxB,EAAAK,YAAAoB,KAAAzB,EAAAK,YAAAqB,SAFA3B,CAGA,oEAAAG,EAHAH,CAIA,QAJAA,CAKA,6BAAAG,EAAAF,EAAAK,YAAApN,WAAA+M,EAAAK,YAAAsB,YACA3B,EAAA4B,OACAN,EAAA,IAAArQ,MAAAyD,UAAAzC,MAAA4H,KAAAmG,EAAAK,aAAAnO,KAAA,KAAA,IACA6N,EACA,6BAAAG,EAAApO,OAAAC,aAAAC,MAAAF,OAAAkO,EAAAK,aADAN,CAEA,QAFAA,CAGA,SAAAG,EAAAoB,EAHAvB,CAIA,6CAAAG,EAAAA,EAJAH,CAKA,MACAA,EACA,SAAAG,EAAAF,EAAAK,aACAN,EACA,KAGA,IADA,IAAA8B,GAAA,EACA1Q,EAAA,EAAAA,EAAAkM,EAAA3M,SAAAS,EAAA,CACA,IAAA6O,EAAA3C,EAAAlM,GACA2Q,EAAApB,EAAAqB,EAAAC,QAAAhC,GACAE,EAAAL,EAAAe,SAAAZ,EAAAhD,MACAgD,EAAAa,KACAgB,IAAAA,GAAA,EAAA9B,EACA,YACAA,EACA,0CAAAG,EAAAA,EADAH,CAEA,SAAAG,EAFAH,CAGA,kCACAS,EAAAT,EAAAC,EAAA8B,EAAA5B,EAAA,WAAAM,CACA,MACAR,EAAAI,UAAAL,EACA,uBAAAG,EAAAA,EADAH,CAEA,SAAAG,EAFAH,CAGA,iCAAAG,GACAM,EAAAT,EAAAC,EAAA8B,EAAA5B,EAAA,MAAAM,CACA,OACAT,EACA,uCAAAG,EAAAF,EAAAhD,MACAwD,EAAAT,EAAAC,EAAA8B,EAAA5B,GACAF,EAAAqB,QAAAtB,EACA,eADAA,CAEA,SAAAF,EAAAe,SAAAZ,EAAAqB,OAAArE,MAAAgD,EAAAhD,OAEA+C,EACA,KAEA,OAAAA,EACA,c,iCChSAxP,EAAAC,QAeA,SAAAkQ,GAEA,IAAAX,EAAAF,EAAAnN,QAAA,CAAA,IAAA,KAAAgO,EAAA1D,KAAA,UAAA6C,CACA,6BADAA,CAEA,qBAFAA,CAGA,qDAAAa,EAAAC,YAAAlG,OAAA,SAAAuF,GAAA,OAAAA,EAAAa,MAAAnQ,OAAA,WAAA,IAHAmP,CAIA,kBAJAA,CAKA,oBACAa,EAAAuB,OAAAlC,EACA,gBADAA,CAEA,SACAA,EACA,kBAGA,IADA,IAAA5O,EAAA,EACAA,EAAAuP,EAAAC,YAAAjQ,SAAAS,EAAA,CACA,IAAA6O,EAAAU,EAAAqB,EAAA5Q,GAAAiI,UACAmE,EAAAyC,EAAAG,wBAAAP,EAAA,QAAAI,EAAAzC,KACA2E,EAAA,IAAArC,EAAAe,SAAAZ,EAAAhD,MAAA+C,EACA,aAAAC,EAAAxC,IAGAwC,EAAAa,KAAAd,EACA,mCAAAmC,EAAAA,EADAnC,CAEA,QAAAmC,EAFAnC,CAGA,6BAEAoC,EAAAC,SAAApC,EAAAjC,WAAA/N,EAAA+P,EACA,OAAAoC,EAAAC,SAAApC,EAAAjC,UACAgC,EACA,UAEAoC,EAAAC,SAAA7E,KAAAvN,EAAA+P,EACA,WAAAoC,EAAAC,SAAA7E,IACAwC,EACA,cAEAA,EACA,mBADAA,CAEA,sBAFAA,CAGA,oBAHAA,CAIA,0BAAAC,EAAAjC,QAJAgC,CAKA,WAEAoC,EAAAE,MAAA9E,KAAAvN,EAAA+P,EACA,uCAAA5O,GACA4O,EACA,eAAAxC,GAEAwC,EACA,QADAA,CAEA,WAFAA,CAGA,qBAHAA,CAIA,QAJAA,CAKA,IALAA,CAMA,KAEAoC,EAAAZ,KAAAvB,EAAAjC,WAAA/N,EAAA+P,EACA,qDAAAmC,GACAnC,EACA,cAAAmC,IAGAlC,EAAAI,UAAAL,EAEA,uBAAAmC,EAAAA,EAFAnC,CAGA,QAAAmC,GAGAC,EAAAG,OAAA/E,KAAAvN,GAAA+P,EACA,iBADAA,CAEA,0BAFAA,CAGA,kBAHAA,CAIA,kBAAAmC,EAAA3E,EAJAwC,CAKA,SAGAoC,EAAAE,MAAA9E,KAAAvN,EAAA+P,EAAAC,EAAAG,aAAA8B,MACA,+BACA,0CAAAC,EAAA/Q,GACA4O,EACA,kBAAAmC,EAAA3E,IAGA4E,EAAAE,MAAA9E,KAAAvN,EAAA+P,EAAAC,EAAAG,aAAA8B,MACA,yBACA,oCAAAC,EAAA/Q,GACA4O,EACA,YAAAmC,EAAA3E,GACAwC,EACA,QADAA,CAEA,KAWA,IATAA,EACA,WADAA,CAEA,kBAFAA,CAGA,QAHAA,CAKA,IALAA,CAMA,KAGA5O,EAAA,EAAAA,EAAAuP,EAAAqB,EAAArR,SAAAS,EAAA,CACA,IAAAoR,EAAA7B,EAAAqB,EAAA5Q,GACAoR,EAAAC,UAAAzC,EACA,4BAAAwC,EAAAvF,KADA+C,CAEA,gDAlHA,qBAkHAwC,EAlHAvF,KAAA,KAqHA,OAAA+C,EACA,aA3HA,IAAAH,EAAAtP,EAAA,IACA6R,EAAA7R,EAAA,IACAuP,EAAAvP,EAAA,K,uCCJAC,EAAAC,QA0BA,SAAAkQ,GAWA,IATA,IAIAwB,EAJAnC,EAAAF,EAAAnN,QAAA,CAAA,IAAA,KAAAgO,EAAA1D,KAAA,UAAA6C,CACA,SADAA,CAEA,qBAKAxC,EAAAqD,EAAAC,YAAA1O,QAAA+O,KAAAnB,EAAAoB,mBAEA9P,EAAA,EAAAA,EAAAkM,EAAA3M,SAAAS,EAAA,CACA,IAAA6O,EAAA3C,EAAAlM,GAAAiI,UACA0I,EAAApB,EAAAqB,EAAAC,QAAAhC,GACAzC,EAAAyC,EAAAG,wBAAAP,EAAA,QAAAI,EAAAzC,KACAkF,EAAAN,EAAAE,MAAA9E,GACA2E,EAAA,IAAArC,EAAAe,SAAAZ,EAAAhD,MAGAgD,EAAAa,KACAd,EACA,kDAAAmC,EAAAlC,EAAAhD,KADA+C,CAEA,mDAAAmC,EAFAnC,CAGA,4CAAAC,EAAAxC,IAAA,EAAA,KAAA,EAAA,EAAA2E,EAAAO,OAAA1C,EAAAjC,SAAAiC,EAAAjC,SACA0E,IAAAzS,EAAA+P,EACA,oEAAA+B,EAAAI,GACAnC,EACA,qCAAA,GAAA0C,EAAAlF,EAAA2E,GACAnC,EACA,IADAA,CAEA,MAGAC,EAAAI,UAAAL,EACA,2BAAAmC,EAAAA,GAGAlC,EAAAsC,QAAAH,EAAAG,OAAA/E,KAAAvN,EAAA+P,EAEA,uBAAAC,EAAAxC,IAAA,EAAA,KAAA,EAFAuC,CAGA,+BAAAmC,EAHAnC,CAIA,cAAAxC,EAAA2E,EAJAnC,CAKA,eAGAA,EAEA,+BAAAmC,GACAO,IAAAzS,EACA2S,EAAA5C,EAAAC,EAAA8B,EAAAI,EAAA,OACAnC,EACA,0BAAAC,EAAAxC,IAAA,EAAAiF,KAAA,EAAAlF,EAAA2E,IAEAnC,EACA,OAIAC,EAAA4C,UAAA7C,EACA,iDAAAmC,EAAAlC,EAAAhD,MAEAyF,IAAAzS,EACA2S,EAAA5C,EAAAC,EAAA8B,EAAAI,GACAnC,EACA,uBAAAC,EAAAxC,IAAA,EAAAiF,KAAA,EAAAlF,EAAA2E,IAKA,OAAAnC,EACA,aA9FA,IAAAH,EAAAtP,EAAA,IACA6R,EAAA7R,EAAA,IACAuP,EAAAvP,EAAA,IAWA,SAAAqS,EAAA5C,EAAAC,EAAAC,EAAAiC,GACA,OAAAlC,EAAAG,aAAA8B,MACAlC,EAAA,+CAAAE,EAAAiC,GAAAlC,EAAAxC,IAAA,EAAA,KAAA,GAAAwC,EAAAxC,IAAA,EAAA,KAAA,GACAuC,EAAA,oDAAAE,EAAAiC,GAAAlC,EAAAxC,IAAA,EAAA,KAAA,K,uCClBAjN,EAAAC,QAAAoP,EAGA,IAAAiD,EAAAvS,EAAA,MACAsP,EAAAlL,UAAApB,OAAAwP,OAAAD,EAAAnO,YAAAqO,YAAAnD,GAAAoD,UAAA,OAEA,IAAAC,EAAA3S,EAAA,IACAuP,EAAAvP,EAAA,IAaA,SAAAsP,EAAA5C,EAAA2B,EAAAuE,EAAAC,EAAAC,GAGA,GAFAP,EAAAhJ,KAAArF,KAAAwI,EAAAkG,GAEAvE,GAAA,iBAAAA,EACA,MAAA1D,UAAA,4BAoCA,GA9BAzG,KAAA6O,WAAA,GAMA7O,KAAAmK,OAAArL,OAAAwP,OAAAtO,KAAA6O,YAMA7O,KAAA2O,QAAAA,EAMA3O,KAAA4O,SAAAA,GAAA,GAMA5O,KAAA8O,SAAAtT,EAMA2O,EACA,IAAA,IAAApL,EAAAD,OAAAC,KAAAoL,GAAAxN,EAAA,EAAAA,EAAAoC,EAAA7C,SAAAS,EAAA,CACA,IAAAoS,EAAAhQ,EAAApC,GACAqS,EAAAD,EAEA,iBAAA5E,EAAA4E,KACA/O,KAAA6O,WAAA7O,KAAAmK,OAAA6E,GAAA7E,EAAA4E,IAAAC,IAoBA5D,EAAA6D,SAAA,SAAAzG,EAAAC,EAAAyG,GACA,IAAAC,EAAA,IAAA/D,EAAA5C,EAAAC,EAAA0B,OAAA1B,EAAAiG,QAAAjG,EAAAkG,QAAAlG,EAAAmG,UAGA,OAFAO,EAAAL,SAAArG,EAAAqG,SACAK,EAAAD,SAAAA,EACAC,GAQA/D,EAAAlL,UAAAkP,OAAA,SAAAC,GACA,IAAAC,IAAAD,KAAAA,EAAAC,aACA,OAAAjE,EAAAiB,SAAA,CACA,UAAAtM,KAAA0O,QACA,SAAA1O,KAAAmK,OACA,WAAAnK,KAAA8O,UAAA9O,KAAA8O,SAAA5S,OAAA8D,KAAA8O,SAAAtT,EACA,UAAA8T,EAAAtP,KAAA2O,QAAAnT,EACA,WAAA8T,EAAAtP,KAAA4O,SAAApT,KAaA4P,EAAAlL,UAAAqP,IAAA,SAAA/G,EAAAQ,EAAA2F,GAGA,IAAAtD,EAAAmE,SAAAhH,GACA,MAAA/B,UAAA,yBAEA,IAAA4E,EAAAoE,UAAAzG,GACA,MAAAvC,UAAA,yBAEA,GAAAzG,KAAAmK,OAAA3B,KAAAhN,EACA,MAAAwC,MAAA,mBAAAwK,EAAA,QAAAxI,MAEA,GAAAA,KAAA0P,aAAA1G,GACA,MAAAhL,MAAA,MAAAgL,EAAA,mBAAAhJ,MAEA,GAAAA,KAAA2P,eAAAnH,GACA,MAAAxK,MAAA,SAAAwK,EAAA,oBAAAxI,MAEA,GAAAA,KAAA6O,WAAA7F,KAAAxN,EAAA,CACA,IAAAwE,KAAA0O,UAAA1O,KAAA0O,QAAAkB,YACA,MAAA5R,MAAA,gBAAAgL,EAAA,OAAAhJ,MACAA,KAAAmK,OAAA3B,GAAAQ,OAEAhJ,KAAA6O,WAAA7O,KAAAmK,OAAA3B,GAAAQ,GAAAR,EAGA,OADAxI,KAAA4O,SAAApG,GAAAmG,GAAA,KACA3O,MAUAoL,EAAAlL,UAAA2P,OAAA,SAAArH,GAEA,IAAA6C,EAAAmE,SAAAhH,GACA,MAAA/B,UAAA,yBAEA,IAAA1F,EAAAf,KAAAmK,OAAA3B,GACA,GAAA,MAAAzH,EACA,MAAA/C,MAAA,SAAAwK,EAAA,uBAAAxI,MAMA,cAJAA,KAAA6O,WAAA9N,UACAf,KAAAmK,OAAA3B,UACAxI,KAAA4O,SAAApG,GAEAxI,MAQAoL,EAAAlL,UAAAwP,aAAA,SAAA1G,GACA,OAAAyF,EAAAiB,aAAA1P,KAAA8O,SAAA9F,IAQAoC,EAAAlL,UAAAyP,eAAA,SAAAnH,GACA,OAAAiG,EAAAkB,eAAA3P,KAAA8O,SAAAtG,K,uCCxLA,IAAA4C,EAAAtP,EAAA,IACAuP,EAAAvP,EAAA,IAEA,SAAAgU,EAAAvE,EAAAC,EAAAC,EAAAC,EAAA4B,GAIA,GAHAA,EAAAA,GAAA,GAGA9B,EAAAG,aACA2B,EACA9B,EAAAG,wBAAAP,EACAG,EAAA,kCAAAG,EAAAA,EAAA4B,EAAA5B,EAAAA,EAAA4B,GACA/B,EAAA,+CAAAE,EAAAC,EAAAA,EAAA4B,EAAA5B,EAAAA,EAAA4B,GAEA9B,EAAAG,wBAAAP,EACAG,EAAA,YAAAG,EAAAA,GACAH,EAAA,6BAAAE,EAAAC,EAAAA,QAGA,OAAAF,EAAAzC,MACA,IAAA,SACA,IAAA,QACAuE,EACA/B,EAAA,kHAAAG,EAAAA,EAAAA,EAAA4B,EAAA5B,EAAA4B,EAAA5B,EAAA4B,EAAA5B,EAAA4B,EAAA5B,EAAA4B,EAAA5B,EAAA4B,GAEA/B,EAAA,sFAAAG,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAEA,MACA,IAAA,SACA,IAAA,UACA,IAAA,QACA,IAAA,SACA,IAAA,WACA,IAAA,SACA,IAAA,OACA4B,EACA/B,EAAA,oCAAAG,EAAAA,EAAA4B,EAAA5B,EAAAA,EAAA4B,GAEA/B,EAAA,YAAAG,EAAAA,GAEA,MACA,IAAA,SACA,IAAA,QACA,IAAA,SACA,IAAA,UACA,IAAA,WACA4B,EACA/B,EAAA,+CAAAG,EAAAA,EAAA4B,EAAA5B,EAAAA,EAAA4B,GAEA/B,EAAA,6BAAAG,EAAAA,GAEA,MACA,IAAA,QACA4B,EACA/B,EAAA,gDAAAG,EAAAA,EAAA4B,EAAA5B,EAAAA,EAAA4B,GAEA/B,EAAA,8BAAAG,EAAAA,GAEA,MACA,QACA,MAAA1N,MAAA,oBAAAwN,EAAAzC,MAGA,OAAAwC,EASAxP,EAAAC,QAAA,SAAAkQ,GAEA,IAAArD,EAAAqD,EAAAC,YACAZ,EAAAF,EAAAnN,QAAA,GAAAgO,EAAA1D,KAAA,WAIA,GAFA+C,EAAA,mCAAAA,CAAA,gCAEA1C,EAAA3M,OAAA,CACAqP,EAAA,YAEA,IAAA,IAAA5O,EAAA,EAAAA,EAAAkM,EAAA3M,SAAAS,EAAA,CACA,IAAA6O,EAAA3C,EAAAlM,GAAAiI,UACA8G,EAAAL,EAAAe,SAAAZ,EAAAhD,MAGAgD,EAAAa,KACA1P,GACA4O,EAAA,MAGAA,EACA,uFACAG,EACAA,EACAA,EACAA,GAEAoE,EACAvE,EACAC,EACA7O,EACA+O,EACA,aAEAH,EAAA,SAGAC,EAAAI,UACAjP,GACA4O,EAAA,MAGAA,EACA,2FACAG,EACAA,EACAA,EACAA,EACAA,GAEAoE,EACAvE,EACAC,EACA7O,EACA+O,EACA,MALAoE,CAMA,WAIAnT,GACA4O,EAAA,MAEAuE,EAAAvE,EAAAC,EAAA7O,EAAA+O,IAGAH,EAAA,UAEAA,EAAA,gBAEA,OAAAA,I,iCC9IAxP,EAAAC,QAAA+T,EAEA,IAEAC,EAFAlU,EAAA,EAEAkI,CAAA,MAgBA,SAAA+L,EAAAb,EAAAR,GAGA,OAFAA,EAAAA,GAAA,GAEA,IAAAuB,QAAA,SAAArL,EAAAsL,GACA,SAAAC,EAAAC,EAAAC,GACAD,EACAF,EAAAE,GAEAxL,EAAAyL,GAIA,OAAA3B,EAAA4B,KAAAN,GAAAA,EAAAO,SACAP,EAAAO,SACArB,EACA,SAAAkB,EAAAI,GACA,OAAAJ,GAAA,oBAAAK,eACAV,EAAAO,IAAApB,EAAAR,EAAAyB,GACAC,EACAD,EAAAC,GACAD,EACA,KACAzB,EAAAgC,OAAAF,EAAAA,EAAA/R,SAAA,WAMAsR,EAAAO,IAAApB,EAAAR,EAAAyB,KAKAJ,EAAAO,IAAA,SAAApB,EAAAR,EAAAyB,GACA,IAAAG,EAAA,IAAAG,eACAH,EAAAK,mBAAA,WACA,GAAA,IAAAL,EAAAM,WAAA,OAAApV,EAKA,GAAA,IAAA8U,EAAAO,QAAA,MAAAP,EAAAO,OACA,OAAAV,EAAAnS,MAAA,UAAAsS,EAAAO,SAIA,GAAAnC,EAAAgC,OAAA,CACA,IAAA7T,EAAAyT,EAAAQ,SACA,IAAAjU,EAAA,CACAA,EAAA,GACA,IAAA,IAAAF,EAAA,EAAAA,EAAA2T,EAAAS,aAAA7U,SAAAS,EACAE,EAAAQ,KAAA,IAAAiT,EAAAS,aAAAhT,WAAApB,IAEA,OAAAwT,EACA,KACA,oBAAAlN,WAAA,IAAAA,WAAApG,GAAAA,GAGA,OAAAsT,EAAA,KAAAG,EAAAS,eAGArC,EAAAgC,SAEA,qBAAAJ,GACAA,EAAAU,iBAAA,sCACAV,EAAAW,aAAA,eAGAX,EAAAY,KAAA,MAAAhC,GACAoB,EAAAa,S,yBCzFApV,EAAAC,QAAAoV,EAGA,IAAA/C,EAAAvS,EAAA,MACAsV,EAAAlR,UAAApB,OAAAwP,OAAAD,EAAAnO,YAAAqO,YAAA6C,GAAA5C,UAAA,QAEA,IAIA6C,EAJAjG,EAAAtP,EAAA,IACA6R,EAAA7R,EAAA,IACAuP,EAAAvP,EAAA,IAIAwV,EAAA,+BAyCA,SAAAF,EAAA5I,EAAAQ,EAAAD,EAAAuB,EAAAiH,EAAA7C,EAAAC,GAcA,GAZAtD,EAAAmG,SAAAlH,IACAqE,EAAA4C,EACA7C,EAAApE,EACAA,EAAAiH,EAAA/V,GACA6P,EAAAmG,SAAAD,KACA5C,EAAAD,EACAA,EAAA6C,EACAA,EAAA/V,GAGA6S,EAAAhJ,KAAArF,KAAAwI,EAAAkG,IAEArD,EAAAoE,UAAAzG,IAAAA,EAAA,EACA,MAAAvC,UAAA,qCAEA,IAAA4E,EAAAmE,SAAAzG,GACA,MAAAtC,UAAA,yBAEA,GAAA6D,IAAA9O,IAAA8V,EAAArT,KAAAqM,EAAAA,EAAA7L,WAAAgT,eACA,MAAAhL,UAAA,8BAEA,GAAA8K,IAAA/V,IAAA6P,EAAAmE,SAAA+B,GACA,MAAA9K,UAAA,2BAMAzG,KAAAsK,KAAAA,GAAA,aAAAA,EAAAA,EAAA9O,EAMAwE,KAAA+I,KAAAA,EAMA/I,KAAAgJ,GAAAA,EAMAhJ,KAAAuR,OAAAA,GAAA/V,EAMAwE,KAAAgO,SAAA,aAAA1D,EAMAtK,KAAAoO,UAAApO,KAAAgO,SAMAhO,KAAA4L,SAAA,aAAAtB,EAMAtK,KAAAqM,KAAA,EAMArM,KAAA0R,QAAA,KAMA1R,KAAA6M,OAAA,KAMA7M,KAAA6L,YAAA,KAMA7L,KAAA2R,aAAA,KAMA3R,KAAA+M,OAAA1B,EAAAuG,MAAAjE,EAAAZ,KAAAhE,KAAAvN,EAMAwE,KAAAoN,MAAA,UAAArE,EAMA/I,KAAA2L,aAAA,KAMA3L,KAAA6R,eAAA,KAMA7R,KAAA8R,eAAA,KAOA9R,KAAA+R,EAAA,KAMA/R,KAAA2O,QAAAA,EA7JAyC,EAAAnC,SAAA,SAAAzG,EAAAC,GACA,OAAA,IAAA2I,EAAA5I,EAAAC,EAAAO,GAAAP,EAAAM,KAAAN,EAAA6B,KAAA7B,EAAA8I,OAAA9I,EAAAiG,QAAAjG,EAAAkG,UAqKA7P,OAAAkT,eAAAZ,EAAAlR,UAAA,SAAA,CACA+K,IAAA,WAIA,OAFA,OAAAjL,KAAA+R,IACA/R,KAAA+R,GAAA,IAAA/R,KAAAiS,UAAA,WACAjS,KAAA+R,KAOAX,EAAAlR,UAAAgS,UAAA,SAAA1J,EAAA9I,EAAAyS,GAGA,MAFA,WAAA3J,IACAxI,KAAA+R,EAAA,MACA1D,EAAAnO,UAAAgS,UAAA7M,KAAArF,KAAAwI,EAAA9I,EAAAyS,IAwBAf,EAAAlR,UAAAkP,OAAA,SAAAC,GACA,IAAAC,IAAAD,KAAAA,EAAAC,aACA,OAAAjE,EAAAiB,SAAA,CACA,OAAA,aAAAtM,KAAAsK,MAAAtK,KAAAsK,MAAA9O,EACA,OAAAwE,KAAA+I,KACA,KAAA/I,KAAAgJ,GACA,SAAAhJ,KAAAuR,OACA,UAAAvR,KAAA0O,QACA,UAAAY,EAAAtP,KAAA2O,QAAAnT,KASA4V,EAAAlR,UAAA0E,QAAA,WAEA,OAAA5E,KAAAoS,SACApS,OAEAA,KAAA6L,YAAA8B,EAAAC,SAAA5N,KAAA+I,SAAAvN,IACAwE,KAAA2L,cAAA3L,KAAA8R,eAAA9R,KAAA8R,eAAAO,OAAArS,KAAAqS,QAAAC,iBAAAtS,KAAA+I,MACA/I,KAAA2L,wBAAA0F,EACArR,KAAA6L,YAAA,KAEA7L,KAAA6L,YAAA7L,KAAA2L,aAAAxB,OAAArL,OAAAC,KAAAiB,KAAA2L,aAAAxB,QAAA,KAIAnK,KAAA0O,SAAA,MAAA1O,KAAA0O,QAAA,UACA1O,KAAA6L,YAAA7L,KAAA0O,QAAA,QACA1O,KAAA2L,wBAAAP,GAAA,iBAAApL,KAAA6L,cACA7L,KAAA6L,YAAA7L,KAAA2L,aAAAxB,OAAAnK,KAAA6L,eAIA7L,KAAA0O,WACA,IAAA1O,KAAA0O,QAAAZ,SAAA9N,KAAA0O,QAAAZ,SAAAtS,IAAAwE,KAAA2L,cAAA3L,KAAA2L,wBAAAP,WACApL,KAAA0O,QAAAZ,OACAhP,OAAAC,KAAAiB,KAAA0O,SAAAxS,SACA8D,KAAA0O,QAAAlT,IAIAwE,KAAA+M,MACA/M,KAAA6L,YAAAR,EAAAuG,KAAAW,WAAAvS,KAAA6L,YAAA,KAAA7L,KAAA+I,KAAA,IAGAjK,OAAA0T,QACA1T,OAAA0T,OAAAxS,KAAA6L,cAEA7L,KAAAoN,OAAA,iBAAApN,KAAA6L,cAEAR,EAAApP,OAAAgC,KAAA+B,KAAA6L,aACAR,EAAApP,OAAA2B,OAAAoC,KAAA6L,YAAA7K,EAAAqK,EAAAoH,UAAApH,EAAApP,OAAAC,OAAA8D,KAAA6L,cAAA,GAEAR,EAAA/F,KAAAG,MAAAzF,KAAA6L,YAAA7K,EAAAqK,EAAAoH,UAAApH,EAAA/F,KAAApJ,OAAA8D,KAAA6L,cAAA,GACA7L,KAAA6L,YAAA7K,GAIAhB,KAAAqM,IACArM,KAAA2R,aAAAtG,EAAAqH,YACA1S,KAAA4L,SACA5L,KAAA2R,aAAAtG,EAAAsH,WAEA3S,KAAA2R,aAAA3R,KAAA6L,YAGA7L,KAAAqS,kBAAAhB,IACArR,KAAAqS,OAAAO,KAAA1S,UAAAF,KAAAwI,MAAAxI,KAAA2R,cAEAtD,EAAAnO,UAAA0E,QAAAS,KAAArF,OA5BA,IAQAgB,GA2CAoQ,EAAAyB,EAAA,SAAAC,EAAAC,EAAAC,EAAArB,GAUA,MAPA,mBAAAoB,EACAA,EAAA1H,EAAA4H,aAAAF,GAAAvK,KAGAuK,GAAA,iBAAAA,IACAA,EAAA1H,EAAA6H,aAAAH,GAAAvK,MAEA,SAAAtI,EAAAiT,GACA9H,EAAA4H,aAAA/S,EAAAqO,aACAgB,IAAA,IAAA6B,EAAA+B,EAAAL,EAAAC,EAAAC,EAAA,CAAAI,QAAAzB,OAkBAP,EAAAiC,EAAA,SAAAC,GACAjC,EAAAiC,I,6CChXA,IAAA1X,EAAAG,EAAAC,QAAAF,EAAA,IAEAF,EAAA2X,MAAA,QAmDA3X,EAAA4X,KAhCA,SAAAtE,EAAAuE,EAAAtD,GAKA,OAFAsD,EAFA,mBAAAA,GACAtD,EAAAsD,EACA,IAAA7X,EAAA8X,MACAD,GAAA,IAAA7X,EAAA8X,MACAF,KAAAtE,EAAAiB,IA8BAvU,EAAA+X,QAAA7X,EAAA,IACAF,EAAAgY,QAAA9X,EAAA,IACAF,EAAAiY,SAAA/X,EAAA,IACAF,EAAAuP,UAAArP,EAAA,IAGAF,EAAAyS,iBAAAvS,EAAA,IACAF,EAAA6S,UAAA3S,EAAA,IACAF,EAAA8X,KAAA5X,EAAA,IACAF,EAAAwP,KAAAtP,EAAA,IACAF,EAAAyV,KAAAvV,EAAA,IACAF,EAAAwV,MAAAtV,EAAA,IACAF,EAAAkY,MAAAhY,EAAA,IACAF,EAAAmY,SAAAjY,EAAA,IACAF,EAAAoY,QAAAlY,EAAA,IACAF,EAAAqY,OAAAnY,EAAA,IAGAF,EAAAsY,QAAApY,EAAA,IACAF,EAAAuY,SAAArY,EAAA,IAGAF,EAAAwY,OAAAtY,EAAA,IACAF,EAAA+R,MAAA7R,EAAA,IACAF,EAAAyP,KAAAvP,EAAA,IAGAF,EAAAyS,iBAAAgF,EAAAzX,EAAA8X,MACA9X,EAAA6S,UAAA4E,EAAAzX,EAAAyV,KAAAzV,EAAAoY,QAAApY,EAAAwP,MACAxP,EAAA8X,KAAAL,EAAAzX,EAAAyV,MACAzV,EAAAwV,MAAAiC,EAAAzX,EAAAyV,O,+ICtFA,IAAAzV,EAAAI,EA6BA,SAAAqY,IACAzY,EAAAyP,KAAAgI,IACAzX,EAAA0Y,OAAAjB,EAAAzX,EAAA2Y,cACA3Y,EAAA4Y,OAAAnB,EAAAzX,EAAA6Y,cAxBA7Y,EAAA2X,MAAA,UAGA3X,EAAA0Y,OAAAxY,EAAA,IACAF,EAAA2Y,aAAAzY,EAAA,IACAF,EAAA4Y,OAAA1Y,EAAA,IACAF,EAAA6Y,aAAA3Y,EAAA,IAGAF,EAAAyP,KAAAvP,EAAA,IACAF,EAAA8Y,IAAA5Y,EAAA,IACAF,EAAA+Y,MAAA7Y,EAAA,IACAF,EAAAyY,UAAAA,EAEAzY,EAAAgW,KAAAhW,EAAAyP,KAAAuG,KAcAyC,K,+DCpCA,IAAAzY,EAAAG,EAAAC,QAAAF,EAAA,IAEAF,EAAA2X,MAAA,OAGA3X,EAAAgZ,SAAA9Y,EAAA,IACAF,EAAAiZ,MAAA/Y,EAAA,IACAF,EAAAyM,OAAAvM,EAAA,IAGAF,EAAA8X,KAAAL,EAAAzX,EAAAyV,KAAAzV,EAAAiZ,MAAAjZ,EAAAyM,S,6CCVAtM,EAAAC,QAAA+X,EAGA,IAAA3C,EAAAtV,EAAA,MACAiY,EAAA7T,UAAApB,OAAAwP,OAAA8C,EAAAlR,YAAAqO,YAAAwF,GAAAvF,UAAA,WAEA,IAAAb,EAAA7R,EAAA,IACAuP,EAAAvP,EAAA,IAcA,SAAAiY,EAAAvL,EAAAQ,EAAAO,EAAAR,EAAA2F,EAAAC,GAIA,GAHAyC,EAAA/L,KAAArF,KAAAwI,EAAAQ,EAAAD,EAAAvN,EAAAA,EAAAkT,EAAAC,IAGAtD,EAAAmE,SAAAjG,GACA,MAAA9C,UAAA,4BAMAzG,KAAAuJ,QAAAA,EAMAvJ,KAAA8U,gBAAA,KAGA9U,KAAAqM,KAAA,EAwBA0H,EAAA9E,SAAA,SAAAzG,EAAAC,GACA,OAAA,IAAAsL,EAAAvL,EAAAC,EAAAO,GAAAP,EAAAc,QAAAd,EAAAM,KAAAN,EAAAiG,QAAAjG,EAAAkG,UAQAoF,EAAA7T,UAAAkP,OAAA,SAAAC,GACA,IAAAC,IAAAD,KAAAA,EAAAC,aACA,OAAAjE,EAAAiB,SAAA,CACA,UAAAtM,KAAAuJ,QACA,OAAAvJ,KAAA+I,KACA,KAAA/I,KAAAgJ,GACA,SAAAhJ,KAAAuR,OACA,UAAAvR,KAAA0O,QACA,UAAAY,EAAAtP,KAAA2O,QAAAnT,KAOAuY,EAAA7T,UAAA0E,QAAA,WACA,GAAA5E,KAAAoS,SACA,OAAApS,KAGA,GAAA2N,EAAAO,OAAAlO,KAAAuJ,WAAA/N,EACA,MAAAwC,MAAA,qBAAAgC,KAAAuJ,SAEA,OAAA6H,EAAAlR,UAAA0E,QAAAS,KAAArF,OAaA+T,EAAAlB,EAAA,SAAAC,EAAAiC,EAAAC,GAUA,MAPA,mBAAAA,EACAA,EAAA3J,EAAA4H,aAAA+B,GAAAxM,KAGAwM,GAAA,iBAAAA,IACAA,EAAA3J,EAAA6H,aAAA8B,GAAAxM,MAEA,SAAAtI,EAAAiT,GACA9H,EAAA4H,aAAA/S,EAAAqO,aACAgB,IAAA,IAAAwE,EAAAZ,EAAAL,EAAAiC,EAAAC,O,uCC1HAjZ,EAAAC,QAAAkY,EAEA,IAAA7I,EAAAvP,EAAA,IASA,SAAAoY,EAAAe,GAEA,GAAAA,EACA,IAAA,IAAAlW,EAAAD,OAAAC,KAAAkW,GAAAtY,EAAA,EAAAA,EAAAoC,EAAA7C,SAAAS,EACAqD,KAAAjB,EAAApC,IAAAsY,EAAAlW,EAAApC,IA0BAuX,EAAA5F,OAAA,SAAA2G,GACA,OAAAjV,KAAAkV,MAAA5G,OAAA2G,IAWAf,EAAAtX,OAAA,SAAA8U,EAAAyD,GACA,OAAAnV,KAAAkV,MAAAtY,OAAA8U,EAAAyD,IAWAjB,EAAAkB,gBAAA,SAAA1D,EAAAyD,GACA,OAAAnV,KAAAkV,MAAAE,gBAAA1D,EAAAyD,IAYAjB,EAAAtW,OAAA,SAAAyX,GACA,OAAArV,KAAAkV,MAAAtX,OAAAyX,IAYAnB,EAAAoB,gBAAA,SAAAD,GACA,OAAArV,KAAAkV,MAAAI,gBAAAD,IAUAnB,EAAAqB,OAAA,SAAA7D,GACA,OAAA1R,KAAAkV,MAAAK,OAAA7D,IAUAwC,EAAAjI,WAAA,SAAAuJ,GACA,OAAAxV,KAAAkV,MAAAjJ,WAAAuJ,IAWAtB,EAAA5H,SAAA,SAAAoF,EAAAhD,GACA,OAAA1O,KAAAkV,MAAA5I,SAAAoF,EAAAhD,IAOAwF,EAAAhU,UAAAkP,OAAA,WACA,OAAApP,KAAAkV,MAAA5I,SAAAtM,KAAAqL,EAAAgE,iB,2BCtIAtT,EAAAC,QAAAiY,EAGA,IAAA5F,EAAAvS,EAAA,MACAmY,EAAA/T,UAAApB,OAAAwP,OAAAD,EAAAnO,YAAAqO,YAAA0F,GAAAzF,UAAA,SAEA,IAAAnD,EAAAvP,EAAA,IAgBA,SAAAmY,EAAAzL,EAAAO,EAAA0M,EAAAxE,EAAAyE,EAAAC,EAAAjH,EAAAC,GAYA,GATAtD,EAAAmG,SAAAkE,IACAhH,EAAAgH,EACAA,EAAAC,EAAAna,GACA6P,EAAAmG,SAAAmE,KACAjH,EAAAiH,EACAA,EAAAna,GAIAuN,IAAAvN,IAAA6P,EAAAmE,SAAAzG,GACA,MAAAtC,UAAA,yBAGA,IAAA4E,EAAAmE,SAAAiG,GACA,MAAAhP,UAAA,gCAGA,IAAA4E,EAAAmE,SAAAyB,GACA,MAAAxK,UAAA,iCAEA4H,EAAAhJ,KAAArF,KAAAwI,EAAAkG,GAMA1O,KAAA+I,KAAAA,GAAA,MAMA/I,KAAAyV,YAAAA,EAMAzV,KAAA0V,gBAAAA,GAAAla,EAMAwE,KAAAiR,aAAAA,EAMAjR,KAAA2V,iBAAAA,GAAAna,EAMAwE,KAAA4V,oBAAA,KAMA5V,KAAA6V,qBAAA,KAMA7V,KAAA2O,QAAAA,EAqBAsF,EAAAhF,SAAA,SAAAzG,EAAAC,GACA,OAAA,IAAAwL,EAAAzL,EAAAC,EAAAM,KAAAN,EAAAgN,YAAAhN,EAAAwI,aAAAxI,EAAAiN,cAAAjN,EAAAkN,eAAAlN,EAAAiG,QAAAjG,EAAAkG,UAQAsF,EAAA/T,UAAAkP,OAAA,SAAAC,GACA,IAAAC,IAAAD,KAAAA,EAAAC,aACA,OAAAjE,EAAAiB,SAAA,CACA,OAAA,QAAAtM,KAAA+I,MAAA/I,KAAA+I,MAAAvN,EACA,cAAAwE,KAAAyV,YACA,gBAAAzV,KAAA0V,cACA,eAAA1V,KAAAiR,aACA,iBAAAjR,KAAA2V,eACA,UAAA3V,KAAA0O,QACA,UAAAY,EAAAtP,KAAA2O,QAAAnT,KAOAyY,EAAA/T,UAAA0E,QAAA,WAGA,OAAA5E,KAAAoS,SACApS,MAEAA,KAAA4V,oBAAA5V,KAAAqS,OAAAyD,WAAA9V,KAAAyV,aACAzV,KAAA6V,qBAAA7V,KAAAqS,OAAAyD,WAAA9V,KAAAiR,cAEA5C,EAAAnO,UAAA0E,QAAAS,KAAArF,S,iCCpJAjE,EAAAC,QAAAyS,EAGA,IAAAJ,EAAAvS,EAAA,MACA2S,EAAAvO,UAAApB,OAAAwP,OAAAD,EAAAnO,YAAAqO,YAAAE,GAAAD,UAAA,YAEA,IAGA6C,EACA2C,EACA5I,EALAgG,EAAAtV,EAAA,IACAuP,EAAAvP,EAAA,IAuCA,SAAAia,EAAAC,EAAA3G,GACA,IAAA2G,IAAAA,EAAA9Z,OACA,OAAAV,EAEA,IADA,IAAAya,EAAA,GACAtZ,EAAA,EAAAA,EAAAqZ,EAAA9Z,SAAAS,EACAsZ,EAAAD,EAAArZ,GAAA6L,MAAAwN,EAAArZ,GAAAyS,OAAAC,GACA,OAAA4G,EA4CA,SAAAxH,EAAAjG,EAAAkG,GACAL,EAAAhJ,KAAArF,KAAAwI,EAAAkG,GAMA1O,KAAA0I,OAAAlN,EAOAwE,KAAAkW,EAAA,KA7EAzH,EAAAQ,SAAA,SAAAzG,EAAAC,EAAAyG,GACA,IAAAiH,EAAA,IAAA1H,EAAAjG,EAAAC,EAAAiG,SAAA0H,QAAA3N,EAAAC,OAAAwG,GAEA,OADAiH,EAAAjH,SAAAA,EACAiH,GAmBA1H,EAAAsH,YAAAA,EAQAtH,EAAAiB,aAAA,SAAAZ,EAAA9F,GACA,GAAA8F,EACA,IAAA,IAAAnS,EAAA,EAAAA,EAAAmS,EAAA5S,SAAAS,EACA,GAAA,iBAAAmS,EAAAnS,IAAAmS,EAAAnS,GAAA,IAAAqM,GAAA8F,EAAAnS,GAAA,GAAAqM,EACA,OAAA,EACA,OAAA,GASAyF,EAAAkB,eAAA,SAAAb,EAAAtG,GACA,GAAAsG,EACA,IAAA,IAAAnS,EAAA,EAAAA,EAAAmS,EAAA5S,SAAAS,EACA,GAAAmS,EAAAnS,KAAA6L,EACA,OAAA,EACA,OAAA,GA+BAiG,EAAAvO,UAAAmW,WAAA,WAGA,OAFArW,KAAAkW,EAAA,KACAlW,KAAAsW,EAAA,KACAtW,MASAlB,OAAAkT,eAAAvD,EAAAvO,UAAA,cAAA,CACA+K,IAAA,WACA,OAAAjL,KAAAkW,IAAAlW,KAAAkW,EAAA7K,EAAAkL,QAAAvW,KAAA0I,YA6BA+F,EAAAvO,UAAAkP,OAAA,SAAAC,GACA,OAAAhE,EAAAiB,SAAA,CACA,UAAAtM,KAAA0O,QACA,SAAAqH,EAAA/V,KAAAwW,YAAAnH,MAUAZ,EAAAvO,UAAAkW,QAAA,SAAAK,EAAAvH,GAGA,GAAAuH,EACA,IAAA,IAAA/N,EAAAgO,EAAA5X,OAAAC,KAAA0X,GAAA9Z,EAAA,EAAAA,EAAA+Z,EAAAxa,SAAAS,EAAA,CAIA,IAAAsS,GAHAvG,EAAA+N,EAAAC,EAAA/Z,KAGAkM,SAAArN,EACA6V,EAAApC,SACAvG,EAAAyB,SAAA3O,EACA4P,EAAA6D,SACAvG,EAAAiO,UAAAnb,EACAwY,EAAA/E,SACAvG,EAAAM,KAAAxN,GACA4V,EAAAnC,SAEAA,EAhBAjP,KAiBAuP,IAAAN,EAAAyH,EAAA/Z,GAAA+L,EAAAwG,IAjBAlP,KAmBA4W,OAAAF,EAAA/Z,GAAA+L,EAAAA,OAAAwG,GAIA,OAAAlP,MAQAyO,EAAAvO,UAAA+K,IAAA,SAAAzC,GACA/L,MAAAoa,QAAArO,KACAA,EAAAA,EAAAhE,MAAA,QAMA,IAHA,IAAAsS,EAAA9W,KAAA+W,IACAC,EAAAF,EACAG,EAAAzO,EAAA/K,QACAuZ,GAAAC,EAAA/a,SACA8a,EAAAA,EAAAE,UAAAF,EAAAE,SAAAC,KAAA,SAAAC,GACA,OAAAA,EAAA5O,OAAAyO,EAAA,OAGAA,EAAAtS,QAIA,OAAAsS,EAAA/a,QAAA8a,GAMA,EAAAxO,EAAAtM,SACAsM,EAAAA,EAAA9K,KAAA,KACAsZ,EAAAF,EAAAI,SAAAC,KAAA,SAAAC,GACA,OAAAA,EAAA5O,OAAAA,KARAwO,EAAAK,KAcA,MAGA5I,EAAAvO,UAAA6W,EAAA,WACA,IAAAD,EAAA,CAAAI,SAAA,IAwBA,OAvBAlX,KAAAwW,YAAAc,QAAA,SAAAF,GACA,IAAAG,EAAAH,EAAA5O,KAAAhE,MAAA,OACAwS,EAAAF,EACAS,EAAA9Z,MAAA,GAAA,GAAA6Z,QAAA,SAAAE,GACA,IAMAC,EANAC,EAAAV,EAAAE,SAAAC,KAAA,SAAAQ,GACA,OAAAA,EAAAnP,OAAAgP,IAGAR,EADAU,IAGAD,EAAA,CAAAjP,KAAAgP,EAAAN,SAAA,IACAF,EAAAE,SAAA7Z,KAAAoa,GACAA,KAIA,IAAAG,EAAAR,EAAAL,GAAAK,EAAAL,IACAC,EAAAE,SAAA7Z,KAAA,CACAmL,KAAA+O,EAAAA,EAAArb,OAAA,GACAmb,KAAAD,EACAF,SAAAU,GAAAA,EAAAV,aAGAJ,GAUArI,EAAAvO,UAAA2X,QAAA,SAAArP,GACA,GAAAxI,KAAA0I,QAAA1I,KAAA0I,OAAAF,aAAA4C,EACA,OAAApL,KAAA0I,OAAAF,GAAA2B,OACA,MAAAnM,MAAA,iBAAAwK,IAUAiG,EAAAvO,UAAAqP,IAAA,SAAAiG,GAEA,KAAAA,aAAApE,GAAAoE,EAAAjE,SAAA/V,GAAAga,aAAAnE,GAAAmE,aAAApK,GAAAoK,aAAAxB,GAAAwB,aAAA/G,GACA,MAAAhI,UAAA,wCAEA,GAAAzG,KAAA0I,OAEA,CACA,IAAAoP,EAAA9X,KAAAiL,IAAAuK,EAAAhN,MACA,GAAAsP,EAAA,CACA,KAAAA,aAAArJ,GAAA+G,aAAA/G,IAAAqJ,aAAAzG,GAAAyG,aAAA9D,EAWA,MAAAhW,MAAA,mBAAAwX,EAAAhN,KAAA,QAAAxI,MARA,IADA,IAAA0I,EAAAoP,EAAAtB,YACA7Z,EAAA,EAAAA,EAAA+L,EAAAxM,SAAAS,EACA6Y,EAAAjG,IAAA7G,EAAA/L,IACAqD,KAAA6P,OAAAiI,GACA9X,KAAA0I,SACA1I,KAAA0I,OAAA,IACA8M,EAAAuC,WAAAD,EAAApJ,SAAA,SAZA1O,KAAA0I,OAAA,GAqBA,OAHA1I,KAAA0I,OAAA8M,EAAAhN,MAAAgN,EACAxV,KAAAqW,aACAb,EAAAwC,MAAAhY,MACAA,MAUAyO,EAAAvO,UAAA2P,OAAA,SAAA2F,GAEA,KAAAA,aAAAnH,GACA,MAAA5H,UAAA,qCACA,GAAA+O,EAAAnD,SAAArS,KACA,MAAAhC,MAAAwX,EAAA,uBAAAxV,MASA,cAPAA,KAAA0I,OAAA8M,EAAAhN,MACA1J,OAAAC,KAAAiB,KAAA0I,QAAAxM,SACA8D,KAAA0I,OAAAlN,GAEAwE,KAAAqW,aAEAb,EAAAyC,SAAAjY,MACAA,MAUAyO,EAAAvO,UAAA0W,OAAA,SAAAvS,EAAAoE,EAAAyG,GAEA,GAAAzS,MAAAoa,QAAAxS,GACAA,EAAAA,EAAA3G,KAAA,UACA,IAAA2N,EAAAmE,SAAAnL,GACA,MAAAoC,UAAA,gBACA,GAAApC,EAAA6T,WAAA,KACA,MAAAla,MAAA,yBAEA,IAAAgZ,EAAAhX,KACA,GAAAgX,EAAAtO,QAAAsO,EAAAtO,OAAArE,IAGA,IAFA2S,EAAAA,EAAAtO,OAAArE,IACA8T,UAAA9a,KAAA6R,KACA8H,aAAAvI,GACA,MAAAzQ,MAAA,kDAEAgZ,EAAAzH,IAAAyH,EAAA,IAAAvI,EAAApK,IACA2S,EAAA9H,SAAAA,EACA8H,EAAAmB,UAAA,CAAAjJ,GAKA,OAHAzG,GACAuO,EAAAZ,QAAA3N,EAAAyG,GAEA8H,GAOAvI,EAAAvO,UAAAkY,WAAA,WAEA,IADA,IAAA1P,EAAA1I,KAAAwW,YAAA7Z,EAAA,EACAA,EAAA+L,EAAAxM,QACAwM,EAAA/L,aAAA8R,EACA/F,EAAA/L,KAAAyb,aAEA1P,EAAA/L,KAAAiI,UACA,OAAA5E,KAAA4E,WAUA6J,EAAAvO,UAAAmY,OAAA,SAAAhU,EAAAiU,EAAAC,GASA,GANA,kBAAAD,GACAC,EAAAD,EACAA,EAAA9c,GACA8c,IAAA7b,MAAAoa,QAAAyB,KACAA,EAAA,CAAAA,IAEAjN,EAAAmE,SAAAnL,IAAAA,EAAAnI,OAAA,CACA,GAAA,MAAAmI,EACA,OAAArE,KAAAyT,KACApP,EAAAA,EAAAG,MAAA,UACA,IAAAH,EAAAnI,OACA,OAAA8D,KAGA,GAAA,KAAAqE,EAAA,GACA,OAAArE,KAAAyT,KAAA4E,OAAAhU,EAAA5G,MAAA,GAAA6a,GAGA,IAAAE,EAAAxY,KAAAiL,IAAA5G,GACA,GAAAmU,GACA,IAAAF,IAAAA,EAAA9K,QAAAgL,EAAAjK,aACA,OAAAiK,OAIA,IAAA,IAAA7b,EAAA,EAAAA,EAAAqD,KAAAwW,YAAAta,SAAAS,EACA,GAAAqD,KAAAkW,EAAAvZ,aAAA8R,IAAA+J,EAAAxY,KAAAkW,EAAAvZ,GAAA0b,OAAAhU,EAAAiU,GAAA,IACA,OAAAE,EAGA,OAAA,OAAAxY,KAAAqS,QAAAkG,EACA,KACAvY,KAAAqS,OAAAgG,OAAAhU,EAAAiU,IAqBA7J,EAAAvO,UAAA4V,WAAA,SAAAzR,GACA,IAAAmU,EAAAxY,KAAAqY,OAAAhU,EAAA,CAAAgN,IACA,IAAAmH,EACA,MAAAxa,MAAA,iBAAAqG,GACA,OAAAmU,GAUA/J,EAAAvO,UAAAuY,WAAA,SAAApU,GACA,IAAAmU,EAAAxY,KAAAqY,OAAAhU,EAAA,CAAA+G,IACA,IAAAoN,EACA,MAAAxa,MAAA,iBAAAqG,EAAA,QAAArE,MACA,OAAAwY,GAUA/J,EAAAvO,UAAAoS,iBAAA,SAAAjO,GACA,IAAAmU,EAAAxY,KAAAqY,OAAAhU,EAAA,CAAAgN,EAAAjG,IACA,IAAAoN,EACA,MAAAxa,MAAA,yBAAAqG,EAAA,QAAArE,MACA,OAAAwY,GAUA/J,EAAAvO,UAAAwY,cAAA,SAAArU,GACA,IAAAmU,EAAAxY,KAAAqY,OAAAhU,EAAA,CAAA2P,IACA,IAAAwE,EACA,MAAAxa,MAAA,oBAAAqG,EAAA,QAAArE,MACA,OAAAwY,GAIA/J,EAAA4E,EAAA,SAAAC,EAAAqF,EAAAC,GACAvH,EAAAiC,EACAU,EAAA2E,EACAvN,EAAAwN,I,wCCrfA7c,EAAAC,QAAAqS,GAEAG,UAAA,mBAEA,IAEAkF,EAFArI,EAAAvP,EAAA,IAYA,SAAAuS,EAAA7F,EAAAkG,GAEA,IAAArD,EAAAmE,SAAAhH,GACA,MAAA/B,UAAA,yBAEA,GAAAiI,IAAArD,EAAAmG,SAAA9C,GACA,MAAAjI,UAAA,6BAMAzG,KAAA0O,QAAAA,EAMA1O,KAAA6Y,cAAA,KAMA7Y,KAAAwI,KAAAA,EAMAxI,KAAAqS,OAAA,KAMArS,KAAAoS,UAAA,EAMApS,KAAA2O,QAAA,KAMA3O,KAAAkP,SAAA,KAGApQ,OAAAga,iBAAAzK,EAAAnO,UAAA,CAQAuT,KAAA,CACAxI,IAAA,WAEA,IADA,IAAA+L,EAAAhX,KACA,OAAAgX,EAAA3E,QACA2E,EAAAA,EAAA3E,OACA,OAAA2E,IAUAlL,SAAA,CACAb,IAAA,WAGA,IAFA,IAAA5G,EAAA,CAAArE,KAAAwI,MACAwO,EAAAhX,KAAAqS,OACA2E,IAAAA,EAAA+B,YACA1U,EAAA2B,QAAAgR,EAAAxO,MACAwO,EAAAA,EAAA3E,OAEA,OAAAhO,EAAA3G,KAAA,SAUA2Q,EAAAnO,UAAAkP,OAAA,WACA,MAAApR,SAQAqQ,EAAAnO,UAAA8X,MAAA,SAAA3F,GACArS,KAAAqS,QAAArS,KAAAqS,SAAAA,GACArS,KAAAqS,OAAAxC,OAAA7P,MACAA,KAAAqS,OAAAA,EACArS,KAAAoS,UAAA,EACA,IAAAqB,EAAApB,EAAAoB,KACAA,aAAAC,GACAD,EAAAuF,EAAAhZ,OAQAqO,EAAAnO,UAAA+X,SAAA,SAAA5F,GACA,IAAAoB,EAAApB,EAAAoB,KACAA,aAAAC,GACAD,EAAAwF,EAAAjZ,MACAA,KAAAqS,OAAA,KACArS,KAAAoS,UAAA,GAOA/D,EAAAnO,UAAA0E,QAAA,WACA,OAAA5E,KAAAoS,UAEApS,KAAAyT,gBAAAC,IACA1T,KAAAoS,UAAA,GAFApS,MAWAqO,EAAAnO,UAAA+R,UAAA,SAAAzJ,GACA,OAAAxI,KAAA0O,QACA1O,KAAA0O,QAAAlG,GACAhN,GAUA6S,EAAAnO,UAAAgS,UAAA,SAAA1J,EAAA9I,EAAAyS,GAGA,OAFAA,GAAAnS,KAAA0O,SAAA1O,KAAA0O,QAAAlG,KAAAhN,KACAwE,KAAA0O,UAAA1O,KAAA0O,QAAA,KAAAlG,GAAA9I,GACAM,MAUAqO,EAAAnO,UAAAgZ,gBAAA,SAAA1Q,EAAA9I,EAAAyZ,GACAnZ,KAAA6Y,gBACA7Y,KAAA6Y,cAAA,IAEA,IAIAO,EAKAC,EAUAC,EAnBAT,EAAA7Y,KAAA6Y,cAuBA,OAtBAM,GAGAC,EAAAP,EAAA1B,KAAA,SAAAiC,GACA,OAAAta,OAAAoB,UAAAqZ,eAAAlU,KAAA+T,EAAA5Q,OAIA6Q,EAAAD,EAAA5Q,GACA6C,EAAAmO,YAAAH,EAAAF,EAAAzZ,MAGA0Z,EAAA,IACA5Q,GAAA6C,EAAAmO,YAAA,GAAAL,EAAAzZ,GACAmZ,EAAAxb,KAAA+b,MAIAE,EAAA,IACA9Q,GAAA9I,EACAmZ,EAAAxb,KAAAic,IAEAtZ,MASAqO,EAAAnO,UAAA6X,WAAA,SAAArJ,EAAAyD,GACA,GAAAzD,EACA,IAAA,IAAA3P,EAAAD,OAAAC,KAAA2P,GAAA/R,EAAA,EAAAA,EAAAoC,EAAA7C,SAAAS,EACAqD,KAAAkS,UAAAnT,EAAApC,GAAA+R,EAAA3P,EAAApC,IAAAwV,GACA,OAAAnS,MAOAqO,EAAAnO,UAAAzB,SAAA,WACA,IAAA+P,EAAAxO,KAAAuO,YAAAC,UACA1C,EAAA9L,KAAA8L,SACA,OAAAA,EAAA5P,OACAsS,EAAA,IAAA1C,EACA0C,GAIAH,EAAAgF,EAAA,SAAAoG,GACA/F,EAAA+F,I,2BChPA1d,EAAAC,QAAA8X,EAGA,IAAAzF,EAAAvS,EAAA,MACAgY,EAAA5T,UAAApB,OAAAwP,OAAAD,EAAAnO,YAAAqO,YAAAuF,GAAAtF,UAAA,QAEA,IAAA4C,EAAAtV,EAAA,IACAuP,EAAAvP,EAAA,IAYA,SAAAgY,EAAAtL,EAAAkR,EAAAhL,EAAAC,GAQA,GAPAlS,MAAAoa,QAAA6C,KACAhL,EAAAgL,EACAA,EAAAle,GAEA6S,EAAAhJ,KAAArF,KAAAwI,EAAAkG,GAGAgL,IAAAle,IAAAiB,MAAAoa,QAAA6C,GACA,MAAAjT,UAAA,+BAMAzG,KAAA2J,MAAA+P,GAAA,GAOA1Z,KAAAmM,YAAA,GAMAnM,KAAA2O,QAAAA,EA0CA,SAAAgL,EAAAhQ,GACA,GAAAA,EAAA0I,OACA,IAAA,IAAA1V,EAAA,EAAAA,EAAAgN,EAAAwC,YAAAjQ,SAAAS,EACAgN,EAAAwC,YAAAxP,GAAA0V,QACA1I,EAAA0I,OAAA9C,IAAA5F,EAAAwC,YAAAxP,IA7BAmX,EAAA7E,SAAA,SAAAzG,EAAAC,GACA,OAAA,IAAAqL,EAAAtL,EAAAC,EAAAkB,MAAAlB,EAAAiG,QAAAjG,EAAAkG,UAQAmF,EAAA5T,UAAAkP,OAAA,SAAAC,GACA,IAAAC,IAAAD,KAAAA,EAAAC,aACA,OAAAjE,EAAAiB,SAAA,CACA,UAAAtM,KAAA0O,QACA,QAAA1O,KAAA2J,MACA,UAAA2F,EAAAtP,KAAA2O,QAAAnT,KAuBAsY,EAAA5T,UAAAqP,IAAA,SAAA/D,GAGA,KAAAA,aAAA4F,GACA,MAAA3K,UAAA,yBAQA,OANA+E,EAAA6G,QAAA7G,EAAA6G,SAAArS,KAAAqS,QACA7G,EAAA6G,OAAAxC,OAAArE,GACAxL,KAAA2J,MAAAtM,KAAAmO,EAAAhD,MACAxI,KAAAmM,YAAA9O,KAAAmO,GAEAmO,EADAnO,EAAAqB,OAAA7M,MAEAA,MAQA8T,EAAA5T,UAAA2P,OAAA,SAAArE,GAGA,KAAAA,aAAA4F,GACA,MAAA3K,UAAA,yBAEA,IAAA6G,EAAAtN,KAAAmM,YAAAqB,QAAAhC,GAGA,GAAA8B,EAAA,EACA,MAAAtP,MAAAwN,EAAA,uBAAAxL,MAUA,OARAA,KAAAmM,YAAA1L,OAAA6M,EAAA,IAIA,GAHAA,EAAAtN,KAAA2J,MAAA6D,QAAAhC,EAAAhD,QAIAxI,KAAA2J,MAAAlJ,OAAA6M,EAAA,GAEA9B,EAAAqB,OAAA,KACA7M,MAMA8T,EAAA5T,UAAA8X,MAAA,SAAA3F,GACAhE,EAAAnO,UAAA8X,MAAA3S,KAAArF,KAAAqS,GAGA,IAFA,IAEA1V,EAAA,EAAAA,EAAAqD,KAAA2J,MAAAzN,SAAAS,EAAA,CACA,IAAA6O,EAAA6G,EAAApH,IAAAjL,KAAA2J,MAAAhN,IACA6O,IAAAA,EAAAqB,SACArB,EAAAqB,OALA7M,MAMAmM,YAAA9O,KAAAmO,GAIAmO,EAAA3Z,OAMA8T,EAAA5T,UAAA+X,SAAA,SAAA5F,GACA,IAAA,IAAA7G,EAAA7O,EAAA,EAAAA,EAAAqD,KAAAmM,YAAAjQ,SAAAS,GACA6O,EAAAxL,KAAAmM,YAAAxP,IAAA0V,QACA7G,EAAA6G,OAAAxC,OAAArE,GACA6C,EAAAnO,UAAA+X,SAAA5S,KAAArF,KAAAqS,IAmBAyB,EAAAjB,EAAA,WAGA,IAFA,IAAA6G,EAAAjd,MAAA4C,UAAAnD,QACAoR,EAAA,EACAA,EAAAjO,UAAAnD,QACAwd,EAAApM,GAAAjO,UAAAiO,KACA,OAAA,SAAApN,EAAA0Z,GACAvO,EAAA4H,aAAA/S,EAAAqO,aACAgB,IAAA,IAAAuE,EAAA8F,EAAAF,IACA5a,OAAAkT,eAAA9R,EAAA0Z,EAAA,CACA3O,IAAAI,EAAAwO,YAAAH,GACAI,IAAAzO,EAAA0O,YAAAL,Q,wCCtMA3d,EAAAC,QAAA6Y,GAEA3F,SAAA,KACA2F,EAAAjH,SAAA,CAAAoM,UAAA,GAEA,IAAApF,EAAA9Y,EAAA,IACA4X,EAAA5X,EAAA,IACAuV,EAAAvV,EAAA,IACAsV,EAAAtV,EAAA,IACAiY,EAAAjY,EAAA,IACAgY,EAAAhY,EAAA,IACAsP,EAAAtP,EAAA,IACAkY,EAAAlY,EAAA,IACAmY,EAAAnY,EAAA,IACA6R,EAAA7R,EAAA,IACAuP,EAAAvP,EAAA,IAEAme,EAAA,gBACAC,EAAA,kBACAC,EAAA,qBACAC,EAAA,uBACAC,EAAA,YACAC,EAAA,cACAC,EAAA,oDACAC,EAAA,2BACAC,EAAA,+DACAC,EAAA,kCAoCA,SAAA7F,EAAArW,EAAAiV,EAAA/E,GAEA+E,aAAAC,IACAhF,EAAA+E,GACAA,EAAA,IAAAC,GACAxE,SAAA2F,EAAA3F,UAKA,IASAyL,EACAC,EACAC,EACAC,EAuoBAC,EAnpBAC,GAFAtM,EADAA,GACAmG,EAAAjH,UAEAoN,wBAAA,EACAC,EAAArG,EAAApW,EAAAkQ,EAAAwM,uBAAA,GACAC,EAAAF,EAAAE,KACA9d,EAAA4d,EAAA5d,KACA+d,EAAAH,EAAAG,KACAC,EAAAJ,EAAAI,KACAC,EAAAL,EAAAK,KAEAC,GAAA,EAKAC,GAAA,EAEAxE,EAAAvD,EAEAgI,EAAA/M,EAAAsL,SAAA,SAAAxR,GAAA,OAAAA,GAAA6C,EAAAqQ,UAGA,SAAAC,EAAAZ,EAAAvS,EAAAoT,GACA,IAAA1M,EAAA2F,EAAA3F,SAGA,OAFA0M,IACA/G,EAAA3F,SAAA,MACAlR,MAAA,YAAAwK,GAAA,SAAA,KAAAuS,EAAA,OAAA7L,EAAAA,EAAA,KAAA,IAAA,QAAA+L,EAAAY,KAAA,KAGA,SAAAC,IACA,IACAf,EADA5Q,EAAA,GAEA,EAAA,CAEA,GAAA,OAAA4Q,EAAAI,MAAA,MAAAJ,EACA,MAAAY,EAAAZ,GAEA5Q,EAAA9M,KAAA8d,KACAE,EAAAN,GACAA,EAAAK,UACA,MAAAL,GAAA,MAAAA,GACA,OAAA5Q,EAAAzM,KAAA,IAGA,SAAAqe,EAAAC,GACA,IAAAjB,EAAAI,IACA,OAAAJ,GACA,IAAA,IACA,IAAA,IAEA,OADA1d,EAAA0d,GACAe,IACA,IAAA,OAAA,IAAA,OACA,OAAA,EACA,IAAA,QAAA,IAAA,QACA,OAAA,EAEA,IACA,OAuBA,SAAAf,EAAAa,GACA,IAAAza,EAAA,EACA,KAAA4Z,EAAA,KACA5Z,GAAA,EACA4Z,EAAAA,EAAAkB,UAAA,IAEA,OAAAlB,GACA,IAAA,MAAA,IAAA,MAAA,IAAA,MACA,OAAA5Z,GAAAU,EAAAA,GACA,IAAA,MAAA,IAAA,MAAA,IAAA,MAAA,IAAA,MACA,OAAAD,IACA,IAAA,IACA,OAAA,EAEA,GAAAqY,EAAAhc,KAAA8c,GACA,OAAA5Z,EAAA+a,SAAAnB,EAAA,IACA,GAAAZ,EAAAlc,KAAA8c,GACA,OAAA5Z,EAAA+a,SAAAnB,EAAA,IACA,GAAAV,EAAApc,KAAA8c,GACA,OAAA5Z,EAAA+a,SAAAnB,EAAA,GAGA,GAAAR,EAAAtc,KAAA8c,GACA,OAAA5Z,EAAAgb,WAAApB,GAGA,MAAAY,EAAAZ,EAAA,SAAAa,GAjDAQ,CAAArB,GAAA,GACA,MAAA3W,GAGA,GAAA4X,GAAAvB,EAAAxc,KAAA8c,GACA,OAAAA,EAGA,MAAAY,EAAAZ,EAAA,UAIA,SAAAsB,EAAAC,EAAAC,GAEA,IADA,IAAAxB,EAAAje,GAEAyf,GAAA,OAAAxB,EAAAK,MAAA,MAAAL,EAGAuB,EAAAjf,KAAA,CAAAP,EAAA0f,EAAArB,KAAAE,EAAA,MAAA,GAAAmB,EAAArB,KAAAre,IAFAwf,EAAAjf,KAAAye,KAGAT,EAAA,KAAA,KACAA,EAAA,KAgCA,SAAAmB,EAAAzB,EAAA0B,GACA,OAAA1B,GACA,IAAA,MAAA,IAAA,MAAA,IAAA,MACA,OAAA,UACA,IAAA,IACA,OAAA,EAIA,IAAA0B,GAAA,KAAA1B,EAAA,GACA,MAAAY,EAAAZ,EAAA,MAEA,GAAAb,EAAAjc,KAAA8c,GACA,OAAAmB,SAAAnB,EAAA,IACA,GAAAX,EAAAnc,KAAA8c,GACA,OAAAmB,SAAAnB,EAAA,IAGA,GAAAT,EAAArc,KAAA8c,GACA,OAAAmB,SAAAnB,EAAA,GAGA,MAAAY,EAAAZ,EAAA,MAyDA,SAAA2B,EAAArK,EAAA0I,GACA,OAAAA,GAEA,IAAA,SAGA,OAFA4B,EAAAtK,EAAA0I,GACAM,EAAA,KACA,EAEA,IAAA,UAEA,OAuCA,SAAAhJ,EAAA0I,GAGA,IAAAP,EAAAvc,KAAA8c,EAAAI,KACA,MAAAQ,EAAAZ,EAAA,aAEA,IAAAhS,EAAA,IAAAsI,EAAA0J,GACAhS,EAAAmG,SAAA2F,EAAA3F,SACA0N,EAAA7T,EAAA,SAAAgS,GACA,IAAA2B,EAAA3T,EAAAgS,GAGA,OAAAA,GAEA,IAAA,OAsHA,SAAA1I,GACAgJ,EAAA,KACA,IAAA9R,EAAA4R,IAGA,GAAAxN,EAAAO,OAAA3E,KAAA/N,EACA,MAAAmgB,EAAApS,EAAA,QAEA8R,EAAA,KACA,IAAAwB,EAAA1B,IAGA,IAAAV,EAAAxc,KAAA4e,GACA,MAAAlB,EAAAkB,EAAA,QAEAxB,EAAA,KACA,IAAA7S,EAAA2S,IAGA,IAAAX,EAAAvc,KAAAuK,GACA,MAAAmT,EAAAnT,EAAA,QAEA6S,EAAA,KACA,IAAA7P,EAAA,IAAAuI,EAAA0H,EAAAjT,GAAAgU,EAAArB,KAAA5R,EAAAsT,GACArR,EAAA0D,SAAA2F,EAAA3F,SACA0N,EAAApR,EAAA,SAAAuP,GAGA,GAAA,WAAAA,EAIA,MAAAY,EAAAZ,GAHA4B,EAAAnR,EAAAuP,GACAM,EAAA,MAIA,WACAyB,EAAAtR,KAEA6G,EAAA9C,IAAA/D,GA1JAuR,CAAAhU,GACA,MAEA,IAAA,WACA,IAAA,WACA,IAAA,WACAiU,EAAAjU,EAAAgS,GACA,MAEA,IAAA,SAoJA,SAAA1I,EAAA0I,GAGA,IAAAP,EAAAvc,KAAA8c,EAAAI,KACA,MAAAQ,EAAAZ,EAAA,QAEA,IAAApR,EAAA,IAAAmK,EAAA2H,EAAAV,IACApR,EAAAuF,SAAA2F,EAAA3F,SACA0N,EAAAjT,EAAA,SAAAoR,GACA,WAAAA,GACA4B,EAAAhT,EAAAoR,GACAM,EAAA,OAEAhe,EAAA0d,GACAiC,EAAArT,EAAA,eAGA0I,EAAA9C,IAAA5F,GApKAsT,CAAAlU,EAAAgS,GACA,MAEA,IAAA,aACAsB,EAAAtT,EAAAmU,aAAAnU,EAAAmU,WAAA,KACA,MAEA,IAAA,WACAb,EAAAtT,EAAA+F,WAAA/F,EAAA+F,SAAA,KAAA,GACA,MAEA,QAEA,IAAA0M,IAAAf,EAAAxc,KAAA8c,GACA,MAAAY,EAAAZ,GAEA1d,EAAA0d,GACAiC,EAAAjU,EAAA,eAIAsJ,EAAA9C,IAAAxG,GAtFAoU,CAAA9K,EAAA0I,GACA,EAEA,IAAA,OAEA,OAmOA,SAAA1I,EAAA0I,GAGA,IAAAP,EAAAvc,KAAA8c,EAAAI,KACA,MAAAQ,EAAAZ,EAAA,QAEA,IAAA5L,EAAA,IAAA/D,EAAA2P,GACA5L,EAAAD,SAAA2F,EAAA3F,SACA0N,EAAAzN,EAAA,SAAA4L,GACA,OAAAA,GACA,IAAA,SACA4B,EAAAxN,EAAA4L,GACAM,EAAA,KACA,MAEA,IAAA,WACAgB,EAAAlN,EAAAL,WAAAK,EAAAL,SAAA,KAAA,GACA,MAEA,SAOA,SAAAuD,EAAA0I,GAGA,IAAAP,EAAAvc,KAAA8c,GACA,MAAAY,EAAAZ,EAAA,QAEAM,EAAA,KACA,IAAA3b,EAAA8c,EAAArB,KAAA,GACAiC,EAAA,GACAR,EAAAQ,EAAA,SAAArC,GAGA,GAAA,WAAAA,EAIA,MAAAY,EAAAZ,GAHA4B,EAAAS,EAAArC,GACAM,EAAA,MAIA,WACAyB,EAAAM,KAEA/K,EAAA9C,IAAAwL,EAAArb,EAAA0d,EAAAzO,SA3BA0O,CAAAlO,EAAA4L,MAGA1I,EAAA9C,IAAAJ,GA3PAmO,CAAAjL,EAAA0I,GACA,EAEA,IAAA,UAEA,OAoWA,SAAA1I,EAAA0I,GAGA,IAAAP,EAAAvc,KAAA8c,EAAAI,KACA,MAAAQ,EAAAZ,EAAA,gBAEA,IAAAwC,EAAA,IAAAvJ,EAAA+G,GACAwC,EAAArO,SAAA2F,EAAA3F,SACA0N,EAAAW,EAAA,SAAAxC,GACA,IAAA2B,EAAAa,EAAAxC,GAAA,CAIA,GAAA,QAAAA,EAGA,MAAAY,EAAAZ,IAKA,SAAA1I,EAAA0I,GAGA,IAAAyC,EAAAlC,IAEAvS,EAAAgS,EAGA,IAAAP,EAAAvc,KAAA8c,EAAAI,KACA,MAAAQ,EAAAZ,EAAA,QAEA,IACAtF,EAAAC,EACAzE,EAAA0E,EAFAnN,EAAAuS,EAIAM,EAAA,KACAA,EAAA,UAAA,KACA3F,GAAA,GAGA,IAAA+E,EAAAxc,KAAA8c,EAAAI,KACA,MAAAQ,EAAAZ,GAEAtF,EAAAsF,EACAM,EAAA,KAAAA,EAAA,WAAAA,EAAA,KACAA,EAAA,UAAA,KACA1F,GAAA,GAGA,IAAA8E,EAAAxc,KAAA8c,EAAAI,KACA,MAAAQ,EAAAZ,GAEA9J,EAAA8J,EACAM,EAAA,KAEA,IAAAoC,EAAA,IAAAxJ,EAAAzL,EAAAO,EAAA0M,EAAAxE,EAAAyE,EAAAC,GACA8H,EAAAvO,SAAA2F,EAAA3F,SACAuO,EAAA9O,QAAA6O,EACAZ,EAAAa,EAAA,SAAA1C,GAGA,GAAA,WAAAA,EAIA,MAAAY,EAAAZ,GAHA4B,EAAAc,EAAA1C,GACAM,EAAA,OAKAhJ,EAAA9C,IAAAkO,GAvDAC,CAAAH,EAAAxC,MAIA1I,EAAA9C,IAAAgO,GAvXAI,CAAAtL,EAAA0I,GACA,EAEA,IAAA,SAEA,OAwaA,SAAA1I,EAAA0I,GAGA,IAAAN,EAAAxc,KAAA8c,EAAAI,KACA,MAAAQ,EAAAZ,EAAA,aAEA,IAAA6C,EAAA7C,EACA6B,EAAA,KAAA,SAAA7B,GACA,OAAAA,GAEA,IAAA,WACA,IAAA,WACA,IAAA,WACAiC,EAAA3K,EAAA0I,EAAA6C,GACA,MAEA,QAEA,IAAApC,IAAAf,EAAAxc,KAAA8c,GACA,MAAAY,EAAAZ,GACA1d,EAAA0d,GACAiC,EAAA3K,EAAA,WAAAuL,MA9bAC,CAAAxL,EAAA0I,GACA,GAKA,SAAA6B,EAAA3G,EAAA6H,EAAAC,GACA,IAQAhD,EARAiD,EAAA/C,EAAAY,KAOA,GANA5F,IACA,iBAAAA,EAAAtH,UACAsH,EAAAtH,QAAA2M,KAEArF,EAAA/G,SAAA2F,EAAA3F,UAEAmM,EAAA,KAAA,GAAA,CAEA,KAAA,OAAAN,EAAAI,MACA2C,EAAA/C,GACAM,EAAA,KAAA,QAEA0C,GACAA,IACA1C,EAAA,KACApF,IAAA,iBAAAA,EAAAtH,SAAAqM,KACA/E,EAAAtH,QAAA2M,EAAA0C,IAAA/H,EAAAtH,SAqDA,SAAAqO,EAAA3K,EAAA/H,EAAAiH,GACA,IAAAxI,EAAAoS,IACA,GAAA,UAAApS,EAAA,CAMA,IAAA0R,EAAAxc,KAAA8K,GACA,MAAA4S,EAAA5S,EAAA,QAEA,IAAAP,EAAA2S,IAGA,IAAAX,EAAAvc,KAAAuK,GACA,MAAAmT,EAAAnT,EAAA,QAEAA,EAAAiT,EAAAjT,GACA6S,EAAA,KAEA,IAAA7P,EAAA,IAAA4F,EAAA5I,EAAAgU,EAAArB,KAAApS,EAAAuB,EAAAiH,GACA/F,EAAA0D,SAAA2F,EAAA3F,SACA0N,EAAApR,EAAA,SAAAuP,GAGA,GAAA,WAAAA,EAIA,MAAAY,EAAAZ,GAHA4B,EAAAnR,EAAAuP,GACAM,EAAA,MAIA,WACAyB,EAAAtR,KAEA6G,EAAA9C,IAAA/D,GAKAgQ,IAAAhQ,EAAAI,UAAA+B,EAAAG,OAAA/E,KAAAvN,GAAAmS,EAAAE,MAAA9E,KAAAvN,GACAgQ,EAAA0G,UAAA,UAAA,GAAA,QAGA,SAAAG,EAAA/H,GACA,IAAA9B,EAAA2S,IAGA,IAAAX,EAAAvc,KAAAuK,GACA,MAAAmT,EAAAnT,EAAA,QAEA,IAAA2K,EAAA9H,EAAA4S,QAAAzV,GACAA,IAAA2K,IACA3K,EAAA6C,EAAA6S,QAAA1V,IACA6S,EAAA,KACA,IAAArS,EAAAwT,EAAArB,KACApS,EAAA,IAAAsI,EAAA7I,GACAO,EAAA0E,OAAA,EACA1E,EAAAmG,SAAA2F,EAAA3F,SACA,IAAA1D,EAAA,IAAA4F,EAAA+B,EAAAnK,EAAAR,EAAA8B,GACAkB,EAAA0D,SAAA2F,EAAA3F,SACA0N,EAAA7T,EAAA,SAAAgS,GACA,OAAAA,GAEA,IAAA,SACA4B,EAAA5T,EAAAgS,GACAM,EAAA,KACA,MAEA,IAAA,WACA,IAAA,WACA,IAAA,WACA2B,EAAAjU,EAAAgS,GACA,MAGA,QACA,MAAAY,EAAAZ,MAGA1I,EAAA9C,IAAAxG,GACAwG,IAAA/D,GA7EA2S,CAAA9L,EAAA/H,GA8LA,SAAAqS,EAAAtK,EAAA0I,GACA,IAAAqD,EAAA/C,EAAA,KAAA,GAGA,IAAAZ,EAAAxc,KAAA8c,EAAAI,KACA,MAAAQ,EAAAZ,EAAA,QAEA,IAEA5B,EAFA3Q,EAAAuS,EACAsD,EAAA7V,EAGA4V,IACA/C,EAAA,KAEAgD,EADA7V,EAAA,IAAAA,EAAA,IAEAuS,EAAAK,IACAV,EAAAzc,KAAA8c,KACA5B,EAAA4B,EAAApU,OAAA,GACA6B,GAAAuS,EACAI,MAGAE,EAAA,KACA,IA6CAhJ,EAAA7J,EAAA9I,EAAAyZ,EA7CAmF,EAIA,SAAAC,EAAAlM,EAAA7J,GACA,GAAA6S,EAAA,KAAA,GAAA,CAEA,IADA,IAAAmD,EAAA,IACAnD,EAAA,KAAA,IAAA,CAEA,IAAAb,EAAAvc,KAAA8c,EAAAI,KACA,MAAAQ,EAAAZ,EAAA,QAEA,IAAArb,EACAyZ,EAAA4B,EACA,MAAAK,IACA1b,EAAA6e,EAAAlM,EAAA7J,EAAA,IAAAuS,IAEAM,EAAA,KACA,MAAAD,IACA1b,EAAA6e,EAAAlM,EAAA7J,EAAA,IAAAuS,IAEArb,EAAAqc,GAAA,GACA7J,EAAAG,EAAA7J,EAAA,IAAAuS,EAAArb,KAGA,IAAA+e,EAAAD,EAAArF,GACAsF,IACA/e,EAAA,GAAA6H,OAAAkX,GAAAlX,OAAA7H,IACA8e,EAAArF,GAAAzZ,EACA2b,EAAA,KAAA,GAEA,OAAAmD,EAGA,IAAAE,EAAA3C,GAAA,GACA7J,EAAAG,EAAA7J,EAAAkW,GACA,OAAAA,EApCAH,CAAAlM,EAAA7J,GA6CAA,EA5CA6V,EA4CA3e,EA5CA4e,EA4CAnF,EA5CAA,GA4CA9G,EA5CAA,GA6CA6G,iBACA7G,EAAA6G,gBAAA1Q,EAAA9I,EAAAyZ,GAPA,SAAAjH,EAAAG,EAAA7J,EAAA9I,GACA2S,EAAAH,WACAG,EAAAH,UAAA1J,EAAA9I,GAQA,SAAAod,EAAAzK,GACA,GAAAgJ,EAAA,KAAA,GAAA,CACA,KACAsB,EAAAtK,EAAA,UACAgJ,EAAA,KAAA,KACAA,EAAA,KAEA,OAAAhJ,EAuGA,KAAA,QAAA0I,EAAAI,MACA,OAAAJ,GAEA,IAAA,UAGA,IAAAQ,EACA,MAAAI,EAAAZ,IAvhBA,WAGA,GAAAJ,IAAAnf,EACA,MAAAmgB,EAAA,WAKA,GAHAhB,EAAAQ,KAGAV,EAAAxc,KAAA0c,GACA,MAAAgB,EAAAhB,EAAA,QAEAjM,EAAAiQ,iBACA3H,EAAAA,EAAAJ,OAAA+D,GAAA,EAAA9F,EAAA3F,UAEAyL,EAAAnW,MAAA,OAAA8S,QAAA,SAAAsH,GACA5H,EAAAA,EAAAJ,OAAAgI,GAAA,EAAA/J,EAAA3F,YAGAmM,EAAA,KAsgBAwD,GACA,MAEA,IAAA,SAGA,IAAAtD,EACA,MAAAI,EAAAZ,IA1gBA,WACA,IACA+D,EADA/D,EAAAK,IAEA,OAAAL,GACA,IAAA,OACA+D,EAAAjE,EAAAA,GAAA,GACAM,IACA,MACA,IAAA,SACAA,IAEA,QACA2D,EAAAlE,EAAAA,GAAA,GAGAG,EAAAe,IACAT,EAAA,KACAyD,EAAAzhB,KAAA0d,GA2fAgE,GACA,MAEA,IAAA,SAGA,IAAAxD,EACA,MAAAI,EAAAZ,IA/fA,WAMA,GALAM,EAAA,KACAP,EAAAgB,MACAN,EAAA,WAAAV,IAGA,WAAAA,EACA,MAAAa,EAAAb,EAAA,UAEAO,EAAA,KAwfA2D,GACA,MAEA,IAAA,SAEArC,EAAA3F,EAAA+D,GACAM,EAAA,KACA,MAEA,QAGA,GAAAqB,EAAA1F,EAAA+D,GAAA,CACAQ,GAAA,EACA,SAIA,MAAAI,EAAAZ,GAKA,OADAlG,EAAA3F,SAAA,KACA,CACA+P,QAAAtE,EACAC,QAAAA,EACAC,YAAAA,EACAC,OAAAA,EACArH,KAAAA,K,uFCnxBA1X,EAAAC,QAAAwY,EAEA,IAEAC,EAFApJ,EAAAvP,EAAA,IAIAojB,EAAA7T,EAAA6T,SACA5Z,EAAA+F,EAAA/F,KAGA,SAAA6Z,EAAA9J,EAAA+J,GACA,OAAAC,WAAA,uBAAAhK,EAAApU,IAAA,OAAAme,GAAA,GAAA,MAAA/J,EAAA9P,KASA,SAAAiP,EAAA3X,GAMAmD,KAAAgB,IAAAnE,EAMAmD,KAAAiB,IAAA,EAMAjB,KAAAuF,IAAA1I,EAAAX,OAgBA,SAAAoS,IACA,OAAAjD,EAAAiU,OACA,SAAAziB,GACA,OAAA2X,EAAAlG,OAAA,SAAAzR,GACA,OAAAwO,EAAAiU,OAAAC,SAAA1iB,GACA,IAAA4X,EAAA5X,GAEA2iB,EAAA3iB,KACAA,IAGA2iB,EAxBA,IA4CA9f,EA5CA8f,EAAA,oBAAAvc,WACA,SAAApG,GACA,GAAAA,aAAAoG,YAAAxG,MAAAoa,QAAAha,GACA,OAAA,IAAA2X,EAAA3X,GACA,MAAAmB,MAAA,mBAGA,SAAAnB,GACA,GAAAJ,MAAAoa,QAAAha,GACA,OAAA,IAAA2X,EAAA3X,GACA,MAAAmB,MAAA,mBAsEA,SAAAyhB,IAEA,IAAAC,EAAA,IAAAR,EAAA,EAAA,GACAviB,EAAA,EACA,KAAA,EAAAqD,KAAAuF,IAAAvF,KAAAiB,KAaA,CACA,KAAAtE,EAAA,IAAAA,EAAA,CAEA,GAAAqD,KAAAiB,KAAAjB,KAAAuF,IACA,MAAA4Z,EAAAnf,MAGA,GADA0f,EAAAhd,IAAAgd,EAAAhd,IAAA,IAAA1C,KAAAgB,IAAAhB,KAAAiB,OAAA,EAAAtE,KAAA,EACAqD,KAAAgB,IAAAhB,KAAAiB,OAAA,IACA,OAAAye,EAIA,OADAA,EAAAhd,IAAAgd,EAAAhd,IAAA,IAAA1C,KAAAgB,IAAAhB,KAAAiB,SAAA,EAAAtE,KAAA,EACA+iB,EAxBA,KAAA/iB,EAAA,IAAAA,EAGA,GADA+iB,EAAAhd,IAAAgd,EAAAhd,IAAA,IAAA1C,KAAAgB,IAAAhB,KAAAiB,OAAA,EAAAtE,KAAA,EACAqD,KAAAgB,IAAAhB,KAAAiB,OAAA,IACA,OAAAye,EAKA,GAFAA,EAAAhd,IAAAgd,EAAAhd,IAAA,IAAA1C,KAAAgB,IAAAhB,KAAAiB,OAAA,MAAA,EACAye,EAAA/c,IAAA+c,EAAA/c,IAAA,IAAA3C,KAAAgB,IAAAhB,KAAAiB,OAAA,KAAA,EACAjB,KAAAgB,IAAAhB,KAAAiB,OAAA,IACA,OAAAye,EAgBA,GAfA/iB,EAAA,EAeA,EAAAqD,KAAAuF,IAAAvF,KAAAiB,KACA,KAAAtE,EAAA,IAAAA,EAGA,GADA+iB,EAAA/c,IAAA+c,EAAA/c,IAAA,IAAA3C,KAAAgB,IAAAhB,KAAAiB,OAAA,EAAAtE,EAAA,KAAA,EACAqD,KAAAgB,IAAAhB,KAAAiB,OAAA,IACA,OAAAye,OAGA,KAAA/iB,EAAA,IAAAA,EAAA,CAEA,GAAAqD,KAAAiB,KAAAjB,KAAAuF,IACA,MAAA4Z,EAAAnf,MAGA,GADA0f,EAAA/c,IAAA+c,EAAA/c,IAAA,IAAA3C,KAAAgB,IAAAhB,KAAAiB,OAAA,EAAAtE,EAAA,KAAA,EACAqD,KAAAgB,IAAAhB,KAAAiB,OAAA,IACA,OAAAye,EAIA,MAAA1hB,MAAA,2BAkCA,SAAA2hB,EAAA3e,EAAAjE,GACA,OAAAiE,EAAAjE,EAAA,GACAiE,EAAAjE,EAAA,IAAA,EACAiE,EAAAjE,EAAA,IAAA,GACAiE,EAAAjE,EAAA,IAAA,MAAA,EA+BA,SAAA6iB,IAGA,GAAA5f,KAAAiB,IAAA,EAAAjB,KAAAuF,IACA,MAAA4Z,EAAAnf,KAAA,GAEA,OAAA,IAAAkf,EAAAS,EAAA3f,KAAAgB,IAAAhB,KAAAiB,KAAA,GAAA0e,EAAA3f,KAAAgB,IAAAhB,KAAAiB,KAAA,IA3KAuT,EAAAlG,OAAAA,IAEAkG,EAAAtU,UAAA2f,EAAAxU,EAAA5O,MAAAyD,UAAA4f,UAAAzU,EAAA5O,MAAAyD,UAAAzC,MAOA+W,EAAAtU,UAAA6f,QACArgB,EAAA,WACA,WACA,GAAAA,GAAA,IAAAM,KAAAgB,IAAAhB,KAAAiB,QAAA,EAAAjB,KAAAgB,IAAAhB,KAAAiB,OAAA,IAAA,OAAAvB,EACA,GAAAA,GAAAA,GAAA,IAAAM,KAAAgB,IAAAhB,KAAAiB,OAAA,KAAA,EAAAjB,KAAAgB,IAAAhB,KAAAiB,OAAA,IAAA,OAAAvB,EACA,GAAAA,GAAAA,GAAA,IAAAM,KAAAgB,IAAAhB,KAAAiB,OAAA,MAAA,EAAAjB,KAAAgB,IAAAhB,KAAAiB,OAAA,IAAA,OAAAvB,EACA,GAAAA,GAAAA,GAAA,IAAAM,KAAAgB,IAAAhB,KAAAiB,OAAA,MAAA,EAAAjB,KAAAgB,IAAAhB,KAAAiB,OAAA,IAAA,OAAAvB,EACA,GAAAA,GAAAA,GAAA,GAAAM,KAAAgB,IAAAhB,KAAAiB,OAAA,MAAA,EAAAjB,KAAAgB,IAAAhB,KAAAiB,OAAA,IAAA,OAAAvB,EAGA,IAAAM,KAAAiB,KAAA,GAAAjB,KAAAuF,IAEA,MADAvF,KAAAiB,IAAAjB,KAAAuF,IACA4Z,EAAAnf,KAAA,IAEA,OAAAN,IAQA8U,EAAAtU,UAAA8f,MAAA,WACA,OAAA,EAAAhgB,KAAA+f,UAOAvL,EAAAtU,UAAA+f,OAAA,WACA,IAAAvgB,EAAAM,KAAA+f,SACA,OAAArgB,IAAA,IAAA,EAAAA,GAAA,GAqFA8U,EAAAtU,UAAAggB,KAAA,WACA,OAAA,IAAAlgB,KAAA+f,UAcAvL,EAAAtU,UAAAigB,QAAA,WAGA,GAAAngB,KAAAiB,IAAA,EAAAjB,KAAAuF,IACA,MAAA4Z,EAAAnf,KAAA,GAEA,OAAA2f,EAAA3f,KAAAgB,IAAAhB,KAAAiB,KAAA,IAOAuT,EAAAtU,UAAAkgB,SAAA,WAGA,GAAApgB,KAAAiB,IAAA,EAAAjB,KAAAuF,IACA,MAAA4Z,EAAAnf,KAAA,GAEA,OAAA,EAAA2f,EAAA3f,KAAAgB,IAAAhB,KAAAiB,KAAA,IAmCAuT,EAAAtU,UAAAmgB,MAAA,WAGA,GAAArgB,KAAAiB,IAAA,EAAAjB,KAAAuF,IACA,MAAA4Z,EAAAnf,KAAA,GAEA,IAAAN,EAAA2L,EAAAgV,MAAAjd,YAAApD,KAAAgB,IAAAhB,KAAAiB,KAEA,OADAjB,KAAAiB,KAAA,EACAvB,GAQA8U,EAAAtU,UAAAogB,OAAA,WAGA,GAAAtgB,KAAAiB,IAAA,EAAAjB,KAAAuF,IACA,MAAA4Z,EAAAnf,KAAA,GAEA,IAAAN,EAAA2L,EAAAgV,MAAAvc,aAAA9D,KAAAgB,IAAAhB,KAAAiB,KAEA,OADAjB,KAAAiB,KAAA,EACAvB,GAOA8U,EAAAtU,UAAAkN,MAAA,WACA,IAAAlR,EAAA8D,KAAA+f,SACAjjB,EAAAkD,KAAAiB,IACAlE,EAAAiD,KAAAiB,IAAA/E,EAGA,GAAAa,EAAAiD,KAAAuF,IACA,MAAA4Z,EAAAnf,KAAA9D,GAGA,OADA8D,KAAAiB,KAAA/E,EACAO,MAAAoa,QAAA7W,KAAAgB,KACAhB,KAAAgB,IAAAvD,MAAAX,EAAAC,GACAD,IAAAC,EACA,IAAAiD,KAAAgB,IAAAuN,YAAA,GACAvO,KAAA6f,EAAAxa,KAAArF,KAAAgB,IAAAlE,EAAAC,IAOAyX,EAAAtU,UAAA/D,OAAA,WACA,IAAAiR,EAAApN,KAAAoN,QACA,OAAA9H,EAAAE,KAAA4H,EAAA,EAAAA,EAAAlR,SAQAsY,EAAAtU,UAAAmb,KAAA,SAAAnf,GACA,GAAA,iBAAAA,EAAA,CAEA,GAAA8D,KAAAiB,IAAA/E,EAAA8D,KAAAuF,IACA,MAAA4Z,EAAAnf,KAAA9D,GACA8D,KAAAiB,KAAA/E,OAEA,GAEA,GAAA8D,KAAAiB,KAAAjB,KAAAuF,IACA,MAAA4Z,EAAAnf,YACA,IAAAA,KAAAgB,IAAAhB,KAAAiB,QAEA,OAAAjB,MAQAwU,EAAAtU,UAAAqgB,SAAA,SAAAtS,GACA,OAAAA,GACA,KAAA,EACAjO,KAAAqb,OACA,MACA,KAAA,EACArb,KAAAqb,KAAA,GACA,MACA,KAAA,EACArb,KAAAqb,KAAArb,KAAA+f,UACA,MACA,KAAA,EACA,KAAA,IAAA9R,EAAA,EAAAjO,KAAA+f,WACA/f,KAAAugB,SAAAtS,GAEA,MACA,KAAA,EACAjO,KAAAqb,KAAA,GACA,MAGA,QACA,MAAArd,MAAA,qBAAAiQ,EAAA,cAAAjO,KAAAiB,KAEA,OAAAjB,MAGAwU,EAAAnB,EAAA,SAAAmN,GACA/L,EAAA+L,EACAhM,EAAAlG,OAAAA,IACAmG,EAAApB,IAEA,IAAAhT,EAAAgL,EAAAuG,KAAA,SAAA,WACAvG,EAAAoV,MAAAjM,EAAAtU,UAAA,CAEAwgB,MAAA,WACA,OAAAjB,EAAApa,KAAArF,MAAAK,IAAA,IAGAsgB,OAAA,WACA,OAAAlB,EAAApa,KAAArF,MAAAK,IAAA,IAGAugB,OAAA,WACA,OAAAnB,EAAApa,KAAArF,MAAA6gB,WAAAxgB,IAAA,IAGAygB,QAAA,WACA,OAAAlB,EAAAva,KAAArF,MAAAK,IAAA,IAGA0gB,SAAA,WACA,OAAAnB,EAAAva,KAAArF,MAAAK,IAAA,Q,2BCrZAtE,EAAAC,QAAAyY,EAGA,IAAAD,EAAA1Y,EAAA,KACA2Y,EAAAvU,UAAApB,OAAAwP,OAAAkG,EAAAtU,YAAAqO,YAAAkG,EAEA,IAAApJ,EAAAvP,EAAA,IASA,SAAA2Y,EAAA5X,GACA2X,EAAAnP,KAAArF,KAAAnD,GASA4X,EAAApB,EAAA,WAEAhI,EAAAiU,SACA7K,EAAAvU,UAAA2f,EAAAxU,EAAAiU,OAAApf,UAAAzC,QAOAgX,EAAAvU,UAAA/D,OAAA,WACA,IAAAoJ,EAAAvF,KAAA+f,SACA,OAAA/f,KAAAgB,IAAAggB,UACAhhB,KAAAgB,IAAAggB,UAAAhhB,KAAAiB,IAAAjB,KAAAiB,IAAA3E,KAAA8K,IAAApH,KAAAiB,IAAAsE,EAAAvF,KAAAuF,MACAvF,KAAAgB,IAAAvC,SAAA,QAAAuB,KAAAiB,IAAAjB,KAAAiB,IAAA3E,KAAA8K,IAAApH,KAAAiB,IAAAsE,EAAAvF,KAAAuF,OAUAkP,EAAApB,K,iCCjDAtX,EAAAC,QAAA0X,EAEA,IAAAuN,EAAAnlB,EAAA,GAGA2S,EAAA3S,EAAA,MACA4X,EAAAxT,UAAApB,OAAAwP,OACAG,EAAAvO,YACAqO,YAAAmF,GAAAlF,UAAA,OAEA,IAKA6C,EACAwD,EACAxM,EAPA+I,EAAAtV,EAAA,IACAsP,EAAAtP,EAAA,IACAgY,EAAAhY,EAAA,IACAuP,EAAAvP,EAAA,IAaA,SAAA4X,EAAAhF,GACAD,EAAApJ,KAAArF,KAAA,GAAA0O,GAMA1O,KAAAkhB,SAAA,GAMAlhB,KAAAmhB,MAAA,GAUAzN,EAAAzE,SAAA,SAAAxG,EAAAgL,EAAAvE,GAIA,OAHAuE,EAAAA,GAAA,IAAAC,EACAjL,EAAAiG,SAAA+E,EAAAsE,WAAAtP,EAAAiG,SACA+E,EAAAvE,SAAAA,EACAuE,EAAA2C,QAAA3N,EAAAC,OAAAwG,IAWAwE,EAAAxT,UAAAkhB,YAAA/V,EAAAhH,KAAAO,QASA8O,EAAAxT,UAAA6P,MAAA1E,EAAA0E,MAQA2D,EAAAxT,UAAAsT,KAAA,SAAAtE,EAAAR,GACA,IAAA2S,EAAArhB,KAKA,OAHA0O,EADAA,GACA,GAGA,IAAAuB,QAAA,SAAArL,EAAAsL,GAEA,SAAAoR,EAAAlR,EAAAqD,GACArD,EACAF,EAAAE,GAEAxL,EAAA6O,GAKA,SAAA8N,EAAArS,GACA,IAAAsS,EAAAtS,EAAAuS,YAAA,oBACA,IAAA,EAAAD,EAAA,CACA,IAAAE,EAAAxS,EAAA+M,UAAAuF,GACA,GAAAE,KAAArZ,EAAA,OAAAqZ,EAEA,OAAA,KAIA,SAAAnb,EAAA2I,EAAA1Q,EAAAmjB,GACA,IAIA,GAHAtW,EAAAmE,SAAAhR,IAAA,KAAAA,EAAA,KACAA,EAAAoB,KAAAiV,MAAArW,IAEA6M,EAAAmE,SAAAhR,GAEA,CACAqW,EAAA3F,SAAAyS,EACA,IACAvP,EADAwP,EAAA/M,EAAArW,EAAA6iB,EAAA3S,GAEA/R,EAAA,EACA,GAAAilB,EAAAhH,QACA,KAAAje,EAAAilB,EAAAhH,QAAA1e,SAAAS,GAEAyV,EACAmP,EAAAK,EAAAhH,QAAAje,KACA0kB,EAAAD,YAAAlS,EAAA0S,EAAAhH,QAAAje,MAEAoT,EAAAqC,GAAA,EAAAwP,EAAAhH,QAAAje,GAAA4C,QAAA,MAAA,MACA,GAAAqiB,EAAA/G,YACA,IAAAle,EAAA,EAAAA,EAAAilB,EAAA/G,YAAA3e,SAAAS,GAEAyV,EACAmP,EAAAK,EAAA/G,YAAAle,KACA0kB,EAAAD,YAAAlS,EAAA0S,EAAA/G,YAAAle,MAEAoT,EACAqC,GACA,EACAwP,EAAA/G,YAAAle,GAAA4C,QAAA,MAAA,WAxBA8hB,EAAAtJ,WAAAvZ,EAAAkQ,SAAA0H,QAAA5X,EAAAkK,OAAAwG,GA2BA,MAAAkB,GACAkR,EAAAlR,GAEA1B,EAAAmT,MAAAC,GAAAR,EAAA,KAAAD,GAIA,SAAAtR,EAAAb,EAAA6S,EAAAJ,GAIA,GAHAA,EAAAA,GAAAzS,IAGAmS,EAAAF,MAAA3T,QAAAmU,GAIA,GAHAN,EAAAF,MAAA9jB,KAAAskB,GAGAzS,KAAA7G,EACAqG,EAAAmT,KACAtb,EAAA2I,EAAA3P,QAAA,MAAA,KAAA8I,EAAA6G,GAAAyS,MAEAG,EACAE,WAAA,aACAF,EACAvb,EAAA2I,EAAA3P,QAAA,MAAA,KAAA8I,EAAA6G,GAAAyS,WAOA,GAAAjT,EAAAmT,KAAA,CACA,IAAArjB,EACA,IACAA,EAAA6M,EAAA2E,GAAAiS,aAAA/S,GAAAzQ,SAAA,QACA,MAAA2R,GAEA,YADA2R,GAAAT,EAAAlR,IAGA7J,EAAA2I,EAAA1Q,EAAAmjB,SAEAG,EACAT,EAAAtR,MAAAb,GAAAgT,KACA,SAAA1jB,KACAsjB,EACAvb,EAAA2I,EAAA1Q,EAAAmjB,IAEA,SAAAvR,KACA0R,EAEAC,EACAD,GAEAR,EAAA,KAAAD,GAHAC,EAAAlR,KAQA,IAAA0R,EAAA,EAIAzW,EAAAmE,SAAAN,KAAAA,EAAA,CAAAA,IACA,IAAA,IAAAkD,EAAAzV,EAAA,EAAAA,EAAAuS,EAAAhT,SAAAS,GACAyV,EAAAiP,EAAAD,YAAA,GAAAlS,EAAAvS,MACAoT,EAAAqC,GAAA,EAAA6O,EAAAnZ,SAAAoH,EAAAvS,KAEA,OAAA+R,EAAAmT,KAAAR,GACAS,GAAAR,EAAA,KAAAD,GACA7lB,MAOAkY,EAAAxT,UAAAkY,WAAA,WACA,GAAApY,KAAAkhB,SAAAhlB,OACA,MAAA8B,MACA,4BACAgC,KAAAkhB,SACA7U,IAAA,SAAAb,GACA,MAAA,WAAAA,EAAA+F,OAAA,QAAA/F,EAAA6G,OAAAvG,WAEApO,KAAA,OAEA,OAAA+Q,EAAAvO,UAAAkY,WAAA/S,KAAArF,OAIA,IAAAmiB,EAAA,SAUA,SAAAC,EAAA3O,EAAAjI,GACA,IAAA6W,EAAA7W,EAAA6G,OAAAgG,OAAA7M,EAAA+F,QACA,GAAA8Q,EAAA,CACA,IAAAC,EAAA,IAAAlR,EACA5F,EAAAM,SACAN,EAAAxC,GACAwC,EAAAzC,KACAyC,EAAAlB,KACA9O,EACAgQ,EAAAkD,SAKA,OAHA4T,EAAAxQ,eAAAtG,GACAqG,eAAAyQ,EACAD,EAAA9S,IAAA+S,GACA,GAWA5O,EAAAxT,UAAA8Y,EAAA,SAAAxD,GACA,GAAAA,aAAApE,EAEAoE,EAAAjE,SACA/V,GACAga,EAAA3D,gBAEAuQ,EAAApiB,EAAAwV,IAAAxV,KAAAkhB,SAAA7jB,KAAAmY,QACA,GAAAA,aAAApK,EACA+W,EAAAlkB,KAAAuX,EAAAhN,QAAAgN,EAAAnD,OAAAmD,EAAAhN,MAAAgN,EAAArL,aACA,KAAAqL,aAAA1B,GAAA,CACA,GAAA0B,aAAAnE,EAEA,IAAA,IAAA1U,EAAA,EAAAA,EAAAqD,KAAAkhB,SAAAhlB,QACAkmB,EAAApiB,EAAAA,KAAAkhB,SAAAvkB,IACAqD,KAAAkhB,SAAAzgB,OAAA9D,EAAA,KACAA,EACA,IACA,IAAAQ,EAAA,EACAA,EAAAqY,EAAAgB,YAAAta,SACAiB,EAEA6C,KAAAgZ,EAAAxD,EAAAU,EAAA/Y,IACAglB,EAAAlkB,KAAAuX,EAAAhN,QAAAgN,EAAAnD,OAAAmD,EAAAhN,MAAAgN,KAcA9B,EAAAxT,UAAA+Y,EAAA,SAAAzD,GAEA,IAOAlI,EARA,GAAAkI,aAAApE,EACAoE,EAAAjE,SAAA/V,IACAga,EAAA3D,gBAEA2D,EAAA3D,eAAAQ,OAAAxC,OAAA2F,EAAA3D,gBACA2D,EAAA3D,eAAA,OAKA,GAFAvE,EAAAtN,KAAAkhB,SAAA1T,QAAAgI,KAEAxV,KAAAkhB,SAAAzgB,OAAA6M,EAAA,SAGA,GAAAkI,aAAApK,EACA+W,EAAAlkB,KAAAuX,EAAAhN,cAAAgN,EAAAnD,OAAAmD,EAAAhN,WACA,GAAAgN,aAAA/G,EAAA,CACA,IACA,IAAA9R,EAAA,EACAA,EAAA6Y,EAAAgB,YAAAta,SACAS,EAEAqD,KAAAiZ,EAAAzD,EAAAU,EAAAvZ,IAEAwlB,EAAAlkB,KAAAuX,EAAAhN,cAAAgN,EAAAnD,OAAAmD,EAAAhN,QAKAkL,EAAAL,EAAA,SAAAC,EAAAiP,EAAAC,GACAnR,EAAAiC,EACAuB,EAAA0N,EACAla,EAAAma,I,uDC7UAzmB,EAAAC,QAAA,I,wBCKAA,EA6BAgY,QAAAlY,EAAA,K,2BClCAC,EAAAC,QAAAgY,EAEA,IAAA3I,EAAAvP,EAAA,IAwCA,SAAAkY,EAAAyO,EAAAC,EAAAC,GACA,GAAA,mBAAAF,EACA,MAAAhc,UAAA,8BAEA4E,EAAAtL,aAAAsF,KAAArF,MAMAA,KAAAyiB,QAAAA,EAMAziB,KAAA0iB,mBAAAA,EAMA1iB,KAAA2iB,oBAAAA,IA3DA3O,EAAA9T,UAAApB,OAAAwP,OACAjD,EAAAtL,aAAAG,YACAqO,YAAAyF,GAiEA9T,UAAAnD,IAAA,SAAA6lB,GAQA,OAPA5iB,KAAAyiB,UACAG,GAEA5iB,KAAAyiB,QAAA,KAAA,KAAA,MACAziB,KAAAyiB,QAAA,KACAziB,KAAAU,KAAA,OAAAH,OAEAP,O,2BChFAjE,EAAAC,QAAAgY,EAGA,IAAAvF,EAAA3S,EAAA,MACAkY,EAAA9T,UAAApB,OAAAwP,OACAG,EAAAvO,YACAqO,YAAAyF,GAAAxF,UAAA,UAEA,IAAAyF,EAAAnY,EAAA,IACAuP,EAAAvP,EAAA,IACA4Y,EAAA5Y,EAAA,IAWA,SAAAkY,EAAAxL,EAAAkG,GACAD,EAAApJ,KAAArF,KAAAwI,EAAAkG,GAMA1O,KAAA2W,QAAA,GAOA3W,KAAA6iB,EAAA,KAkBA7O,EAAA/E,SAAA,SAAAzG,EAAAC,EAAAyG,GACA,IAAAqO,EAAA,IAAAvJ,EAAAxL,EAAAC,EAAAiG,SAEA,GAAAjG,EAAAkO,QACA,IAAA,IAAAD,EAAA5X,OAAAC,KAAA0J,EAAAkO,SAAAha,EAAA,EAAAA,EAAA+Z,EAAAxa,SAAAS,EACA4gB,EAAAhO,IAAA0E,EAAAhF,SAAAyH,EAAA/Z,GAAA8L,EAAAkO,QAAAD,EAAA/Z,IAAAuS,IAIA,OAHAzG,EAAAC,QAAA6U,EAAAnH,QAAA3N,EAAAC,OAAAwG,GACAqO,EAAA5O,QAAAlG,EAAAkG,QACA4O,EAAArO,SAAAA,EACAqO,GAQAvJ,EAAA9T,UAAAkP,OAAA,SAAAC,GACA,IAAAyT,EAAArU,EAAAvO,UAAAkP,OAAA/J,KAAArF,KAAAqP,GACAC,IAAAD,KACAA,EAAAC,aAEA,OAAAjE,EAAAiB,SAAA,CACA,UACAwW,GAAAA,EAAApU,SAAAlT,EACA,UACAiT,EAAAsH,YAAA/V,KAAA+iB,aAAA1T,IACA,GACA,SACAyT,GAAAA,EAAApa,QAAAlN,EACA,UACA8T,EAAAtP,KAAA2O,QAAAnT,KAUAsD,OAAAkT,eAAAgC,EAAA9T,UAAA,eAAA,CACA+K,IAAA,WACA,OACAjL,KAAA6iB,IAAA7iB,KAAA6iB,EAAAxX,EAAAkL,QAAAvW,KAAA2W,aAKA3C,EAAA9T,UAAAmW,WAAA,WAEA,OADArW,KAAA6iB,EAAA,KACApU,EAAAvO,UAAAmW,WAAAhR,KAAArF,OAGAgU,EAAA9T,UAAA6W,EAAA,WACA,IAAAD,EAAArI,EAAAvO,UAAA6W,EAAA1R,KAAArF,MASA,OARA8W,EAAAI,SAAAJ,EAAAI,SAAA3P,OACAvH,KAAA+iB,aAAA1W,IAAA,SAAAoR,GACA,MAAA,CACAjV,KAAAiV,EAAAjV,KACA6O,KAAAoG,MAIA3G,GAMA9C,EAAA9T,UAAAkY,WAAA,WAEA,IADA,IAAAzB,EAAA3W,KAAA+iB,aACApmB,EAAA,EAAAA,EAAAga,EAAAza,SAAAS,EAAAga,EAAAha,GAAAiI,UACA,OAAA6J,EAAAvO,UAAA0E,QAAAS,KAAArF,OAMAgU,EAAA9T,UAAAqP,IAAA,SAAAiG,GAEA,GAAAxV,KAAAiL,IAAAuK,EAAAhN,MACA,MAAAxK,MAAA,mBAAAwX,EAAAhN,KAAA,QAAAxI,MAEA,OAAAwV,aAAAvB,IACAjU,KAAA2W,QAAAnB,EAAAhN,MAAAgN,GACAnD,OAAArS,MACAqW,aAEA5H,EAAAvO,UAAAqP,IAAAlK,KAAArF,KAAAwV,IAMAxB,EAAA9T,UAAA2P,OAAA,SAAA2F,GACA,GAAAA,aAAAvB,EAAA,CAEA,GAAAjU,KAAA2W,QAAAnB,EAAAhN,QAAAgN,EACA,MAAAxX,MAAAwX,EAAA,uBAAAxV,MAIA,cAFAA,KAAA2W,QAAAnB,EAAAhN,MACAgN,EAAAnD,OAAA,KACArS,KAAAqW,aAEA,OAAA5H,EAAAvO,UAAA2P,OAAAxK,KAAArF,KAAAwV,IAUAxB,EAAA9T,UAAAoO,OAAA,SACAmU,EACAC,EACAC,GAOA,IALA,IAKAlF,EALAuF,EAAA,IAAAtO,EAAAV,QACAyO,EACAC,EACAC,GAEAhmB,EAAA,EAAAA,EAAAqD,KAAA+iB,aAAA7mB,SAAAS,EAAA,CACA,IAAAsmB,EAAA5X,EACA4S,SAAAR,EAAAzd,KAAA6iB,EAAAlmB,IAAAiI,UAAA4D,MACAjJ,QAAA,WAAA,IACA0jB,EAAA5X,EAAA6X,WAAAD,GAAAA,EAAA,IAAAA,EAEAxF,EAAA/H,cACAsN,EAAAC,GAAA5X,EAAAnN,QACA,GACA+kB,EAFA5X,CAGA,yBAHAA,CAGA,CACA8X,EAAA1F,IAGAuF,EAAAC,GAAA5X,EAAAnN,QACA,CAAA,KACA+kB,EAFA5X,CAGA,2BAHAA,CAGA,CACA8X,EAAA1F,IAIA,OAAAuF,I,6CCxMAjnB,EAAAC,QAAA4Y,EAEA,IAAAwO,EAAA,uBACAC,EAAA,kCACAC,EAAA,kCAEAC,EAAA,aACAC,EAAA,aACAC,EAAA,MACAC,EAAA,KACAC,EAAA,UAEAC,EAAA,CACAC,EAAA,KACAC,EAAA,KACAznB,EAAA,KACAW,EAAA,MAUA,SAAA+mB,EAAA3b,GACA,OAAAA,EAAA7I,QAAAokB,EAAA,SAAAnkB,EAAAC,GACA,OAAAA,GACA,IAAA,KACA,IAAA,GACA,OAAAA,EACA,QACA,OAAAmkB,EAAAnkB,IAAA,MAgEA,SAAAmV,EAAApW,EAAA0c,GAEA1c,EAAAA,EAAAC,WAEA,IAAAZ,EAAA,EACA3B,EAAAsC,EAAAtC,OACA2f,EAAA,EACAmI,EAAA,KACAxG,EAAA,KACAyG,EAAA,EACAC,GAAA,EACAC,GAAA,EAEAC,EAAA,GAEAC,EAAA,KASA,SAAA1I,EAAA2I,GACA,OAAAtmB,MAAA,WAAAsmB,EAAA,UAAAzI,EAAA,KA0BA,SAAA0I,EAAAtjB,GACA,OAAAzC,EAAAA,EAAAyC,GAWA,SAAAujB,EAAA1nB,EAAAC,EAAA0nB,GACAT,EAAAxlB,EAAAA,EAAA1B,KACAmnB,EAAApI,EACAqI,GAAA,EACAC,EAAAM,EAOA,IACA3mB,EADA4mB,EAAA5nB,GALAoe,EACA,EAEA,GAIA,GACA,KAAAwJ,EAAA,GACA,OAAA5mB,EAAAU,EAAAA,EAAAkmB,IAAA,CACAR,GAAA,EACA,aAEA,MAAApmB,GAAA,OAAAA,GAIA,IAHA,IAAA6mB,EAAAnmB,EACAyd,UAAAnf,EAAAC,GACAyH,MAAAif,GACA9mB,EAAA,EAAAA,EAAAgoB,EAAAzoB,SAAAS,EACAgoB,EAAAhoB,GAAAgoB,EAAAhoB,GACA4C,QAAA2b,EAAAsI,EAAAD,EAAA,IACAvc,OACAwW,EAAAmH,EACAjnB,KAAA,MACAsJ,OAGA,SAAA4d,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GAGAG,EAAAxmB,EAAAyd,UAAA4I,EAAAC,GAIA,MADA,cAAA7mB,KAAA+mB,GAIA,SAAAD,EAAAE,GAGA,IADA,IAAAH,EAAAG,EACAH,EAAA5oB,GAAA,OAAAqoB,EAAAO,IACAA,IAEA,OAAAA,EAQA,SAAA3J,IACA,GAAA,EAAAiJ,EAAAloB,OACA,OAAAkoB,EAAAzf,QACA,GAAA0f,EACA,OA3FA,WACA,IAAAa,EAAA,MAAAb,EAAAf,EAAAD,EACA6B,EAAAC,UAAAtnB,EAAA,EACA,IAAAunB,EAAAF,EAAAG,KAAA7mB,GACA,IAAA4mB,EACA,MAAAzJ,EAAA,UAIA,OAHA9d,EAAAqnB,EAAAC,UACA9nB,EAAAgnB,GACAA,EAAA,KACAN,EAAAqB,EAAA,IAkFAtJ,GACA,IAAAwJ,EACAxN,EACAyN,EACAzoB,EACA0oB,EACAC,EAAA,IAAA5nB,EACA,EAAA,CACA,GAAAA,IAAA3B,EACA,OAAA,KAEA,IADAopB,GAAA,EACA5B,EAAAzlB,KAAAsnB,EAAAhB,EAAA1mB,KAKA,GAJA,OAAA0nB,IACAE,GAAA,IACA5J,KAEAhe,IAAA3B,EACA,OAAA,KAGA,GAAA,MAAAqoB,EAAA1mB,GAAA,CACA,KAAAA,IAAA3B,EACA,MAAAyf,EAAA,WAEA,GAAA,MAAA4I,EAAA1mB,GACA,GAAAqd,EAeA,CAIA,GADAsK,GAAA,EACAZ,EAFA9nB,EAAAe,GAEA,CACA2nB,GAAA,EACA,EAAA,CAEA,IADA3nB,EAAAknB,EAAAlnB,MACA3B,EACA,MAEA2B,UACA+mB,EAAA/mB,SAEAA,EAAAvB,KAAA8K,IAAAlL,EAAA6oB,EAAAlnB,GAAA,GAEA2nB,GACAhB,EAAA1nB,EAAAe,EAAA4nB,GAEA5J,IACAyJ,GAAA,MAnCA,CAIA,IAFAE,EAAA,MAAAjB,EAAAznB,EAAAe,EAAA,GAEA,OAAA0mB,IAAA1mB,IACA,GAAAA,IAAA3B,EACA,OAAA,OAGA2B,EACA2nB,GACAhB,EAAA1nB,EAAAe,EAAA,EAAA4nB,KAEA5J,EACAyJ,GAAA,MAuBA,CAAA,GAAA,OAAAC,EAAAhB,EAAA1mB,IAoBA,MAAA,IAlBAf,EAAAe,EAAA,EACA2nB,EAAAtK,GAAA,MAAAqJ,EAAAznB,GACA,EAAA,CAIA,GAHA,OAAAyoB,KACA1J,IAEAhe,IAAA3B,EACA,MAAAyf,EAAA,WAEA7D,EAAAyN,EACAA,EAAAhB,EAAA1mB,SACA,MAAAia,GAAA,MAAAyN,KACA1nB,EACA2nB,GACAhB,EAAA1nB,EAAAe,EAAA,EAAA4nB,GAEAH,GAAA,UAKAA,GAIA,IAAAvoB,EAAAc,EAGA,GAFAulB,EAAA+B,UAAA,GACA/B,EAAAnlB,KAAAsmB,EAAAxnB,MAEA,KAAAA,EAAAb,IAAAknB,EAAAnlB,KAAAsmB,EAAAxnB,OACAA,EACA,IAAAge,EAAAvc,EAAAyd,UAAApe,EAAAA,EAAAd,GAGA,MAFA,KAAAge,GAAA,KAAAA,IACAsJ,EAAAtJ,GACAA,EASA,SAAA1d,EAAA0d,GACAqJ,EAAA/mB,KAAA0d,GAQA,SAAAK,IACA,IAAAgJ,EAAAloB,OAAA,CACA,IAAA6e,EAAAI,IACA,GAAA,OAAAJ,EACA,OAAA,KACA1d,EAAA0d,GAEA,OAAAqJ,EAAA,GA+CA,OAAAtlB,OAAAkT,eAAA,CACAmJ,KAAAA,EACAC,KAAAA,EACA/d,KAAAA,EACAge,KAxCA,SAAAqK,EAAAtX,GACA,IAAAuX,EAAAvK,IAEA,GADAuK,IAAAD,EAGA,OADAvK,KACA,EAEA,IAAA/M,EACA,MAAAuN,EAAA,UAAAgK,EAAA,OAAAD,EAAA,cACA,OAAA,GAgCApK,KAvBA,SAAA0C,GACA,IAAA4H,EAAA,KAcA,OAbA5H,IAAAxiB,EACAyoB,IAAApI,EAAA,IAAAX,GAAA,MAAA8I,GAAAE,KACA0B,EAAAzB,EAAA3G,EAAA,OAIAyG,EAAAjG,GACA5C,IAEA6I,IAAAjG,GAAAkG,IAAAhJ,GAAA,MAAA8I,IACA4B,EAAAzB,EAAA,KAAA3G,IAGAoI,IASA,OAAA,CACA3a,IAAA,WAAA,OAAA4Q,KAxWAjH,EAAAmP,SAAAA,G,sBCtCAhoB,EAAAC,QAAAqV,EAGA,IAAA5C,EAAA3S,EAAA,MACAuV,EAAAnR,UAAApB,OAAAwP,OAAAG,EAAAvO,YAAAqO,YAAA8C,GAAA7C,UAAA,OAEA,IAAApD,EAAAtP,EAAA,IACAgY,EAAAhY,EAAA,IACAsV,EAAAtV,EAAA,IACAiY,EAAAjY,EAAA,IACAkY,EAAAlY,EAAA,IACAoY,EAAApY,EAAA,IACA0Y,EAAA1Y,EAAA,IACAwY,EAAAxY,EAAA,IACAuP,EAAAvP,EAAA,IACA6X,EAAA7X,EAAA,IACA8X,EAAA9X,EAAA,IACA+X,EAAA/X,EAAA,IACAqP,EAAArP,EAAA,IACAqY,EAAArY,EAAA,IAUA,SAAAuV,EAAA7I,EAAAkG,GACAD,EAAApJ,KAAArF,KAAAwI,EAAAkG,GAMA1O,KAAA6I,OAAA,GAMA7I,KAAAyJ,OAAAjO,EAMAwE,KAAAkd,WAAA1hB,EAMAwE,KAAA8O,SAAAtT,EAMAwE,KAAAyN,MAAAjS,EAOAwE,KAAA6lB,EAAA,KAOA7lB,KAAAuN,EAAA,KAOAvN,KAAA8lB,EAAA,KAOA9lB,KAAA+lB,EAAA,KAGAjnB,OAAAga,iBAAAzH,EAAAnR,UAAA,CAQA8lB,WAAA,CACA/a,IAAA,WAGA,GAAAjL,KAAA6lB,EACA,OAAA7lB,KAAA6lB,EAEA7lB,KAAA6lB,EAAA,GACA,IAAA,IAAAnP,EAAA5X,OAAAC,KAAAiB,KAAA6I,QAAAlM,EAAA,EAAAA,EAAA+Z,EAAAxa,SAAAS,EAAA,CACA,IAAA6O,EAAAxL,KAAA6I,OAAA6N,EAAA/Z,IACAqM,EAAAwC,EAAAxC,GAGA,GAAAhJ,KAAA6lB,EAAA7c,GACA,MAAAhL,MAAA,gBAAAgL,EAAA,OAAAhJ,MAEAA,KAAA6lB,EAAA7c,GAAAwC,EAEA,OAAAxL,KAAA6lB,IAUA1Z,YAAA,CACAlB,IAAA,WACA,OAAAjL,KAAAuN,IAAAvN,KAAAuN,EAAAlC,EAAAkL,QAAAvW,KAAA6I,WAUAod,YAAA,CACAhb,IAAA,WACA,OAAAjL,KAAA8lB,IAAA9lB,KAAA8lB,EAAAza,EAAAkL,QAAAvW,KAAAyJ,WAUAmJ,KAAA,CACA3H,IAAA,WACA,OAAAjL,KAAA+lB,IAAA/lB,KAAA4S,KAAAvB,EAAA6U,oBAAAlmB,KAAAqR,KAEAyI,IAAA,SAAAlH,GAGA,IAAA1S,EAAA0S,EAAA1S,UACAA,aAAAgU,KACAtB,EAAA1S,UAAA,IAAAgU,GAAA3F,YAAAqE,EACAvH,EAAAoV,MAAA7N,EAAA1S,UAAAA,IAIA0S,EAAAsC,MAAAtC,EAAA1S,UAAAgV,MAAAlV,KAGAqL,EAAAoV,MAAA7N,EAAAsB,GAAA,GAEAlU,KAAA+lB,EAAAnT,EAIA,IADA,IAAAjW,EAAA,EACAA,EAAAqD,KAAAmM,YAAAjQ,SAAAS,EACAqD,KAAAuN,EAAA5Q,GAAAiI,UAIA,IADA,IAAAuhB,EAAA,GACAxpB,EAAA,EAAAA,EAAAqD,KAAAimB,YAAA/pB,SAAAS,EACAwpB,EAAAnmB,KAAA8lB,EAAAnpB,GAAAiI,UAAA4D,MAAA,CACAyC,IAAAI,EAAAwO,YAAA7Z,KAAA8lB,EAAAnpB,GAAAgN,OACAmQ,IAAAzO,EAAA0O,YAAA/Z,KAAA8lB,EAAAnpB,GAAAgN,QAEAhN,GACAmC,OAAAga,iBAAAlG,EAAA1S,UAAAimB,OAUA9U,EAAA6U,oBAAA,SAAAha,GAIA,IAFA,IAEAV,EAFAD,EAAAF,EAAAnN,QAAA,CAAA,KAAAgO,EAAA1D,MAEA7L,EAAA,EAAAA,EAAAuP,EAAAC,YAAAjQ,SAAAS,GACA6O,EAAAU,EAAAqB,EAAA5Q,IAAA0P,MAAAb,EAAA4C,SAAA7C,EACA,YAAAF,EAAAe,SAAAZ,EAAAhD,OACAgD,EAAAI,WAAAJ,EAAA4C,UAAA7C,EACA,YAAAF,EAAAe,SAAAZ,EAAAhD,OACA,OAAA+C,EACA,wEADAA,CAEA,yBAIA8F,EAAAnR,UAAAmW,WAAA,WAKA,OAJArW,KAAA6lB,EAAA7lB,KAAAuN,EAAAvN,KAAA8lB,EAAA,YACA9lB,KAAApD,cACAoD,KAAApC,cACAoC,KAAAuV,OACA9G,EAAAvO,UAAAmW,WAAAhR,KAAArF,OAqBAqR,EAAApC,SAAA,SAAAzG,EAAAC,EAAAyG,GACA,IAAAnG,EAAA,IAAAsI,EAAA7I,EAAAC,EAAAiG,SACA3F,EAAAmG,SAAAA,EACAnG,EAAAmU,WAAAzU,EAAAyU,WACAnU,EAAA+F,SAAArG,EAAAqG,SAGA,IAFA,IAAA4H,EAAA5X,OAAAC,KAAA0J,EAAAI,QACAlM,EAAA,EACAA,EAAA+Z,EAAAxa,SAAAS,EACAoM,EAAAwG,UACA,IAAA9G,EAAAI,OAAA6N,EAAA/Z,IAAA4M,QACAwK,EAAA9E,SACAmC,EAAAnC,UAAAyH,EAAA/Z,GAAA8L,EAAAI,OAAA6N,EAAA/Z,IAAAuS,IAEA,GAAAzG,EAAAgB,OACA,IAAAiN,EAAA5X,OAAAC,KAAA0J,EAAAgB,QAAA9M,EAAA,EAAAA,EAAA+Z,EAAAxa,SAAAS,EACAoM,EAAAwG,IAAAuE,EAAA7E,SAAAyH,EAAA/Z,GAAA8L,EAAAgB,OAAAiN,EAAA/Z,IAAAuS,IACA,GAAAzG,EAAAC,OACA,IAAAgO,EAAA5X,OAAAC,KAAA0J,EAAAC,QAAA/L,EAAA,EAAAA,EAAA+Z,EAAAxa,SAAAS,EAAA,CACA,IAAA+L,EAAAD,EAAAC,OAAAgO,EAAA/Z,IACAoM,EAAAwG,KACA7G,EAAAM,KAAAxN,EACA4V,EAAAnC,SACAvG,EAAAG,SAAArN,EACA6V,EAAApC,SACAvG,EAAAyB,SAAA3O,EACA4P,EAAA6D,SACAvG,EAAAiO,UAAAnb,EACAwY,EAAA/E,SACAR,EAAAQ,UAAAyH,EAAA/Z,GAAA+L,EAAAwG,IAWA,OARAzG,EAAAyU,YAAAzU,EAAAyU,WAAAhhB,SACA6M,EAAAmU,WAAAzU,EAAAyU,YACAzU,EAAAqG,UAAArG,EAAAqG,SAAA5S,SACA6M,EAAA+F,SAAArG,EAAAqG,UACArG,EAAAgF,QACA1E,EAAA0E,OAAA,GACAhF,EAAAkG,UACA5F,EAAA4F,QAAAlG,EAAAkG,SACA5F,GAQAsI,EAAAnR,UAAAkP,OAAA,SAAAC,GACA,IAAAyT,EAAArU,EAAAvO,UAAAkP,OAAA/J,KAAArF,KAAAqP,GACAC,IAAAD,KAAAA,EAAAC,aACA,OAAAjE,EAAAiB,SAAA,CACA,UAAAwW,GAAAA,EAAApU,SAAAlT,EACA,SAAAiT,EAAAsH,YAAA/V,KAAAimB,YAAA5W,GACA,SAAAZ,EAAAsH,YAAA/V,KAAAmM,YAAAlG,OAAA,SAAAgQ,GAAA,OAAAA,EAAAnE,iBAAAzC,IAAA,GACA,aAAArP,KAAAkd,YAAAld,KAAAkd,WAAAhhB,OAAA8D,KAAAkd,WAAA1hB,EACA,WAAAwE,KAAA8O,UAAA9O,KAAA8O,SAAA5S,OAAA8D,KAAA8O,SAAAtT,EACA,QAAAwE,KAAAyN,OAAAjS,EACA,SAAAsnB,GAAAA,EAAApa,QAAAlN,EACA,UAAA8T,EAAAtP,KAAA2O,QAAAnT,KAOA6V,EAAAnR,UAAAkY,WAAA,WAEA,IADA,IAAAvP,EAAA7I,KAAAmM,YAAAxP,EAAA,EACAA,EAAAkM,EAAA3M,QACA2M,EAAAlM,KAAAiI,UAEA,IADA,IAAA6E,EAAAzJ,KAAAimB,YAAAtpB,EAAA,EACAA,EAAA8M,EAAAvN,QACAuN,EAAA9M,KAAAiI,UACA,OAAA6J,EAAAvO,UAAAkY,WAAA/S,KAAArF,OAGAqR,EAAAnR,UAAA6W,EAAA,WACA,IAAAD,EAAArI,EAAAvO,UAAA6W,EAAA1R,KAAArF,MAkBA,OAjBA8W,EAAAI,SAAAJ,EAAAI,SAAA3P,OAAAvH,KAAAmM,YAAAE,IAAA,SAAAb,GACA,MAAA,CACAhD,KAAAgD,EAAAhD,KACA6O,KAAA7L,MAGAxL,KAAAimB,cACAnP,EAAAI,SAAAJ,EAAAI,SAAA3P,OACAvH,KAAAimB,YAAA5Z,IAAA,SAAA+Z,GACA,MAAA,CACA5d,KAAA4d,EAAA5d,KACA6O,KAAA+O,OAMAtP,GAUAzF,EAAAnR,UAAAqP,IAAA,SAAAiG,GAEA,GAAAxV,KAAAiL,IAAAuK,EAAAhN,MACA,MAAAxK,MAAA,mBAAAwX,EAAAhN,KAAA,QAAAxI,MAEA,GAAAwV,aAAApE,GAAAoE,EAAAjE,SAAA/V,EAAA,CAMA,GAAAwE,KAAA6lB,EAAA7lB,KAAA6lB,EAAArQ,EAAAxM,IAAAhJ,KAAAgmB,WAAAxQ,EAAAxM,IACA,MAAAhL,MAAA,gBAAAwX,EAAAxM,GAAA,OAAAhJ,MACA,GAAAA,KAAA0P,aAAA8F,EAAAxM,IACA,MAAAhL,MAAA,MAAAwX,EAAAxM,GAAA,mBAAAhJ,MACA,GAAAA,KAAA2P,eAAA6F,EAAAhN,MACA,MAAAxK,MAAA,SAAAwX,EAAAhN,KAAA,oBAAAxI,MAOA,OALAwV,EAAAnD,QACAmD,EAAAnD,OAAAxC,OAAA2F,IACAxV,KAAA6I,OAAA2M,EAAAhN,MAAAgN,GACA9D,QAAA1R,KACAwV,EAAAwC,MAAAhY,MACAA,KAAAqW,aAEA,OAAAb,aAAA1B,GACA9T,KAAAyJ,SACAzJ,KAAAyJ,OAAA,KACAzJ,KAAAyJ,OAAA+L,EAAAhN,MAAAgN,GACAwC,MAAAhY,MACAA,KAAAqW,cAEA5H,EAAAvO,UAAAqP,IAAAlK,KAAArF,KAAAwV,IAUAnE,EAAAnR,UAAA2P,OAAA,SAAA2F,GACA,GAAAA,aAAApE,GAAAoE,EAAAjE,SAAA/V,EAAA,CAIA,IAAAwE,KAAA6I,QAAA7I,KAAA6I,OAAA2M,EAAAhN,QAAAgN,EACA,MAAAxX,MAAAwX,EAAA,uBAAAxV,MAKA,cAHAA,KAAA6I,OAAA2M,EAAAhN,MACAgN,EAAAnD,OAAA,KACAmD,EAAAyC,SAAAjY,MACAA,KAAAqW,aAEA,GAAAb,aAAA1B,EAAA,CAGA,IAAA9T,KAAAyJ,QAAAzJ,KAAAyJ,OAAA+L,EAAAhN,QAAAgN,EACA,MAAAxX,MAAAwX,EAAA,uBAAAxV,MAKA,cAHAA,KAAAyJ,OAAA+L,EAAAhN,MACAgN,EAAAnD,OAAA,KACAmD,EAAAyC,SAAAjY,MACAA,KAAAqW,aAEA,OAAA5H,EAAAvO,UAAA2P,OAAAxK,KAAArF,KAAAwV,IAQAnE,EAAAnR,UAAAwP,aAAA,SAAA1G,GACA,OAAAyF,EAAAiB,aAAA1P,KAAA8O,SAAA9F,IAQAqI,EAAAnR,UAAAyP,eAAA,SAAAnH,GACA,OAAAiG,EAAAkB,eAAA3P,KAAA8O,SAAAtG,IAQA6I,EAAAnR,UAAAoO,OAAA,SAAA2G,GACA,OAAA,IAAAjV,KAAA4S,KAAAqC,IAOA5D,EAAAnR,UAAAmmB,MAAA,WAMA,IAFA,IAAAva,EAAA9L,KAAA8L,SACA6B,EAAA,GACAhR,EAAA,EAAAA,EAAAqD,KAAAmM,YAAAjQ,SAAAS,EACAgR,EAAAtQ,KAAA2C,KAAAuN,EAAA5Q,GAAAiI,UAAA+G,cAGA3L,KAAApD,OAAA+W,EAAA3T,KAAA2T,CAAA,CACAW,OAAAA,EACA3G,MAAAA,EACAtC,KAAAA,IAEArL,KAAApC,OAAAgW,EAAA5T,KAAA4T,CAAA,CACAY,OAAAA,EACA7G,MAAAA,EACAtC,KAAAA,IAEArL,KAAAuV,OAAA1B,EAAA7T,KAAA6T,CAAA,CACAlG,MAAAA,EACAtC,KAAAA,IAEArL,KAAAiM,WAAAd,EAAAc,WAAAjM,KAAAmL,CAAA,CACAwC,MAAAA,EACAtC,KAAAA,IAEArL,KAAAsM,SAAAnB,EAAAmB,SAAAtM,KAAAmL,CAAA,CACAwC,MAAAA,EACAtC,KAAAA,IAIA,IAEAib,EAFAC,EAAApS,EAAArI,GAaA,OAZAya,KACAD,EAAAxnB,OAAAwP,OAAAtO,OAEAiM,WAAAjM,KAAAiM,WACAjM,KAAAiM,WAAAsa,EAAAta,WAAA3I,KAAAgjB,GAGAA,EAAAha,SAAAtM,KAAAsM,SACAtM,KAAAsM,SAAAia,EAAAja,SAAAhJ,KAAAgjB,IAIAtmB,MASAqR,EAAAnR,UAAAtD,OAAA,SAAA8U,EAAAyD,GACA,OAAAnV,KAAAqmB,QAAAzpB,OAAA8U,EAAAyD,IASA9D,EAAAnR,UAAAkV,gBAAA,SAAA1D,EAAAyD,GACA,OAAAnV,KAAApD,OAAA8U,EAAAyD,GAAAA,EAAA5P,IAAA4P,EAAAqR,OAAArR,GAAAsR,UAWApV,EAAAnR,UAAAtC,OAAA,SAAAyX,EAAAnZ,GACA,OAAA8D,KAAAqmB,QAAAzoB,OAAAyX,EAAAnZ,IAUAmV,EAAAnR,UAAAoV,gBAAA,SAAAD,GAGA,OAFAA,aAAAb,IACAa,EAAAb,EAAAlG,OAAA+G,IACArV,KAAApC,OAAAyX,EAAAA,EAAA0K,WAQA1O,EAAAnR,UAAAqV,OAAA,SAAA7D,GACA,OAAA1R,KAAAqmB,QAAA9Q,OAAA7D,IAQAL,EAAAnR,UAAA+L,WAAA,SAAAuJ,GACA,OAAAxV,KAAAqmB,QAAApa,WAAAuJ,IA2BAnE,EAAAnR,UAAAoM,SAAA,SAAAoF,EAAAhD,GACA,OAAA1O,KAAAqmB,QAAA/Z,SAAAoF,EAAAhD,IAkBA2C,EAAAwB,EAAA,SAAA6T,GACA,OAAA,SAAApK,GACAjR,EAAA4H,aAAAqJ,EAAAoK,M,iHCjlBA,IAAA/Y,EAAA3R,EAEAqP,EAAAvP,EAAA,IAEA6qB,EAAA,CACA,SACA,QACA,QACA,SACA,SACA,UACA,WACA,QACA,SACA,SACA,UACA,WACA,OACA,SACA,SAGA,SAAAC,EAAAzc,EAAAtM,GACA,IAAAlB,EAAA,EAAAkqB,EAAA,GAEA,IADAhpB,GAAA,EACAlB,EAAAwN,EAAAjO,QAAA2qB,EAAAF,EAAAhqB,EAAAkB,IAAAsM,EAAAxN,KACA,OAAAkqB,EAuBAlZ,EAAAE,MAAA+Y,EAAA,CACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAwBAjZ,EAAAC,SAAAgZ,EAAA,CACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACAvb,EAAAsH,WACA,OAaAhF,EAAAZ,KAAA6Z,EAAA,CACA,EACA,EACA,EACA,EACA,GACA,GAmBAjZ,EAAAO,OAAA0Y,EAAA,CACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GAoBAjZ,EAAAG,OAAA8Y,EAAA,CACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,K,2BC5LA,IAIAvV,EACAjG,EALAC,EAAAtP,EAAAC,QAAAF,EAAA,IAEA6Y,EAAA7Y,EAAA,IAKAuP,EAAAnN,QAAApC,EAAA,GACAuP,EAAA0E,MAAAjU,EAAA,IACAuP,EAAAhH,KAAAvI,EAAA,GAMAuP,EAAA2E,GAAA3E,EAAArH,QAAA,MAOAqH,EAAAkL,QAAA,SAAAf,GACA,GAAAA,EAAA,CAIA,IAHA,IAAAzW,EAAAD,OAAAC,KAAAyW,GACAQ,EAAAvZ,MAAAsC,EAAA7C,QACAoR,EAAA,EACAA,EAAAvO,EAAA7C,QAAA8Z,EAAA1I,GAAAkI,EAAAzW,EAAAuO,MACA,OAAA0I,EAEA,MAAA,IAQA3K,EAAAiB,SAAA,SAAA0J,GAGA,IAFA,IAAAR,EAAA,GACAlI,EAAA,EACAA,EAAA0I,EAAA9Z,QAAA,CACA,IAAA8S,EAAAgH,EAAA1I,KACAvM,EAAAiV,EAAA1I,KACAvM,IAAAvF,IAAAga,EAAAxG,GAAAjO,GAEA,OAAAyU,GAGA,IAAAsR,EAAA,MACAC,EAAA,KAOA1b,EAAA6X,WAAA,SAAA1a,GACA,MAAA,uTAAAvK,KACAuK,IASA6C,EAAAe,SAAA,SAAAV,GACA,OAAA,YAAAzN,KAAAyN,IAAAL,EAAA6X,WAAAxX,GAEA,KACAA,EACAnM,QAAAunB,EAAA,QACAvnB,QAAAwnB,EAAA,OACA,KAEA,IAAArb,GAQAL,EAAA6S,QAAA,SAAA9V,GACA,OAAAA,EAAA,GAAA4e,cAAA5e,EAAA6T,UAAA,IAGA,IAAAgL,EAAA,YAOA5b,EAAAqQ,UAAA,SAAAtT,GACA,OACAA,EAAA6T,UAAA,EAAA,GACA7T,EAAA6T,UAAA,GAAA1c,QAAA0nB,EAAA,SAAAznB,EAAAC,GACA,OAAAA,EAAAunB,iBAWA3b,EAAAoB,kBAAA,SAAAya,EAAA9pB,GACA,OAAA8pB,EAAAle,GAAA5L,EAAA4L,IAWAqC,EAAA4H,aAAA,SAAAL,EAAA8T,GAEA,GAAA9T,EAAAsC,MAMA,OALAwR,GAAA9T,EAAAsC,MAAA1M,OAAAke,IACArb,EAAA8b,aAAAtX,OAAA+C,EAAAsC,OACAtC,EAAAsC,MAAA1M,KAAAke,EACArb,EAAA8b,aAAA5X,IAAAqD,EAAAsC,QAEAtC,EAAAsC,MAMA,IAAAnM,EAAA,IAFAsI,EAAAA,GAAAvV,EAAA,KAEA4qB,GAAA9T,EAAApK,MAQA,OAPA6C,EAAA8b,aAAA5X,IAAAxG,GACAA,EAAA6J,KAAAA,EACA9T,OAAAkT,eAAAY,EAAA,QAAA,CAAAlT,MAAAqJ,EAAAqe,YAAA,IACAtoB,OAAAkT,eAAAY,EAAA1S,UAAA,QAAA,CACAR,MAAAqJ,EACAqe,YAAA,IAEAre,GAGA,IAAAse,EAAA,EAOAhc,EAAA6H,aAAA,SAAAsC,GAEA,GAAAA,EAAAN,MAAA,OAAAM,EAAAN,MAKA,IAAA/F,EAAA,IAFA/D,EAAAA,GAAAtP,EAAA,KAEA,OAAAurB,IAAA7R,GAGA,OAFAnK,EAAA8b,aAAA5X,IAAAJ,GACArQ,OAAAkT,eAAAwD,EAAA,QAAA,CAAA9V,MAAAyP,EAAAiY,YAAA,IACAjY,GAUA9D,EAAAmO,YAAA,SAAA8N,EAAAjjB,EAAA3E,GAaA,GAAA,iBAAA4nB,EAAA,MAAA7gB,UAAA,yBACA,IAAApC,EAAA,MAAAoC,UAAA,0BAGA,OAhBA,SAAA8gB,EAAAD,EAAAjjB,EAAA3E,GACA,IAIA+e,EAJA+I,EAAAnjB,EAAAM,QAQA,OAPA,EAAAN,EAAAnI,OACAorB,EAAAE,GAAAD,EAAAD,EAAAE,IAAA,GAAAnjB,EAAA3E,KAEA+e,EAAA6I,EAAAE,MACA9nB,EAAA,GAAA6H,OAAAkX,GAAAlX,OAAA7H,IACA4nB,EAAAE,GAAA9nB,GAEA4nB,EAOAC,CAAAD,EADAjjB,EAAAA,EAAAG,MAAA,KACA9E,IASAZ,OAAAkT,eAAA3G,EAAA,eAAA,CACAJ,IAAA,WACA,OACA0J,EAAA,YAAAA,EAAA,UAAA,IAAA7Y,EAAA,U,iECjNAC,EAAAC,QAAAkjB,EAEA,IAAA7T,EAAAvP,EAAA,IAUA,SAAAojB,EAAAxc,EAAAC,GAKA,iBAAAD,GACA1C,KAAA0C,GAAA,MAAAA,EAAAsK,IAAAtK,EAAAsK,IAAAtK,EAAAA,GACA1C,KAAA2C,GAAA,MAAAD,EAAAuK,KAAAvK,EAAAuK,KAAAvK,EAAAC,KAMA3C,KAAA0C,GAAAA,IAAA,EAMA1C,KAAA2C,GAAAA,IAAA,GASA,IAAA8kB,EAAAvI,EAAAuI,KAAA,IAAAvI,EAAA,EAAA,GAEAuI,EAAAta,SAAA,WAAA,OAAA,GACAsa,EAAAC,SAAAD,EAAA5G,SAAA,WAAA,OAAA7gB,MACAynB,EAAAvrB,OAAA,WAAA,OAAA,GAOAgjB,EAAAyI,SAAA,mBAOAzI,EAAA3M,WAAA,SAAA7S,GACA,GAAA,IAAAA,EACA,OAAA+nB,EACA,IAAAtmB,EAAAzB,EAAA,EACAyB,IACAzB,GAAAA,GACA,IAAAgD,EAAAhD,IAAA,EACAiD,GAAAjD,EAAAgD,GAAA,aAAA,EAUA,OATAvB,IACAwB,GAAAA,IAAA,EACAD,GAAAA,IAAA,EACA,aAAAA,IACAA,EAAA,EACA,aAAAC,IACAA,EAAA,KAGA,IAAAuc,EAAAxc,EAAAC,IAQAuc,EAAApY,KAAA,SAAApH,GACA,GAAA,iBAAAA,EACA,OAAAwf,EAAA3M,WAAA7S,GACA,GAAA2L,EAAAmE,SAAA9P,GAAA,CAEA,IAAA2L,EAAAuG,KAGA,OAAAsN,EAAA3M,WAAA2J,SAAAxc,EAAA,KAFAA,EAAA2L,EAAAuG,KAAAgW,WAAAloB,GAIA,OAAAA,EAAAsN,KAAAtN,EAAAuN,KAAA,IAAAiS,EAAAxf,EAAAsN,MAAA,EAAAtN,EAAAuN,OAAA,GAAAwa,GAQAvI,EAAAhf,UAAAiN,SAAA,SAAAD,GACA,IAAAA,GAAAlN,KAAA2C,KAAA,GAAA,CACA,IAAAD,EAAA,GAAA1C,KAAA0C,KAAA,EACAC,GAAA3C,KAAA2C,KAAA,EAGA,OAFAD,IACAC,EAAAA,EAAA,IAAA,KACAD,EAAA,WAAAC,GAEA,OAAA3C,KAAA0C,GAAA,WAAA1C,KAAA2C,IAQAuc,EAAAhf,UAAA2nB,OAAA,SAAA3a,GACA,OAAA7B,EAAAuG,KACA,IAAAvG,EAAAuG,KAAA,EAAA5R,KAAA0C,GAAA,EAAA1C,KAAA2C,KAAAuK,GAEA,CAAAF,IAAA,EAAAhN,KAAA0C,GAAAuK,KAAA,EAAAjN,KAAA2C,GAAAuK,WAAAA,IAGA,IAAAnP,EAAAT,OAAA4C,UAAAnC,WAOAmhB,EAAA4I,SAAA,SAAAC,GACA,MAjFA7I,qBAiFA6I,EACAN,EACA,IAAAvI,GACAnhB,EAAAsH,KAAA0iB,EAAA,GACAhqB,EAAAsH,KAAA0iB,EAAA,IAAA,EACAhqB,EAAAsH,KAAA0iB,EAAA,IAAA,GACAhqB,EAAAsH,KAAA0iB,EAAA,IAAA,MAAA,GAEAhqB,EAAAsH,KAAA0iB,EAAA,GACAhqB,EAAAsH,KAAA0iB,EAAA,IAAA,EACAhqB,EAAAsH,KAAA0iB,EAAA,IAAA,GACAhqB,EAAAsH,KAAA0iB,EAAA,IAAA,MAAA,IAQA7I,EAAAhf,UAAA8nB,OAAA,WACA,OAAA1qB,OAAAC,aACA,IAAAyC,KAAA0C,GACA1C,KAAA0C,KAAA,EAAA,IACA1C,KAAA0C,KAAA,GAAA,IACA1C,KAAA0C,KAAA,GACA,IAAA1C,KAAA2C,GACA3C,KAAA2C,KAAA,EAAA,IACA3C,KAAA2C,KAAA,GAAA,IACA3C,KAAA2C,KAAA,KAQAuc,EAAAhf,UAAAwnB,SAAA,WACA,IAAAO,EAAAjoB,KAAA2C,IAAA,GAGA,OAFA3C,KAAA2C,KAAA3C,KAAA2C,IAAA,EAAA3C,KAAA0C,KAAA,IAAAulB,KAAA,EACAjoB,KAAA0C,IAAA1C,KAAA0C,IAAA,EAAAulB,KAAA,EACAjoB,MAOAkf,EAAAhf,UAAA2gB,SAAA,WACA,IAAAoH,IAAA,EAAAjoB,KAAA0C,IAGA,OAFA1C,KAAA0C,KAAA1C,KAAA0C,KAAA,EAAA1C,KAAA2C,IAAA,IAAAslB,KAAA,EACAjoB,KAAA2C,IAAA3C,KAAA2C,KAAA,EAAAslB,KAAA,EACAjoB,MAOAkf,EAAAhf,UAAAhE,OAAA,WACA,IAAAgsB,EAAAloB,KAAA0C,GACAylB,GAAAnoB,KAAA0C,KAAA,GAAA1C,KAAA2C,IAAA,KAAA,EACAylB,EAAApoB,KAAA2C,KAAA,GACA,OAAA,GAAAylB,EACA,GAAAD,EACAD,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,QAAA,EAAA,EACAC,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,QAAA,EAAA,EACAC,EAAA,IAAA,EAAA,K,6BC1MA,IAAA/c,EAAArP,EA0TA,SAAAykB,EAAA6G,EAAAe,EAAAlW,GACA,IAAA,IAAApT,EAAAD,OAAAC,KAAAspB,GAAA1rB,EAAA,EAAAA,EAAAoC,EAAA7C,SAAAS,EACA2qB,EAAAvoB,EAAApC,MAAAnB,GAAA2W,IACAmV,EAAAvoB,EAAApC,IAAA0rB,EAAAtpB,EAAApC,KACA,OAAA2qB,EAoBA,SAAAgB,EAAA9f,GAEA,SAAA+f,EAAA7W,EAAAuD,GAEA,KAAAjV,gBAAAuoB,GACA,OAAA,IAAAA,EAAA7W,EAAAuD,GAKAnW,OAAAkT,eAAAhS,KAAA,UAAA,CAAAiL,IAAA,WAAA,OAAAyG,KAGA1T,MAAAwqB,kBACAxqB,MAAAwqB,kBAAAxoB,KAAAuoB,GAEAzpB,OAAAkT,eAAAhS,KAAA,QAAA,CAAAN,MAAA1B,QAAAomB,OAAA,KAEAnP,GACAwL,EAAAzgB,KAAAiV,GAWA,OARAsT,EAAAroB,UAAApB,OAAAwP,OAAAtQ,MAAAkC,YAAAqO,YAAAga,EAEAzpB,OAAAkT,eAAAuW,EAAAroB,UAAA,OAAA,CAAA+K,IAAA,WAAA,OAAAzC,KAEA+f,EAAAroB,UAAAzB,SAAA,WACA,OAAAuB,KAAAwI,KAAA,KAAAxI,KAAA0R,SAGA6W,EA7WAld,EAAApP,OAAAH,EAAA,GAGAuP,EAAAtL,aAAAjE,EAAA,GAGAuP,EAAAgV,MAAAvkB,EAAA,GAGAuP,EAAArH,QAAAlI,EAAA,GAGAuP,EAAA/F,KAAAxJ,EAAA,GAGAuP,EAAAod,KAAA3sB,EAAA,GAGAuP,EAAA6T,SAAApjB,EAAA,IAOAuP,EAAAqd,UAAA,oBAAAC,QACAA,QACAA,OAAApiB,SACAoiB,OAAApiB,QAAAqiB,UACAD,OAAApiB,QAAAqiB,SAAAvR,MAOAhM,EAAAsd,OAAAtd,EAAAqd,QAAAC,QACA,oBAAAE,QAAAA,QACA,oBAAAxH,MAAAA,MACArhB,KAQAqL,EAAAsH,WAAA7T,OAAA0T,OAAA1T,OAAA0T,OAAA,IAAA,GAOAnH,EAAAqH,YAAA5T,OAAA0T,OAAA1T,OAAA0T,OAAA,IAAA,GAQAnH,EAAAoE,UAAAqZ,OAAArZ,WAAA,SAAA/P,GACA,MAAA,iBAAAA,GAAAqpB,SAAArpB,IAAApD,KAAAqD,MAAAD,KAAAA,GAQA2L,EAAAmE,SAAA,SAAA9P,GACA,MAAA,iBAAAA,GAAAA,aAAApC,QAQA+N,EAAAmG,SAAA,SAAA9R,GACA,OAAAA,GAAA,iBAAAA,GAWA2L,EAAA2d,MAQA3d,EAAA4d,MAAA,SAAAhT,EAAAvK,GACA,IAAAhM,EAAAuW,EAAAvK,GACA,OAAA,MAAAhM,GAAAuW,EAAAsD,eAAA7N,KACA,iBAAAhM,GAAA,GAAAjD,MAAAoa,QAAAnX,GAAAA,EAAAxD,OAAA4C,OAAAC,KAAAW,GAAAxD,UAeAmP,EAAAiU,OAAA,WACA,IACA,IAAAA,EAAAjU,EAAArH,QAAA,UAAAsb,OAEA,OAAAA,EAAApf,UAAAgpB,UAAA5J,EAAA,KACA,MAAAlb,GAEA,OAAA,MAPA,GAYAiH,EAAA8d,EAAA,KAGA9d,EAAA+d,EAAA,KAOA/d,EAAAoH,UAAA,SAAA4W,GAEA,MAAA,iBAAAA,EACAhe,EAAAiU,OACAjU,EAAA+d,EAAAC,GACA,IAAAhe,EAAA5O,MAAA4sB,GACAhe,EAAAiU,OACAjU,EAAA8d,EAAAE,GACA,oBAAApmB,WACAomB,EACA,IAAApmB,WAAAomB,IASAhe,EAAAie,YAAA,SAAApC,EAAA9pB,GACA,OAAA8pB,IAAA9pB,MAGA8pB,IAAA9pB,KAGA8pB,EAAAhrB,SAAAkB,EAAAlB,QAAAgrB,EAAAqC,UAAA,SAAAC,EAAAlc,GACA,OAAAkc,IAAApsB,EAAAkQ,KACA,IAWAjC,EAAAoe,UAAA,SAAAvC,EAAA9pB,EAAAiD,GACA,GAAA6mB,IAAA9pB,EACA,OAAA,EAEA,IAAA8pB,IAAA9pB,EACA,OAAA,EAEA,IAAAssB,EAAA5qB,OAAAC,KAAAmoB,GACA,OAAAwC,EAAAxtB,SAAA4C,OAAAC,KAAA3B,GAAAlB,QAAAwtB,EAAAH,UAAAlpB,GAAA,GAUAgL,EAAAse,WAAA,SAAAzC,EAAA9pB,GACA,OAAA8pB,IAAA9pB,GAGA,MAAA8pB,GAAA,MAAA9pB,OAKAiO,EAAAuG,OAAAvG,EAAAuG,KAAAgY,OAAA1C,KAAAA,EAAA9S,OAAAhX,KAOAiO,EAAA5O,MAAA,oBAAAwG,WAAAA,WAAAxG,MAmBA4O,EAAAuG,KAAAvG,EAAAsd,OAAAkB,SAAAxe,EAAAsd,OAAAkB,QAAAjY,MACAvG,EAAAsd,OAAA/W,MACAvG,EAAArH,QAAA,QAUAqH,EAAAye,UAAA,SAAApqB,EAAAqM,GACA,GAAAV,EAAAuG,KAAA,CACA,IAAAgU,EAAAva,EAAAuG,KAAAmY,UAAArqB,GAEA,OADAkmB,EAAA1Y,WAAAnB,EACA6Z,EACA,MAAA,iBAAAlmB,EACAwc,SAAAxc,EAAA,IACA,iBAAAA,EACAA,EACA,iBAAAA,EACA,IAAA2L,EAAA6T,SAAAxf,GAAAyN,WACA3R,GAQA6P,EAAA2e,OAAA,mBAOA3e,EAAA4e,QAAA,wBAOA5e,EAAA6e,QAAA,6CAOA7e,EAAA8e,WAAA,SAAAzqB,GACA,OAAAA,EACA2L,EAAA6T,SAAApY,KAAApH,GAAAsoB,SACA3c,EAAA6T,SAAAyI,UASAtc,EAAA+e,aAAA,SAAArC,EAAA7a,GACA,IAAAwS,EAAArU,EAAA6T,SAAA4I,SAAAC,GACA,OAAA1c,EAAAuG,KACAvG,EAAAuG,KAAAyY,SAAA3K,EAAAhd,GAAAgd,EAAA/c,GAAAuK,GACAwS,EAAAvS,WAAAD,IAkBA7B,EAAAoV,MAAAA,EAOApV,EAAA4S,QAAA,SAAA7V,GACA,OAAAA,EAAA,GAAAqJ,cAAArJ,EAAA6T,UAAA,IA0CA5Q,EAAAid,SAAAA,EAmBAjd,EAAAif,cAAAhC,EAAA,iBAoBAjd,EAAAwO,YAAA,SAAAH,GAEA,IADA,IAAA6Q,EAAA,GACA5tB,EAAA,EAAAA,EAAA+c,EAAAxd,SAAAS,EACA4tB,EAAA7Q,EAAA/c,IAAA,EAOA,OAAA,WACA,IAAA,IAAAoC,EAAAD,OAAAC,KAAAiB,MAAArD,EAAAoC,EAAA7C,OAAA,GAAA,EAAAS,IAAAA,EACA,GAAA,IAAA4tB,EAAAxrB,EAAApC,KAAAqD,KAAAjB,EAAApC,MAAAnB,GAAA,OAAAwE,KAAAjB,EAAApC,IACA,OAAAoC,EAAApC,KAiBA0O,EAAA0O,YAAA,SAAAL,GAQA,OAAA,SAAAlR,GACA,IAAA,IAAA7L,EAAA,EAAAA,EAAA+c,EAAAxd,SAAAS,EACA+c,EAAA/c,KAAA6L,UACAxI,KAAA0Z,EAAA/c,MAoBA0O,EAAAgE,cAAA,CACAmb,MAAAltB,OACA8P,MAAA9P,OACAmL,MAAA,GAIA4C,EAAAgI,EAAA,WACA,IAAAiM,EAAAjU,EAAAiU,OAEAA,GAMAjU,EAAA8d,EAAA7J,EAAAxY,OAAA7D,WAAA6D,MAAAwY,EAAAxY,MAEA,SAAApH,EAAA+qB,GACA,OAAA,IAAAnL,EAAA5f,EAAA+qB,IAEApf,EAAA+d,EAAA9J,EAAAoL,aAEA,SAAAzlB,GACA,OAAA,IAAAqa,EAAAra,KAbAoG,EAAA8d,EAAA9d,EAAA+d,EAAA,O,mDCleArtB,EAAAC,QAwHA,SAAAkQ,GAGA,IAAAX,EAAAF,EAAAnN,QAAA,CAAA,KAAAgO,EAAA1D,KAAA,UAAA6C,CACA,oCADAA,CAEA,WAAA,mBACA5B,EAAAyC,EAAA+Z,YACA0E,EAAA,GACAlhB,EAAAvN,QAAAqP,EACA,YAEA,IAAA,IAAA5O,EAAA,EAAAA,EAAAuP,EAAAC,YAAAjQ,SAAAS,EAAA,CACA,IA2BAiuB,EA3BApf,EAAAU,EAAAqB,EAAA5Q,GAAAiI,UACA8I,EAAA,IAAArC,EAAAe,SAAAZ,EAAAhD,MAEAgD,EAAA4C,UAAA7C,EACA,sCAAAmC,EAAAlC,EAAAhD,MAGAgD,EAAAa,KAAAd,EACA,yBAAAmC,EADAnC,CAEA,WAAAsf,EAAArf,EAAA,UAFAD,CAGA,wBAAAmC,EAHAnC,CAIA,gCAxDA,SAAAA,EAAAC,EAAAkC,GAEA,OAAAlC,EAAAjC,SACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAgC,EACA,6BAAAmC,EADAnC,CAEA,WAAAsf,EAAArf,EAAA,gBACA,MACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAD,EACA,6BAAAmC,EADAnC,CAEA,WAAAsf,EAAArf,EAAA,qBACA,MACA,IAAA,OAAAD,EACA,4BAAAmC,EADAnC,CAEA,WAAAsf,EAAArf,EAAA,iBAoCAsf,CAAAvf,EAAAC,EAAA,QACAuf,EAAAxf,EAAAC,EAAA7O,EAAA+Q,EAAA,SAAAqd,CACA,MAGAvf,EAAAI,UAAAL,EACA,yBAAAmC,EADAnC,CAEA,WAAAsf,EAAArf,EAAA,SAFAD,CAGA,gCAAAmC,GACAqd,EAAAxf,EAAAC,EAAA7O,EAAA+Q,EAAA,MAAAqd,CACA,OAIAvf,EAAAqB,SACA+d,EAAAvf,EAAAe,SAAAZ,EAAAqB,OAAArE,MACA,IAAAmiB,EAAAnf,EAAAqB,OAAArE,OAAA+C,EACA,cAAAqf,EADArf,CAEA,WAAAC,EAAAqB,OAAArE,KAAA,qBACAmiB,EAAAnf,EAAAqB,OAAArE,MAAA,EACA+C,EACA,QAAAqf,IAEAG,EAAAxf,EAAAC,EAAA7O,EAAA+Q,IAEAlC,EAAA4C,UAAA7C,EACA,KAEA,OAAAA,EACA,gBA3KA,IAAAH,EAAAtP,EAAA,IACAuP,EAAAvP,EAAA,IAEA,SAAA+uB,EAAArf,EAAAka,GACA,OAAAla,EAAAhD,KAAA,KAAAkd,GAAAla,EAAAI,UAAA,UAAA8Z,EAAA,KAAAla,EAAAa,KAAA,WAAAqZ,EAAA,MAAAla,EAAAjC,QAAA,IAAA,IAAA,YAYA,SAAAwhB,EAAAxf,EAAAC,EAAAC,EAAAiC,GAEA,GAAAlC,EAAAG,aACA,GAAAH,EAAAG,wBAAAP,EAAA,CAAAG,EACA,cAAAmC,EADAnC,CAEA,WAFAA,CAGA,WAAAsf,EAAArf,EAAA,eACA,IAAA,IAAAzM,EAAAD,OAAAC,KAAAyM,EAAAG,aAAAxB,QAAAhN,EAAA,EAAAA,EAAA4B,EAAA7C,SAAAiB,EAAAoO,EACA,WAAAC,EAAAG,aAAAxB,OAAApL,EAAA5B,KACAoO,EACA,QADAA,CAEA,UAEAA,EACA,IADAA,CAEA,8BAAAE,EAAAiC,EAFAnC,CAGA,QAHAA,CAIA,aAAAC,EAAAhD,KAAA,IAJA+C,CAKA,UAGA,OAAAC,EAAAzC,MACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAwC,EACA,0BAAAmC,EADAnC,CAEA,WAAAsf,EAAArf,EAAA,YACA,MACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAD,EACA,kFAAAmC,EAAAA,EAAAA,EAAAA,EADAnC,CAEA,WAAAsf,EAAArf,EAAA,iBACA,MACA,IAAA,QACA,IAAA,SAAAD,EACA,2BAAAmC,EADAnC,CAEA,WAAAsf,EAAArf,EAAA,WACA,MACA,IAAA,OAAAD,EACA,4BAAAmC,EADAnC,CAEA,WAAAsf,EAAArf,EAAA,YACA,MACA,IAAA,SAAAD,EACA,yBAAAmC,EADAnC,CAEA,WAAAsf,EAAArf,EAAA,WACA,MACA,IAAA,QAAAD,EACA,4DAAAmC,EAAAA,EAAAA,EADAnC,CAEA,WAAAsf,EAAArf,EAAA,WAIA,OAAAD,I,mCCrEA,IAAA4I,EAAAnY,EAEAkY,EAAApY,EAAA,IA6BAqY,EAAA,wBAAA,CAEAlI,WAAA,SAAAuJ,GAGA,GAAAA,GAAAA,EAAA,SAAA,CAEA,IAAAhN,EAAAgN,EAAA,SAAAyG,UAAA,EAAAzG,EAAA,SAAAiM,YAAA,MACA1Y,EAAA/I,KAAAqY,OAAA7P,GAEA,GAAAO,EAAA,CAEA,IAAAD,EAAA,KAAA0M,EAAA,SAAA,GACAA,EAAA,SAAA7O,OAAA,GAAA6O,EAAA,SAKA,OAHA1M,EAAA0E,QAAA,OACA1E,EAAA,IAAAA,GAEA9I,KAAAsO,OAAA,CACAxF,SAAAA,EACApJ,MAAAqJ,EAAAnM,OAAAmM,EAAAkD,WAAAuJ,IAAA8L,YAKA,OAAAthB,KAAAiM,WAAAuJ,IAGAlJ,SAAA,SAAAoF,EAAAhD,GAGA,IAUA3F,EATArE,EAAA,GACA8D,EAAA,GAeA,GAZAkG,GAAAA,EAAAjG,MAAAiJ,EAAA5I,UAAA4I,EAAAhS,QAEA8I,EAAAkJ,EAAA5I,SAAAmT,UAAA,EAAAvK,EAAA5I,SAAA2Y,YAAA,MAEA/c,EAAAgN,EAAA5I,SAAAmT,UAAA,EAAA,EAAAvK,EAAA5I,SAAA2Y,YAAA,OACA1Y,EAAA/I,KAAAqY,OAAA7P,MAGAkJ,EAAA3I,EAAAnL,OAAA8T,EAAAhS,SAIAgS,aAAA1R,KAAA4S,QAAAlB,aAAAwC,GAaA,OAAAlU,KAAAsM,SAAAoF,EAAAhD,GAZA,IAAA8G,EAAA9D,EAAAwD,MAAA5I,SAAAoF,EAAAhD,GASA,MALA,KAAAhK,IACAA,EAvBA,wBAyBA8D,EAAA9D,GANA,MAAAgN,EAAAwD,MAAApJ,SAAA,GACA4F,EAAAwD,MAAApJ,SAAAnF,OAAA,GAAA+K,EAAAwD,MAAApJ,UAMA0J,EAAA,SAAAhN,EACAgN,K,2BC/FAzZ,EAAAC,QAAAsY,EAEA,IAEAC,EAFAlJ,EAAAvP,EAAA,IAIAojB,EAAA7T,EAAA6T,SACAjjB,EAAAoP,EAAApP,OACAqJ,EAAA+F,EAAA/F,KAWA,SAAA0lB,EAAA3qB,EAAAkF,EAAAxE,GAMAf,KAAAK,GAAAA,EAMAL,KAAAuF,IAAAA,EAMAvF,KAAAmb,KAAA3f,EAMAwE,KAAAe,IAAAA,EAIA,SAAAkqB,KAUA,SAAAC,EAAA/V,GAMAnV,KAAAub,KAAApG,EAAAoG,KAMAvb,KAAAmrB,KAAAhW,EAAAgW,KAMAnrB,KAAAuF,IAAA4P,EAAA5P,IAMAvF,KAAAmb,KAAAhG,EAAAiW,OAQA,SAAA9W,IAMAtU,KAAAuF,IAAA,EAMAvF,KAAAub,KAAA,IAAAyP,EAAAC,EAAA,EAAA,GAMAjrB,KAAAmrB,KAAAnrB,KAAAub,KAMAvb,KAAAorB,OAAA,KASA,SAAA9c,IACA,OAAAjD,EAAAiU,OACA,WACA,OAAAhL,EAAAhG,OAAA,WACA,OAAA,IAAAiG,OAIA,WACA,OAAA,IAAAD,GAuCA,SAAA+W,EAAAtqB,EAAAC,EAAAC,GACAD,EAAAC,GAAA,IAAAF,EAoBA,SAAAuqB,EAAA/lB,EAAAxE,GACAf,KAAAuF,IAAAA,EACAvF,KAAAmb,KAAA3f,EACAwE,KAAAe,IAAAA,EAqDA,SAAAwqB,EAAAxqB,EAAAC,EAAAC,GACA,KAAAF,EAAA4B,IACA3B,EAAAC,KAAA,IAAAF,EAAA2B,GAAA,IACA3B,EAAA2B,IAAA3B,EAAA2B,KAAA,EAAA3B,EAAA4B,IAAA,MAAA,EACA5B,EAAA4B,MAAA,EAEA,KAAA,IAAA5B,EAAA2B,IACA1B,EAAAC,KAAA,IAAAF,EAAA2B,GAAA,IACA3B,EAAA2B,GAAA3B,EAAA2B,KAAA,EAEA1B,EAAAC,KAAAF,EAAA2B,GA2CA,SAAA8oB,EAAAzqB,EAAAC,EAAAC,GACAD,EAAAC,GAAA,IAAAF,EACAC,EAAAC,EAAA,GAAAF,IAAA,EAAA,IACAC,EAAAC,EAAA,GAAAF,IAAA,GAAA,IACAC,EAAAC,EAAA,GAAAF,IAAA,GApKAuT,EAAAhG,OAAAA,IAOAgG,EAAAtP,MAAA,SAAAC,GACA,OAAA,IAAAoG,EAAA5O,MAAAwI,IAKAoG,EAAA5O,QAAAA,QACA6X,EAAAtP,MAAAqG,EAAAod,KAAAnU,EAAAtP,MAAAqG,EAAA5O,MAAAyD,UAAA4f,WAUAxL,EAAApU,UAAAurB,EAAA,SAAAprB,EAAAkF,EAAAxE,GAGA,OAFAf,KAAAmrB,KAAAnrB,KAAAmrB,KAAAhQ,KAAA,IAAA6P,EAAA3qB,EAAAkF,EAAAxE,GACAf,KAAAuF,KAAAA,EACAvF,OA8BAsrB,EAAAprB,UAAApB,OAAAwP,OAAA0c,EAAA9qB,YACAG,GAxBA,SAAAU,EAAAC,EAAAC,GACA,KAAA,IAAAF,GACAC,EAAAC,KAAA,IAAAF,EAAA,IACAA,KAAA,EAEAC,EAAAC,GAAAF,GA0BAuT,EAAApU,UAAA6f,OAAA,SAAArgB,GAeA,MAdA,iBAAAA,IACAA,EAAAyc,WAAAzc,IAKAM,KAAAuF,MAAAvF,KAAAmrB,KAAAnrB,KAAAmrB,KAAAhQ,KAAA,IAAAmQ,GACA5rB,KAAA,GACA,IAAA,EACAA,EAAA,MAAA,EACAA,EAAA,QAAA,EACAA,EAAA,UAAA,EACA,EACAA,IAAA6F,IACAvF,MASAsU,EAAApU,UAAA8f,MAAA,SAAAtgB,GAIA,MAHA,iBAAAA,IACAA,EAAAyc,WAAAzc,IAEAA,EAAA,EACAM,KAAAyrB,EAAAF,EAAA,GAAArM,EAAA3M,WAAA7S,IACAM,KAAA+f,OAAArgB,IAQA4U,EAAApU,UAAA+f,OAAA,SAAAvgB,GACA,OAAAM,KAAA+f,QAAArgB,GAAA,EAAAA,GAAA,MAAA,IAkCA4U,EAAApU,UAAAwgB,MAZApM,EAAApU,UAAAygB,OAAA,SAAAjhB,GACA,IAAAggB,EAAAR,EAAApY,KAAApH,GACA,OAAAM,KAAAyrB,EAAAF,EAAA7L,EAAAxjB,SAAAwjB,IAkBApL,EAAApU,UAAA0gB,OAAA,SAAAlhB,GACA,IAAAggB,EAAAR,EAAApY,KAAApH,GAAAgoB,WACA,OAAA1nB,KAAAyrB,EAAAF,EAAA7L,EAAAxjB,SAAAwjB,IAQApL,EAAApU,UAAAggB,KAAA,SAAAxgB,GACA,OAAAM,KAAAyrB,EAAAJ,EAAA,EAAA3rB,EAAA,EAAA,IAyBA4U,EAAApU,UAAAkgB,SAVA9L,EAAApU,UAAAigB,QAAA,SAAAzgB,GACA,OAAAM,KAAAyrB,EAAAD,EAAA,EAAA9rB,IAAA,IA6BA4U,EAAApU,UAAA6gB,SAZAzM,EAAApU,UAAA4gB,QAAA,SAAAphB,GACA,IAAAggB,EAAAR,EAAApY,KAAApH,GACA,OAAAM,KAAAyrB,EAAAD,EAAA,EAAA9L,EAAAhd,IAAA+oB,EAAAD,EAAA,EAAA9L,EAAA/c,KAkBA2R,EAAApU,UAAAmgB,MAAA,SAAA3gB,GACA,OAAAM,KAAAyrB,EAAApgB,EAAAgV,MAAAnd,aAAA,EAAAxD,IASA4U,EAAApU,UAAAogB,OAAA,SAAA5gB,GACA,OAAAM,KAAAyrB,EAAApgB,EAAAgV,MAAAzc,cAAA,EAAAlE,IAGA,IAAAgsB,EAAArgB,EAAA5O,MAAAyD,UAAA4Z,IACA,SAAA/Y,EAAAC,EAAAC,GACAD,EAAA8Y,IAAA/Y,EAAAE,IAGA,SAAAF,EAAAC,EAAAC,GACA,IAAA,IAAAtE,EAAA,EAAAA,EAAAoE,EAAA7E,SAAAS,EACAqE,EAAAC,EAAAtE,GAAAoE,EAAApE,IAQA2X,EAAApU,UAAAkN,MAAA,SAAA1N,GACA,IAIAsB,EAJAuE,EAAA7F,EAAAxD,SAAA,EACA,OAAAqJ,GAEA8F,EAAAmE,SAAA9P,KACAsB,EAAAsT,EAAAtP,MAAAO,EAAAtJ,EAAAC,OAAAwD,IACAzD,EAAA2B,OAAA8B,EAAAsB,EAAA,GACAtB,EAAAsB,GAEAhB,KAAA+f,OAAAxa,GAAAkmB,EAAAC,EAAAnmB,EAAA7F,IANAM,KAAAyrB,EAAAJ,EAAA,EAAA,IAcA/W,EAAApU,UAAA/D,OAAA,SAAAuD,GACA,IAAA6F,EAAAD,EAAApJ,OAAAwD,GACA,OAAA6F,EACAvF,KAAA+f,OAAAxa,GAAAkmB,EAAAnmB,EAAAG,MAAAF,EAAA7F,GACAM,KAAAyrB,EAAAJ,EAAA,EAAA,IAQA/W,EAAApU,UAAAsmB,KAAA,WAIA,OAHAxmB,KAAAorB,OAAA,IAAAF,EAAAlrB,MACAA,KAAAub,KAAAvb,KAAAmrB,KAAA,IAAAH,EAAAC,EAAA,EAAA,GACAjrB,KAAAuF,IAAA,EACAvF,MAOAsU,EAAApU,UAAAyrB,MAAA,WAUA,OATA3rB,KAAAorB,QACAprB,KAAAub,KAAAvb,KAAAorB,OAAA7P,KACAvb,KAAAmrB,KAAAnrB,KAAAorB,OAAAD,KACAnrB,KAAAuF,IAAAvF,KAAAorB,OAAA7lB,IACAvF,KAAAorB,OAAAprB,KAAAorB,OAAAjQ,OAEAnb,KAAAub,KAAAvb,KAAAmrB,KAAA,IAAAH,EAAAC,EAAA,EAAA,GACAjrB,KAAAuF,IAAA,GAEAvF,MAOAsU,EAAApU,UAAAumB,OAAA,WACA,IAAAlL,EAAAvb,KAAAub,KACA4P,EAAAnrB,KAAAmrB,KACA5lB,EAAAvF,KAAAuF,IAOA,OANAvF,KAAA2rB,QAAA5L,OAAAxa,GACAA,IACAvF,KAAAmrB,KAAAhQ,KAAAI,EAAAJ,KACAnb,KAAAmrB,KAAAA,EACAnrB,KAAAuF,KAAAA,GAEAvF,MAOAsU,EAAApU,UAAAohB,OAAA,WAIA,IAHA,IAAA/F,EAAAvb,KAAAub,KAAAJ,KACAna,EAAAhB,KAAAuO,YAAAvJ,MAAAhF,KAAAuF,KACAtE,EAAA,EACAsa,GACAA,EAAAlb,GAAAkb,EAAAxa,IAAAC,EAAAC,GACAA,GAAAsa,EAAAhW,IACAgW,EAAAA,EAAAJ,KAGA,OAAAna,GAGAsT,EAAAjB,EAAA,SAAAuY,GACArX,EAAAqX,EACAtX,EAAAhG,OAAAA,IACAiG,EAAAlB,M,2BCrdAtX,EAAAC,QAAAuY,EAGA,IAAAD,EAAAxY,EAAA,KACAyY,EAAArU,UAAApB,OAAAwP,OAAAgG,EAAApU,YAAAqO,YAAAgG,EAEA,IAAAlJ,EAAAvP,EAAA,IAQA,SAAAyY,IACAD,EAAAjP,KAAArF,MAwCA,SAAA6rB,EAAA9qB,EAAAC,EAAAC,GACAF,EAAA7E,OAAA,GACAmP,EAAA/F,KAAAG,MAAA1E,EAAAC,EAAAC,GACAD,EAAAkoB,UACAloB,EAAAkoB,UAAAnoB,EAAAE,GAEAD,EAAAyE,MAAA1E,EAAAE,GA3CAsT,EAAAlB,EAAA,WAOAkB,EAAAvP,MAAAqG,EAAA+d,EAEA7U,EAAAuX,iBAAAzgB,EAAAiU,QAAAjU,EAAAiU,OAAApf,qBAAA+C,YAAA,QAAAoI,EAAAiU,OAAApf,UAAA4Z,IAAAtR,KACA,SAAAzH,EAAAC,EAAAC,GACAD,EAAA8Y,IAAA/Y,EAAAE,IAIA,SAAAF,EAAAC,EAAAC,GACA,GAAAF,EAAAgrB,KACAhrB,EAAAgrB,KAAA/qB,EAAAC,EAAA,EAAAF,EAAA7E,aACA,IAAA,IAAAS,EAAA,EAAAA,EAAAoE,EAAA7E,QACA8E,EAAAC,KAAAF,EAAApE,OAQA4X,EAAArU,UAAAkN,MAAA,SAAA1N,GACA2L,EAAAmE,SAAA9P,KACAA,EAAA2L,EAAA8d,EAAAzpB,EAAA,WACA,IAAA6F,EAAA7F,EAAAxD,SAAA,EAIA,OAHA8D,KAAA+f,OAAAxa,GACAA,GACAvF,KAAAyrB,EAAAlX,EAAAuX,iBAAAvmB,EAAA7F,GACAM,MAeAuU,EAAArU,UAAA/D,OAAA,SAAAuD,GACA,IAAA6F,EAAA8F,EAAAiU,OAAA0M,WAAAtsB,GAIA,OAHAM,KAAA+f,OAAAxa,GACAA,GACAvF,KAAAyrB,EAAAI,EAAAtmB,EAAA7F,GACAM,MAWAuU,EAAAlB,qB5CpFA3X,KAAAC,OAcAC,EAPA,SAAAqwB,EAAAzjB,GACA,IAAA0jB,EAAAxwB,EAAA8M,GAGA,OAFA0jB,GACAzwB,EAAA+M,GAAA,GAAAnD,KAAA6mB,EAAAxwB,EAAA8M,GAAA,CAAAxM,QAAA,IAAAiwB,EAAAC,EAAAA,EAAAlwB,SACAkwB,EAAAlwB,QAGAiwB,CAAAtwB,EAAA,IAGAC,EAAAyP,KAAAsd,OAAA/sB,SAAAA,EAGA,mBAAAgb,QAAAA,OAAAuV,KACAvV,OAAA,CAAA,QAAA,SAAAhF,GAKA,OAJAA,GAAAA,EAAAgY,SACAhuB,EAAAyP,KAAAuG,KAAAA,EACAhW,EAAAyY,aAEAzY,IAIA,iBAAAG,QAAAA,QAAAA,OAAAC,UACAD,OAAAC,QAAAJ,GA/BA","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\n\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\n    // sources through a conflict-free require shim and is again wrapped within an iife that\n    // provides a minification-friendly `undefined` var plus a global \"use strict\" directive\n    // so that minification can remove the directives of each module.\n\n    function $require(name) {\n        var $module = cache[name];\n        if (!$module)\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\n        return $module.exports;\n    }\n\n    var protobuf = $require(entries[0]);\n\n    // Expose globally\n    protobuf.util.global.protobuf = protobuf;\n\n    // Be nice to AMD\n    if (typeof define === \"function\" && define.amd)\n        define([\"long\"], function(Long) {\n            if (Long && Long.isLong) {\n                protobuf.util.Long = Long;\n                protobuf.configure();\n            }\n            return protobuf;\n        });\n\n    // Be nice to CommonJS\n    if (typeof module === \"object\" && module && module.exports)\n        module.exports = protobuf;\n\n})/* end of prelude */","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","\"use strict\";\nmodule.exports = common;\n\nvar commonRe = /\\/|\\./;\n\n/**\n * Provides common type definitions.\n * Can also be used to provide additional google types or your own custom types.\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\n * @returns {undefined}\n * @property {INamespace} google/protobuf/any.proto Any\n * @property {INamespace} google/protobuf/duration.proto Duration\n * @property {INamespace} google/protobuf/empty.proto Empty\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\n * @example\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\n * protobuf.common(\"descriptor\", descriptorJson);\n *\n * // manually provides a custom definition (uses my.foo namespace)\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\n */\nfunction common(name, json) {\n    if (!commonRe.test(name)) {\n        name = \"google/protobuf/\" + name + \".proto\";\n        json = { nested: { \"google.protobuf\": { nested: json } } };\n    }\n    common[name] = json;\n}\n\n// Not provided because of limited use (feel free to discuss or to provide yourself):\n//\n// google/protobuf/descriptor.proto\n// google/protobuf/source_context.proto\n// google/protobuf/type.proto\n//\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\n// the repository or package within the google/protobuf directory.\n\ncommon(\"any\", {\n\n    /**\n     * Properties of a google.protobuf.Any message.\n     * @interface IAny\n     * @type {Object}\n     * @property {string} [typeUrl]\n     * @property {Uint8Array} [bytes]\n     * @memberof common\n     */\n    Any: {\n        fields: {\n            type_url: {\n                type: \"string\",\n                id: 1\n            },\n            value: {\n                type: \"bytes\",\n                id: 2\n            }\n        }\n    }\n});\n\nvar timeType;\n\ncommon(\"duration\", {\n\n    /**\n     * Properties of a google.protobuf.Duration message.\n     * @interface IDuration\n     * @type {Object}\n     * @property {number|Long} [seconds]\n     * @property {number} [nanos]\n     * @memberof common\n     */\n    Duration: timeType = {\n        fields: {\n            seconds: {\n                type: \"int64\",\n                id: 1\n            },\n            nanos: {\n                type: \"int32\",\n                id: 2\n            }\n        }\n    }\n});\n\ncommon(\"timestamp\", {\n\n    /**\n     * Properties of a google.protobuf.Timestamp message.\n     * @interface ITimestamp\n     * @type {Object}\n     * @property {number|Long} [seconds]\n     * @property {number} [nanos]\n     * @memberof common\n     */\n    Timestamp: timeType\n});\n\ncommon(\"empty\", {\n\n    /**\n     * Properties of a google.protobuf.Empty message.\n     * @interface IEmpty\n     * @memberof common\n     */\n    Empty: {\n        fields: {}\n    }\n});\n\ncommon(\"struct\", {\n\n    /**\n     * Properties of a google.protobuf.Struct message.\n     * @interface IStruct\n     * @type {Object}\n     * @property {Object.<string,IValue>} [fields]\n     * @memberof common\n     */\n    Struct: {\n        fields: {\n            fields: {\n                keyType: \"string\",\n                type: \"Value\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.Value message.\n     * @interface IValue\n     * @type {Object}\n     * @property {string} [kind]\n     * @property {0} [nullValue]\n     * @property {number} [numberValue]\n     * @property {string} [stringValue]\n     * @property {boolean} [boolValue]\n     * @property {IStruct} [structValue]\n     * @property {IListValue} [listValue]\n     * @memberof common\n     */\n    Value: {\n        oneofs: {\n            kind: {\n                oneof: [\n                    \"nullValue\",\n                    \"numberValue\",\n                    \"stringValue\",\n                    \"boolValue\",\n                    \"structValue\",\n                    \"listValue\"\n                ]\n            }\n        },\n        fields: {\n            nullValue: {\n                type: \"NullValue\",\n                id: 1\n            },\n            numberValue: {\n                type: \"double\",\n                id: 2\n            },\n            stringValue: {\n                type: \"string\",\n                id: 3\n            },\n            boolValue: {\n                type: \"bool\",\n                id: 4\n            },\n            structValue: {\n                type: \"Struct\",\n                id: 5\n            },\n            listValue: {\n                type: \"ListValue\",\n                id: 6\n            }\n        }\n    },\n\n    NullValue: {\n        values: {\n            NULL_VALUE: 0\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.ListValue message.\n     * @interface IListValue\n     * @type {Object}\n     * @property {Array.<IValue>} [values]\n     * @memberof common\n     */\n    ListValue: {\n        fields: {\n            values: {\n                rule: \"repeated\",\n                type: \"Value\",\n                id: 1\n            }\n        }\n    }\n});\n\ncommon(\"wrappers\", {\n\n    /**\n     * Properties of a google.protobuf.DoubleValue message.\n     * @interface IDoubleValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    DoubleValue: {\n        fields: {\n            value: {\n                type: \"double\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.FloatValue message.\n     * @interface IFloatValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    FloatValue: {\n        fields: {\n            value: {\n                type: \"float\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.Int64Value message.\n     * @interface IInt64Value\n     * @type {Object}\n     * @property {number|Long} [value]\n     * @memberof common\n     */\n    Int64Value: {\n        fields: {\n            value: {\n                type: \"int64\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.UInt64Value message.\n     * @interface IUInt64Value\n     * @type {Object}\n     * @property {number|Long} [value]\n     * @memberof common\n     */\n    UInt64Value: {\n        fields: {\n            value: {\n                type: \"uint64\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.Int32Value message.\n     * @interface IInt32Value\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    Int32Value: {\n        fields: {\n            value: {\n                type: \"int32\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.UInt32Value message.\n     * @interface IUInt32Value\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    UInt32Value: {\n        fields: {\n            value: {\n                type: \"uint32\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.BoolValue message.\n     * @interface IBoolValue\n     * @type {Object}\n     * @property {boolean} [value]\n     * @memberof common\n     */\n    BoolValue: {\n        fields: {\n            value: {\n                type: \"bool\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.StringValue message.\n     * @interface IStringValue\n     * @type {Object}\n     * @property {string} [value]\n     * @memberof common\n     */\n    StringValue: {\n        fields: {\n            value: {\n                type: \"string\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.BytesValue message.\n     * @interface IBytesValue\n     * @type {Object}\n     * @property {Uint8Array} [value]\n     * @memberof common\n     */\n    BytesValue: {\n        fields: {\n            value: {\n                type: \"bytes\",\n                id: 1\n            }\n        }\n    }\n});\n\ncommon(\"field_mask\", {\n\n    /**\n     * Properties of a google.protobuf.FieldMask message.\n     * @interface IDoubleValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    FieldMask: {\n        fields: {\n            paths: {\n                rule: \"repeated\",\n                type: \"string\",\n                id: 1\n            }\n        }\n    }\n});\n\n/**\n * Gets the root definition of the specified common proto file.\n *\n * Bundled definitions are:\n * - google/protobuf/any.proto\n * - google/protobuf/duration.proto\n * - google/protobuf/empty.proto\n * - google/protobuf/field_mask.proto\n * - google/protobuf/struct.proto\n * - google/protobuf/timestamp.proto\n * - google/protobuf/wrappers.proto\n *\n * @param {string} file Proto file name\n * @returns {INamespace|null} Root definition or `null` if not defined\n */\ncommon.get = function get(file) {\n    return common[file] || null;\n};\n","\"use strict\";\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\nvar converter = exports;\n\nvar Enum = require(14),\n    util = require(38);\n\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(d%s){\", prop);\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\n                (\"default:\");\n                gen\n                (\"case%j:\", keys[i])\n                (\"case %i:\", values[keys[i]])\n                    (\"m%s=%j\", prop, values[keys[i]])\n                    (\"break\");\n            } gen\n            (\"}\");\n        } else gen\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n                break;\n            case \"uint32\":\n            case \"fixed32\": gen\n                (\"m%s=d%s>>>0\", prop, prop);\n                break;\n            case \"int32\":\n            case \"sint32\":\n            case \"sfixed32\": gen\n                (\"m%s=d%s|0\", prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"m%s=util.longValue(d%s, %j)\", prop, prop, isUnsigned);\n                break;\n            case \"bytes\": gen\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\n                (\"else if(d%s.length)\", prop)\n                    (\"m%s=d%s\", prop, prop);\n                break;\n            case \"string\": gen\n                (\"m%s=String(d%s)\", prop, prop);\n                break;\n            case \"bool\": gen\n                (\"m%s=Boolean(d%s)\", prop, prop);\n                break;\n            /* default: gen\n                (\"m%s=d%s\", prop, prop);\n                break; */\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.fromObject = function fromObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray;\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\n    (\"if(d instanceof this.ctor)\")\n        (\"return d\");\n    if (!fields.length) return gen\n    (\"return new this.ctor\");\n    gen\n    (\"var m=new this.ctor\");\n    for (var i = 0; i < fields.length; ++i) {\n        var field  = fields[i].resolve(),\n            prop   = util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) { gen\n    (\"if(d%s){\", prop)\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n        (\"m%s={}\", prop)\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\n        (\"}\")\n    (\"}\");\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(d%s){\", prop)\n        (\"if(!Array.isArray(d%s))\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\n        (\"m%s=[]\", prop)\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\n        (\"}\")\n    (\"}\");\n\n        // Non-repeated fields\n        } else {\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\n            if (!(field.resolvedType instanceof Enum)) gen\n    (\"}\");\n        }\n    } return gen\n    (\"return m\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) gen\n            (\"d%s=m%s\", prop, prop);\n        else gen\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\n            (\"else\") // Long-like\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s).toNumber(%s):m%s\", prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\n                break;\n            case \"bytes\": gen\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n                break;\n            default: gen\n            (\"d%s=m%s\", prop, prop);\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @param {boolean} isTypescript true if the code target is typescript (implies parameter defaults and higher order enums)\n * @returns {Codegen} Codegen instance\n */\nconverter.toObject = function toObject(mtype, isTypescript) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    if (!fields.length)\n        return util.codegen()(\"return {}\");\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\");\n\n    if (!isTypescript) {\n        gen(\"if(!o)\")\n            (\"o={}\")\n        (\"var d={}\");\n    } else {\n        gen(\"var d={}\");\n    }\n\n    var repeatedFields = [],\n        mapFields = [],\n        normalFields = [],\n        i = 0;\n    for (; i < fields.length; ++i)\n        if (!fields[i].partOf)\n            ( fields[i].resolve().repeated ? repeatedFields\n            : fields[i].map ? mapFields\n            : normalFields).push(fields[i]);\n\n    if (repeatedFields.length) { gen\n    (\"if(o.arrays||o.defaults){\");\n        for (i = 0; i < repeatedFields.length; ++i) gen\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (mapFields.length) { gen\n    (\"if(o.objects||o.defaults){\");\n        for (i = 0; i < mapFields.length; ++i) gen\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (normalFields.length) { gen\n    (\"if(o.defaults){\");\n        for (i = 0; i < normalFields.length; ++i) {\n            var field = normalFields[i],\n                prop  = util.safeProp(field.name);\n            if (field.resolvedType instanceof Enum && !isTypescript) gen\n        (\"d%s=%j\", prop, field.typeDefault);\n            else if (field.long) gen\n        (\"if(util.Long){\")\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\n        (\"}else\")\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\n            else if (field.bytes) {\n                var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n                gen\n        (\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))\n        (\"else{\")\n            (\"d%s=%s\", prop, arrayDefault)\n            (\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)\n        (\"}\");\n            } else gen\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n        } gen\n    (\"}\");\n    }\n    var hasKs2 = false;\n    for (i = 0; i < fields.length; ++i) {\n        var field = fields[i],\n            index = mtype._fieldsArray.indexOf(field),\n            prop  = util.safeProp(field.name);\n        if (field.map) {\n            if (!hasKs2) { hasKs2 = true; gen\n    (\"var ks2\");\n            } gen\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\n        (\"d%s={}\", prop)\n        (\"for(var j=0;j<ks2.length;++j){\");\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\n        (\"}\");\n        } else if (field.repeated) { gen\n    (\"if(m%s&&m%s.length){\", prop, prop)\n        (\"d%s=[]\", prop)\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\n        (\"}\");\n        } else { gen\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\n        if (field.partOf) gen\n        (\"if(o.oneofs)\")\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n        }\n        gen\n    (\"}\");\n    }\n    return gen\n    (\"return d\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n","\"use strict\";\nmodule.exports = decoder;\n\nvar Enum    = require(14),\n    types   = require(37),\n    util    = require(38);\n\nfunction missing(field) {\n    return \"missing required '\" + field.name + \"'\";\n}\n\n/**\n * Generates a decoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction decoder(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\n    (\"if(!(r instanceof Reader))\")\n        (\"r=Reader.create(r)\")\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k,value\" : \"\"))\n    (\"while(r.pos<c){\")\n        (\"var t=r.uint32()\");\n    if (mtype.group) gen\n        (\"if((t&7)===4)\")\n            (\"break\");\n    gen\n        (\"switch(t>>>3){\");\n\n    var i = 0;\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n            ref   = \"m\" + util.safeProp(field.name); gen\n            (\"case %i: {\", field.id);\n\n        // Map fields\n        if (field.map) { gen\n                (\"if(%s===util.emptyObject || !%s)\", ref, ref)\n                    (\"%s={}\", ref)\n                (\"var c2 = r.uint32()+r.pos\");\n\n            if (types.defaults[field.keyType] !== undefined) gen\n                (\"k=%j\", types.defaults[field.keyType]);\n            else gen\n                (\"k=null\");\n\n            if (types.defaults[type] !== undefined) gen\n                (\"value=%j\", types.defaults[type]);\n            else gen\n                (\"value=null\");\n\n            gen\n                (\"while(r.pos<c2){\")\n                    (\"var tag2=r.uint32()\")\n                    (\"switch(tag2>>>3){\")\n                        (\"case 1: k=r.%s(); break\", field.keyType)\n                        (\"case 2:\");\n\n            if (types.basic[type] === undefined) gen\n                            (\"value=types[%i].decode(r,r.uint32())\", i); // can't be groups\n            else gen\n                            (\"value=r.%s()\", type);\n\n            gen\n                            (\"break\")\n                        (\"default:\")\n                            (\"r.skipType(tag2&7)\")\n                            (\"break\")\n                    (\"}\")\n                (\"}\");\n\n            if (types.long[field.keyType] !== undefined) gen\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=value\", ref);\n            else gen\n                (\"%s[k]=value\", ref);\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n\n                (\"if(!(%s&&%s.length))\", ref, ref)\n                    (\"%s=[]\", ref);\n\n            // Packable (always check for forward and backward compatiblity)\n            if (types.packed[type] !== undefined) gen\n                (\"if((t&7)===2){\")\n                    (\"var c2=r.uint32()+r.pos\")\n                    (\"while(r.pos<c2)\")\n                        (\"%s.push(r.%s())\", ref, type)\n                (\"}else\");\n\n            // Non-packed\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\n                    ? \"%s.push(types[%i].decode(r))\"\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\n            else gen\n                    (\"%s.push(r.%s())\", ref, type);\n\n        // Non-repeated\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\n                ? \"%s=types[%i].decode(r)\"\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\n        else gen\n                (\"%s=r.%s()\", ref, type);\n        gen\n                (\"break\")\n            (\"}\");\n    // Unknown fields\n    } gen\n            (\"default:\")\n                (\"r.skipType(t&7)\")\n                (\"break\")\n\n        (\"}\")\n    (\"}\");\n\n    // Field presence\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\n        var rfield = mtype._fieldsArray[i];\n        if (rfield.required) gen\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\n        (\"throw new util.ProtocolError(%j,{instance:m})\", missing(rfield));\n    }\n\n    return gen\n    (\"return m\");\n    /* eslint-enable no-unexpected-multiline */\n}\n","\"use strict\";\nmodule.exports = encoder;\n\nvar Enum     = require(14),\n    types    = require(37),\n    util     = require(38);\n\n/**\n * Generates a partial message type encoder.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genTypePartial(gen, field, fieldIndex, ref) {\n    return field.resolvedType.group\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\n}\n\n/**\n * Generates an encoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction encoder(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\n    (\"if(!w)\")\n        (\"w=Writer.create()\");\n\n    var i, ref;\n\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\n\n    for (var i = 0; i < fields.length; ++i) {\n        var field    = fields[i].resolve(),\n            index    = mtype._fieldsArray.indexOf(field),\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n            wireType = types.basic[type];\n            ref      = \"m\" + util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) {\n            gen\n    (\"if(%s!=null&&Object.hasOwnProperty.call(m,%j)){\", ref, field.name) // !== undefined && !== null\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n            if (wireType === undefined) gen\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n            else gen\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n            gen\n        (\"}\")\n    (\"}\");\n\n            // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n\n            // Packed repeated\n            if (field.packed && types.packed[type] !== undefined) { gen\n\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\n        (\"for(var i=0;i<%s.length;++i)\", ref)\n            (\"w.%s(%s[i])\", type, ref)\n        (\"w.ldelim()\");\n\n            // Non-packed\n            } else { gen\n\n        (\"for(var i=0;i<%s.length;++i)\", ref);\n                if (wireType === undefined)\n            genTypePartial(gen, field, index, ref + \"[i]\");\n                else gen\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n\n            } gen\n    (\"}\");\n\n        // Non-repeated\n        } else {\n            if (field.optional) gen\n    (\"if(%s!=null&&Object.hasOwnProperty.call(m,%j))\", ref, field.name); // !== undefined && !== null\n\n            if (wireType === undefined)\n        genTypePartial(gen, field, index, ref);\n            else gen\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n\n        }\n    }\n\n    return gen\n    (\"return w\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n","\"use strict\";\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = require(25);\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\n\nvar Namespace = require(24),\n    util = require(38);\n\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n */\nfunction Enum(name, values, options, comment, comments) {\n    ReflectionObject.call(this, name, options);\n\n    if (values && typeof values !== \"object\")\n        throw TypeError(\"values must be an object\");\n\n    /**\n     * Enum values by id.\n     * @type {Object.<number,string>}\n     */\n    this.valuesById = {};\n\n    /**\n     * Enum values by name.\n     * @type {Object.<string,number>}\n     */\n    this.values = Object.create(this.valuesById); // toJSON, marker\n\n    /**\n     * Enum comment text.\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Value comment texts, if any.\n     * @type {Object.<string,string>}\n     */\n    this.comments = comments || {};\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\n    // static and reflection code alike instead of emitting generic object definitions.\n\n    if (values)\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n            var originalKey = keys[i];\n            var key = originalKey;\n\n            if (typeof values[originalKey] === \"number\") { // use forward entries only\n                this.valuesById[ this.values[key] = values[originalKey] ] = key;\n            }\n        }\n}\n\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @param {string} [filename] Optional filename to associate with this object.\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\nEnum.fromJSON = function fromJSON(name, json, filename) {\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n    enm.reserved = json.reserved;\n    enm.filename = filename;\n    return enm;\n};\n\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"  , this.options,\n        \"values\"   , this.values,\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"comment\"  , keepComments ? this.comment : undefined,\n        \"comments\" , keepComments ? this.comments : undefined\n    ]);\n};\n\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\nEnum.prototype.add = function add(name, id, comment) {\n    // utilized by the parser but not by .fromJSON\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (!util.isInteger(id))\n        throw TypeError(\"id must be an integer\");\n\n    if (this.values[name] !== undefined)\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\n\n    if (this.isReservedId(id))\n        throw Error(\"id \" + id + \" is reserved in \" + this);\n\n    if (this.isReservedName(name))\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\n\n    if (this.valuesById[id] !== undefined) {\n        if (!(this.options && this.options.allow_alias))\n            throw Error(\"duplicate id \" + id + \" in \" + this);\n        this.values[name] = id;\n    } else\n        this.valuesById[this.values[name] = id] = name;\n\n    this.comments[name] = comment || null;\n    return this;\n};\n\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\nEnum.prototype.remove = function remove(name) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    var val = this.values[name];\n    if (val == null)\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\n\n    delete this.valuesById[val];\n    delete this.values[name];\n    delete this.comments[name];\n\n    return this;\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n","\"use strict\";\n\nvar Enum = require(14),\n    util = require(38);\n\nfunction genValuePartial_equals(gen, field, fieldIndex, prop, index) {\n  index = index || \"\";\n\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  if (field.resolvedType) {\n    if (index) {\n      if (field.resolvedType instanceof Enum) {\n        gen(\"(a%s && a%s%s)===(b%s && b%s%s)\", prop, prop, index, prop, prop, index);\n      } else gen(\"types[%i].equals(a%s && a%s%s, b%s && b%s%s)\", fieldIndex, prop, prop, index, prop, prop, index);\n    } else {\n      if (field.resolvedType instanceof Enum) {\n        gen(\"a%s===b%s\", prop, prop);\n      } else gen(\"types[%i].equals(a%s, b%s)\", fieldIndex, prop, prop);\n    }\n  } else {\n    switch (field.type) {\n      case \"double\":\n      case \"float\":\n        if (index) {\n          gen(\"a%s && b%s && (a%s%s === b%s%s || (a%s%s != null && b%s%s != null && Math.abs(a%s%s - b%s%s) < Number.EPSILON))\", prop, prop, prop, index, prop, index, prop, index, prop, index, prop, index, prop, index);\n        } else {\n          gen(\"(a%s===b%s || (a%s != null && b%s != null && Math.abs(a%s - b%s) < Number.EPSILON))\", prop, prop, prop, prop, prop, prop);\n        }\n        break;\n      case \"uint32\":\n      case \"fixed32\":\n      case \"int32\":\n      case \"sint32\":\n      case \"sfixed32\":\n      case \"string\":\n      case \"bool\":\n        if (index) {\n          gen(\"(a%s && a%s%s) === (b%s && b%s%s)\", prop, prop, index, prop, prop, index);\n        } else {\n          gen(\"a%s===b%s\", prop, prop);\n        }\n        break;\n      case \"uint64\":\n      case \"int64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        if (index) {\n          gen(\"$util.longEquals(a%s && a%s%s, b%s && b%s%s)\", prop, prop, index, prop, prop, index);\n        } else {\n          gen(\"$util.longEquals(a%s, b%s)\", prop, prop);\n        }\n        break;\n      case \"bytes\":\n        if (index) {\n          gen(\"$util.bytesEquals(a%s && a%s%s, b%s && b%s%s)\", prop, prop, index, prop, prop, index);\n        } else {\n          gen(\"$util.bytesEquals(a%s, b%s)\", prop, prop);\n        }\n        break;\n      default:\n        throw new Error(\"Unexpected type: \" + field.type);\n    }\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message equality check specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nmodule.exports = function equals(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var fields = mtype.fieldsArray;\n  var gen = util.codegen([], mtype.name + \"$equals\");\n\n  gen(\"if (!a || !b) { return a === b }\")(\"if (a === b) { return true }\");\n\n  if (fields.length) {\n    gen(\"return (\");\n\n    for (var i = 0; i < fields.length; ++i) {\n      var field = fields[i].resolve(),\n        prop = util.safeProp(field.name);\n\n      // Map fields\n      if (field.map) {\n        if (i) {\n          gen(\"&&\");\n        }\n\n        gen(\n          \"$util.mapEquals(a%s, b%s, function(keyName) { return !!b%s && (!(keyName in b%s) && \",\n          prop,\n          prop,\n          prop,\n          prop\n        );\n        genValuePartial_equals(\n          gen,\n          field,\n          /* not sorted */ i,\n          prop,\n          \"[keyName]\"\n        );\n        gen(\");})\");\n\n        // Repeated fields\n      } else if (field.repeated) {\n        if (i) {\n          gen(\"&&\");\n        }\n\n        gen(\n          \"(!!a%s && !!b%s && a%s.length === b%s.length && !a%s.find(function (aValue, i){ return (\",\n          prop,\n          prop,\n          prop,\n          prop,\n          prop\n        );\n        genValuePartial_equals(\n          gen,\n          field,\n          /* not sorted */ i,\n          prop,\n          \"[i]\"\n        )(\");}))\");\n\n        // Non-repeated fields\n      } else {\n        if (i) {\n          gen(\"&&\");\n        }\n        genValuePartial_equals(gen, field, /* not sorted */ i, prop);\n      }\n    }\n    gen(\")\");\n  } else {\n    gen(\"return true;\");\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n","\"use strict\";\nmodule.exports = fetch;\n\nvar inquire = require(5);\n\nvar fs = inquire(\"fs\");\n\n/**\n * Options as used by {@link util.fetch}.\n * @interface IFetchOptions\n * @property {boolean} [binary=false] Whether expecting a binary response\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\n */\n\n/**\n * Fetches the contents of a file.\n * @memberof util\n * @param {string} filename File path or url\n * @param {IFetchOptions} options Fetch options\n * @returns {Promise<string|Uint8Array>} Promise\n */\nfunction fetch(filename, options) {\n  if (!options) options = {};\n\n  return new Promise(function (resolve, reject) {\n    function callback(err, data) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    }\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\n    if (!options.xhr && fs && fs.readFile)\n      return fs.readFile(\n        filename,\n        function fetchReadFileCallback(err, contents) {\n          return err && typeof XMLHttpRequest !== \"undefined\"\n            ? fetch.xhr(filename, options, callback)\n            : err\n            ? callback(err)\n            : callback(\n                null,\n                options.binary ? contents : contents.toString(\"utf8\")\n              );\n        }\n      );\n\n    // use the XHR version otherwise.\n    return fetch.xhr(filename, options, callback);\n  });\n}\n\n/**/\nfetch.xhr = function fetch_xhr(filename, options, callback) {\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\n    if (xhr.readyState !== 4) return undefined;\n\n    // local cors security errors return status 0 / empty string, too. afaik this cannot be\n    // reliably distinguished from an actually empty file for security reasons. feel free\n    // to send a pull request if you are aware of a solution.\n    if (xhr.status !== 0 && xhr.status !== 200)\n      return callback(Error(\"status \" + xhr.status));\n\n    // if binary data is expected, make sure that some sort of array is returned, even if\n    // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\n    if (options.binary) {\n      var buffer = xhr.response;\n      if (!buffer) {\n        buffer = [];\n        for (var i = 0; i < xhr.responseText.length; ++i)\n          buffer.push(xhr.responseText.charCodeAt(i) & 255);\n      }\n      return callback(\n        null,\n        typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer\n      );\n    }\n    return callback(null, xhr.responseText);\n  };\n\n  if (options.binary) {\n    // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\n    if (\"overrideMimeType\" in xhr)\n      xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n    xhr.responseType = \"arraybuffer\";\n  }\n\n  xhr.open(\"GET\", filename);\n  xhr.send();\n};\n","\"use strict\";\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(25);\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum  = require(14),\n    types = require(37),\n    util  = require(38);\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n\n    ReflectionObject.call(this, name, options);\n\n    if (!util.isInteger(id) || id < 0)\n        throw TypeError(\"id must be a non-negative integer\");\n\n    if (!util.isString(type))\n        throw TypeError(\"type must be a string\");\n\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n        throw TypeError(\"rule must be a string rule\");\n\n    if (extend !== undefined && !util.isString(extend))\n        throw TypeError(\"extend must be a string\");\n\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is required.\n     * @type {boolean}\n     */\n    this.required = rule === \"required\";\n\n    /**\n     * Whether this field is optional.\n     * @type {boolean}\n     */\n    this.optional = !this.required;\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Internally remembers whether this field is packed.\n     * @type {boolean|null}\n     * @private\n     */\n    this._packed = null;\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        // defaults to packed=true if not explicity set to false\n        if (this._packed === null)\n            this._packed = this.getOption(\"packed\") !== false;\n        return this._packed;\n    }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (name === \"packed\") // clear cached before setting\n        this._packed = null;\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n\n    if (this.resolved)\n        return this;\n\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type)\n            this.typeDefault = null;\n        else // instanceof Enum\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n            delete this.options.packed;\n        if (!Object.keys(this.options).length)\n            this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.long) {\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n        /* istanbul ignore else */\n        if (Object.freeze)\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault))\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map)\n        this.defaultValue = util.emptyObject;\n    else if (this.repeated)\n        this.defaultValue = util.emptyArray;\n    else\n        this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type)\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\")\n        fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\")\n        fieldType = util.decorateEnum(fieldType).name;\n\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n    };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n","\"use strict\";\nvar protobuf = module.exports = require(19);\n\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n  if (typeof root === \"function\") {\n    callback = root;\n    root = new protobuf.Root();\n  } else if (!root) root = new protobuf.Root();\n  return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n// Serialization\nprotobuf.encoder = require(13);\nprotobuf.decoder = require(12);\nprotobuf.verifier = require(41);\nprotobuf.converter = require(11);\n\n// Reflection\nprotobuf.ReflectionObject = require(25);\nprotobuf.Namespace = require(24);\nprotobuf.Root = require(30);\nprotobuf.Enum = require(14);\nprotobuf.Type = require(36);\nprotobuf.Field = require(17);\nprotobuf.OneOf = require(26);\nprotobuf.MapField = require(21);\nprotobuf.Service = require(34);\nprotobuf.Method = require(23);\n\n// Runtime\nprotobuf.Message = require(22);\nprotobuf.wrappers = require(42);\n\n// Utility\nprotobuf.equals = require(15);\nprotobuf.types = require(37);\nprotobuf.util = require(38);\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(43);\nprotobuf.BufferWriter = require(44);\nprotobuf.Reader       = require(28);\nprotobuf.BufferReader = require(29);\n\n// Utility\nprotobuf.util         = require(40);\nprotobuf.rpc          = require(32);\nprotobuf.roots        = require(31);\nprotobuf.configure    = configure;\n\nprotobuf.Long = protobuf.util.Long;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nvar protobuf = module.exports = require(18);\n\nprotobuf.build = \"full\";\n\n// Parser\nprotobuf.tokenize         = require(35);\nprotobuf.parse            = require(27);\nprotobuf.common           = require(10);\n\n// Configure parser\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\n","\"use strict\";\nmodule.exports = MapField;\n\n// extends Field\nvar Field = require(17);\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n\nvar types   = require(37),\n    util    = require(38);\n\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction MapField(name, id, keyType, type, options, comment) {\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n    /* istanbul ignore if */\n    if (!util.isString(keyType))\n        throw TypeError(\"keyType must be a string\");\n\n    /**\n     * Key type.\n     * @type {string}\n     */\n    this.keyType = keyType; // toJSON, marker\n\n    /**\n     * Resolved key type if not a basic type.\n     * @type {ReflectionObject|null}\n     */\n    this.resolvedKeyType = null;\n\n    // Overrides Field#map\n    this.map = true;\n}\n\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */\n\n/**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */\n\n/**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */\nMapField.fromJSON = function fromJSON(name, json) {\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n\n/**\n * Converts this map field to a map field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMapField} Map field descriptor\n */\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"keyType\" , this.keyType,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nMapField.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n    if (types.mapKey[this.keyType] === undefined)\n        throw Error(\"invalid key type: \" + this.keyType);\n\n    return Field.prototype.resolve.call(this);\n};\n\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n\n    // submessage value: decorate the submessage and use its name as the type\n    if (typeof fieldValueType === \"function\")\n        fieldValueType = util.decorateType(fieldValueType).name;\n\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\n    else if (fieldValueType && typeof fieldValueType === \"object\")\n        fieldValueType = util.decorateEnum(fieldValueType).name;\n\n    return function mapFieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n    };\n};\n","\"use strict\";\nmodule.exports = Message;\n\nvar util = require(40);\n\n/**\n * Constructs a new message instance.\n * @classdesc Abstract runtime message.\n * @constructor\n * @param {Properties<T>} [properties] Properties to set\n * @template T extends object = object\n */\nfunction Message(properties) {\n    // not used internally\n    if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            this[keys[i]] = properties[keys[i]];\n}\n\n/**\n * Reference to the reflected type.\n * @name Message.$type\n * @type {Type}\n * @readonly\n */\n\n/**\n * Reference to the reflected type.\n * @name Message#$type\n * @type {Type}\n * @readonly\n */\n\n/*eslint-disable valid-jsdoc*/\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<T>} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.create = function create(properties) {\n    return this.$type.create(properties);\n};\n\n/**\n * Encodes a message of this type.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encode = function encode(message, writer) {\n    return this.$type.encode(message, writer);\n};\n\n/**\n * Encodes a message of this type preceeded by its length as a varint.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.$type.encodeDelimited(message, writer);\n};\n\n/**\n * Decodes a message of this type.\n * @name Message.decode\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decode = function decode(reader) {\n    return this.$type.decode(reader);\n};\n\n/**\n * Decodes a message of this type preceeded by its length as a varint.\n * @name Message.decodeDelimited\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decodeDelimited = function decodeDelimited(reader) {\n    return this.$type.decodeDelimited(reader);\n};\n\n/**\n * Verifies a message of this type.\n * @name Message.verify\n * @function\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\n */\nMessage.verify = function verify(message) {\n    return this.$type.verify(message);\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object\n * @returns {T} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.fromObject = function fromObject(object) {\n    return this.$type.fromObject(object);\n};\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {T} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.toObject = function toObject(message, options) {\n    return this.$type.toObject(message, options);\n};\n\n/**\n * Converts this message to JSON.\n * @returns {Object.<string,*>} JSON object\n */\nMessage.prototype.toJSON = function toJSON() {\n    return this.$type.toObject(this, util.toJSONOptions);\n};\n\n/*eslint-enable valid-jsdoc*/","\"use strict\";\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = require(25);\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\nvar util = require(38);\n\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {\n\n    /* istanbul ignore next */\n    if (util.isObject(requestStream)) {\n        options = requestStream;\n        requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n        options = responseStream;\n        responseStream = undefined;\n    }\n\n    /* istanbul ignore if */\n    if (!(type === undefined || util.isString(type)))\n        throw TypeError(\"type must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(requestType))\n        throw TypeError(\"requestType must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(responseType))\n        throw TypeError(\"responseType must be a string\");\n\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Method type.\n     * @type {string}\n     */\n    this.type = type || \"rpc\"; // toJSON\n\n    /**\n     * Request type.\n     * @type {string}\n     */\n    this.requestType = requestType; // toJSON, marker\n\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.requestStream = requestStream ? true : undefined; // toJSON\n\n    /**\n     * Response type.\n     * @type {string}\n     */\n    this.responseType = responseType; // toJSON\n\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.responseStream = responseStream ? true : undefined; // toJSON\n\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */\n    this.resolvedRequestType = null;\n\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */\n    this.resolvedResponseType = null;\n\n    /**\n     * Comment for this method\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\nMethod.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);\n};\n\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n        \"requestType\"    , this.requestType,\n        \"requestStream\"  , this.requestStream,\n        \"responseType\"   , this.responseType,\n        \"responseStream\" , this.responseStream,\n        \"options\"        , this.options,\n        \"comment\"        , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nMethod.prototype.resolve = function resolve() {\n\n    /* istanbul ignore if */\n    if (this.resolved)\n        return this;\n\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n","\"use strict\";\nmodule.exports = Namespace;\n\n// extends ReflectionObject\nvar ReflectionObject = require(25);\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\n\nvar Field    = require(17),\n    util     = require(38);\n\nvar Type,    // cyclic\n    Service,\n    Enum;\n\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @param {string} [filename] Optional filename to associate with this object.\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */\nNamespace.fromJSON = function fromJSON(name, json, filename) {\n    var ns = new Namespace(name, json.options).addJSON(json.nested, filename);\n    ns.filename = filename;\n    return ns;\n};\n\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */\nfunction arrayToJSON(array, toJSONOptions) {\n    if (!(array && array.length))\n        return undefined;\n    var obj = {};\n    for (var i = 0; i < array.length; ++i)\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\n    return obj;\n}\n\nNamespace.arrayToJSON = arrayToJSON;\n\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedId = function isReservedId(reserved, id) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id)\n                return true;\n    return false;\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedName = function isReservedName(reserved, name) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (reserved[i] === name)\n                return true;\n    return false;\n};\n\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */\nfunction Namespace(name, options) {\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Nested objects by name.\n     * @type {Object.<string,ReflectionObject>|undefined}\n     */\n    this.nested = undefined; // toJSON\n\n    /**\n     * Cached nested objects as an array.\n     * @type {ReflectionObject[]|null}\n     * @private\n     */\n    this._nestedArray = null;\n}\n\nNamespace.prototype.clearCache = function clearCache() {\n    this._nestedArray = null;\n    this._pathMap = null;\n    return this;\n};\n\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\n    get: function() {\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n    }\n});\n\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */\n\n/**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */\n\n/**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\n */\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\n\n/**\n * Converts this namespace to a namespace descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {INamespace} Namespace descriptor\n */\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\n    return util.toObject([\n        \"options\" , this.options,\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\n    ]);\n};\n\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @param {string} [filename] Optional filename to associate with this object.\n * @returns {Namespace} `this`\n */\nNamespace.prototype.addJSON = function addJSON(nestedJson, filename) {\n    var ns = this;\n    /* istanbul ignore else */\n    if (nestedJson) {\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\n            nested = nestedJson[names[i]];\n\n            // most to least likely\n            var fromJSON = nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : nested.id !== undefined\n                && Field.fromJSON;\n\n            if (fromJSON) {\n                ns.add(fromJSON(names[i], nested, filename));\n            } else {\n                ns.define(names[i], nested.nested, filename);\n            }\n        }\n    }\n    return this;\n};\n\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */\nNamespace.prototype.get = function get(name) {\n    if (!Array.isArray(name)) {\n        name = name.split(/\\./g);\n    }\n\n    var pathMap = this._loadPathMap();\n    var ptr = pathMap;\n    var walkPath = name.slice();\n    while (ptr && walkPath.length) {\n        ptr = ptr.children && ptr.children.find(function (child) {\n            return child.name === walkPath[0];\n        });\n        if (ptr) {\n            walkPath.shift();\n        }\n    }\n\n    if (!walkPath.length && ptr) {\n        return ptr.node;\n    }\n\n    // Special case direct lookup of . inclusive field names\n    // This is used primarily for extended fields.\n    if (name.length > 1) {\n        name = name.join(\".\");\n        ptr = pathMap.children.find(function (child) {\n        return child.name === name;\n        });\n        if (ptr) {\n            return ptr.node;\n        }\n    }\n    return null;\n};\n\nNamespace.prototype._loadPathMap = function _loadPathMap() {\n    var pathMap = { children: [] };\n    this.nestedArray.forEach(function (child) {\n        var nameComponents = child.name.split(/\\./g);\n        var ptr = pathMap;\n        nameComponents.slice(0, -1).forEach(function (component) {\n            var existing = ptr.children.find(function (mapEl) {\n                return mapEl.name === component;\n            });\n            if (existing) {\n                ptr = existing;\n            } else {\n                var newEl = { name: component, children: [] };\n                ptr.children.push(newEl);\n                ptr = newEl;\n            }\n        });\n\n        var childPathMap = child._loadPathMap && child._loadPathMap();\n        ptr.children.push({\n            name: nameComponents[nameComponents.length - 1],\n            node: child,\n            children: childPathMap && childPathMap.children,\n        });\n    });\n    return pathMap;\n};\n\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */\nNamespace.prototype.getEnum = function getEnum(name) {\n    if (this.nested && this.nested[name] instanceof Enum)\n        return this.nested[name].values;\n    throw Error(\"no such enum: \" + name);\n};\n\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */\nNamespace.prototype.add = function add(object) {\n\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\n        throw TypeError(\"object must be a valid nested object\");\n\n    if (!this.nested)\n        this.nested = {};\n    else {\n        var prev = this.get(object.name);\n        if (prev) {\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n                // replace plain namespace but keep existing nested elements and options\n                var nested = prev.nestedArray;\n                for (var i = 0; i < nested.length; ++i)\n                    object.add(nested[i]);\n                this.remove(prev);\n                if (!this.nested)\n                    this.nested = {};\n                object.setOptions(prev.options, true);\n\n            } else\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n        }\n    }\n    this.nested[object.name] = object;\n    this.clearCache();\n    object.onAdd(this);\n    return this;\n};\n\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */\nNamespace.prototype.remove = function remove(object) {\n\n    if (!(object instanceof ReflectionObject))\n        throw TypeError(\"object must be a ReflectionObject\");\n    if (object.parent !== this)\n        throw Error(object + \" is not a member of \" + this);\n\n    delete this.nested[object.name];\n    if (!Object.keys(this.nested).length)\n        this.nested = undefined;\n\n    this.clearCache();\n\n    object.onRemove(this);\n    return this;\n};\n\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @param {string} [filename] Filename defining namespace\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */\nNamespace.prototype.define = function define(path, json, filename) {\n\n    if (Array.isArray(path))\n        path = path.join(\".\");\n    else if (!util.isString(path))\n        throw TypeError(\"illegal path\");\n    if (path.startsWith(\".\"))\n        throw Error(\"path must be relative\");\n\n    var ptr = this;\n    if (ptr.nested && ptr.nested[path]) {\n        ptr = ptr.nested[path];\n        ptr.filenames.push(filename);\n        if (!(ptr instanceof Namespace))\n            throw Error(\"path conflicts with non-namespace objects\");\n    } else {\n        ptr.add(ptr = new Namespace(path));\n        ptr.filename = filename;\n        ptr.filenames = [ filename ];\n    }\n    if (json) {\n      ptr.addJSON(json, filename);\n    }\n    return ptr;\n};\n\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */\nNamespace.prototype.resolveAll = function resolveAll() {\n    var nested = this.nestedArray, i = 0;\n    while (i < nested.length)\n        if (nested[i] instanceof Namespace)\n            nested[i++].resolveAll();\n        else\n            nested[i++].resolve();\n    return this.resolve();\n};\n\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n\n    /* istanbul ignore next */\n    if (typeof filterTypes === \"boolean\") {\n        parentAlreadyChecked = filterTypes;\n        filterTypes = undefined;\n    } else if (filterTypes && !Array.isArray(filterTypes))\n        filterTypes = [ filterTypes ];\n\n    if (util.isString(path) && path.length) {\n        if (path === \".\")\n            return this.root;\n        path = path.split(\".\");\n    } else if (!path.length)\n        return this;\n\n    // Start at root if path is absolute\n    if (path[0] === \"\")\n        return this.root.lookup(path.slice(1), filterTypes);\n\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\n    var found = this.get(path);\n    if (found) {\n        if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\n            return found;\n\n    // Otherwise try each nested namespace\n    } else\n        for (var i = 0; i < this.nestedArray.length; ++i)\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\n                return found;\n\n    // If there hasn't been a match, try again at the parent\n    if (this.parent === null || parentAlreadyChecked)\n        return null;\n    return this.parent.lookup(path, filterTypes);\n};\n\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */\n// lookup(path: string, [parentAlreadyChecked: boolean])\n\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */\nNamespace.prototype.lookupType = function lookupType(path) {\n    var found = this.lookup(path, [ Type ]);\n    if (!found)\n        throw Error(\"no such type: \" + path);\n    return found;\n};\n\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\n    var found = this.lookup(path, [ Enum ]);\n    if (!found)\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n    var found = this.lookup(path, [ Type, Enum ]);\n    if (!found)\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */\nNamespace.prototype.lookupService = function lookupService(path) {\n    var found = this.lookup(path, [ Service ]);\n    if (!found)\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\n    return found;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function(Type_, Service_, Enum_) {\n    Type    = Type_;\n    Service = Service_;\n    Enum    = Enum_;\n};\n","\"use strict\";\nmodule.exports = ReflectionObject;\n\nReflectionObject.className = \"ReflectionObject\";\n\nvar util = require(38);\n\nvar Root; // cyclic\n\n/**\n * Constructs a new reflection object instance.\n * @classdesc Base class of all reflection objects.\n * @constructor\n * @param {string} name Object name\n * @param {Object.<string,*>} [options] Declared options\n * @abstract\n */\nfunction ReflectionObject(name, options) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (options && !util.isObject(options))\n        throw TypeError(\"options must be an object\");\n\n    /**\n     * Options.\n     * @type {Object.<string,*>|undefined}\n     */\n    this.options = options; // toJSON\n\n    /**\n     * Parsed Options.\n     * @type {Array.<Object.<string,*>>|undefined}\n     */\n    this.parsedOptions = null;\n\n    /**\n     * Unique name within its namespace.\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * Parent namespace.\n     * @type {Namespace|null}\n     */\n    this.parent = null;\n\n    /**\n     * Whether already resolved or not.\n     * @type {boolean}\n     */\n    this.resolved = false;\n\n    /**\n     * Comment text, if any.\n     * @type {string|null}\n     */\n    this.comment = null;\n\n    /**\n     * Defining file name.\n     * @type {string|null}\n     */\n    this.filename = null;\n}\n\nObject.defineProperties(ReflectionObject.prototype, {\n\n    /**\n     * Reference to the root namespace.\n     * @name ReflectionObject#root\n     * @type {Root}\n     * @readonly\n     */\n    root: {\n        get: function() {\n            var ptr = this;\n            while (ptr.parent !== null)\n                ptr = ptr.parent;\n            return ptr;\n        }\n    },\n\n    /**\n     * Full name including leading dot.\n     * @name ReflectionObject#fullName\n     * @type {string}\n     * @readonly\n     */\n    fullName: {\n        get: function() {\n            var path = [ this.name ],\n                ptr = this.parent;\n            while (ptr && !ptr.isFileRoot) {\n                path.unshift(ptr.name);\n                ptr = ptr.parent;\n            }\n            return path.join(\".\");\n        }\n    }\n});\n\n/**\n * Converts this reflection object to its descriptor representation.\n * @returns {Object.<string,*>} Descriptor\n * @abstract\n */\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\n    throw Error(); // not implemented, shouldn't happen\n};\n\n/**\n * Called when this object is added to a parent.\n * @param {ReflectionObject} parent Parent added to\n * @returns {undefined}\n */\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n    if (this.parent && this.parent !== parent)\n        this.parent.remove(this);\n    this.parent = parent;\n    this.resolved = false;\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleAdd(this);\n};\n\n/**\n * Called when this object is removed from a parent.\n * @param {ReflectionObject} parent Parent removed from\n * @returns {undefined}\n */\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleRemove(this);\n    this.parent = null;\n    this.resolved = false;\n};\n\n/**\n * Resolves this objects type references.\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n    if (this.root instanceof Root)\n        this.resolved = true; // only if part of a root\n    return this;\n};\n\n/**\n * Gets an option value.\n * @param {string} name Option name\n * @returns {*} Option value or `undefined` if not set\n */\nReflectionObject.prototype.getOption = function getOption(name) {\n    if (this.options)\n        return this.options[name];\n    return undefined;\n};\n\n/**\n * Sets an option.\n * @param {string} name Option name\n * @param {*} value Option value\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\n        (this.options || (this.options = {}))[name] = value;\n    return this;\n};\n\n/**\n * Sets a parsed option.\n * @param {string} name parsed Option name\n * @param {*} value Option value\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\n    if (!this.parsedOptions) {\n        this.parsedOptions = [];\n    }\n    var parsedOptions = this.parsedOptions;\n    if (propName) {\n        // If setting a sub property of an option then try to merge it\n        // with an existing option\n        var opt = parsedOptions.find(function (opt) {\n            return Object.prototype.hasOwnProperty.call(opt, name);\n        });\n        if (opt) {\n            // If we found an existing option - just merge the property value\n            var newValue = opt[name];\n            util.setProperty(newValue, propName, value);\n        } else {\n            // otherwise, create a new option, set it's property and add it to the list\n            opt = {};\n            opt[name] = util.setProperty({}, propName, value);\n            parsedOptions.push(opt);\n        }\n    } else {\n        // Always create a new option when setting the value of the option itself\n        var newOpt = {};\n        newOpt[name] = value;\n        parsedOptions.push(newOpt);\n    }\n    return this;\n};\n\n/**\n * Sets multiple options.\n * @param {Object.<string,*>} options Options to set\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n    if (options)\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\n    return this;\n};\n\n/**\n * Converts this instance to its string representation.\n * @returns {string} Class name[, space, full name]\n */\nReflectionObject.prototype.toString = function toString() {\n    var className = this.constructor.className,\n        fullName  = this.fullName;\n    if (fullName.length)\n        return className + \" \" + fullName;\n    return className;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nReflectionObject._configure = function(Root_) {\n    Root = Root_;\n};\n","\"use strict\";\nmodule.exports = OneOf;\n\n// extends ReflectionObject\nvar ReflectionObject = require(25);\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\n\nvar Field = require(17),\n    util  = require(38);\n\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction OneOf(name, fieldNames, options, comment) {\n    if (!Array.isArray(fieldNames)) {\n        options = fieldNames;\n        fieldNames = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n\n    /* istanbul ignore if */\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\n        throw TypeError(\"fieldNames must be an Array\");\n\n    /**\n     * Field names that belong to this oneof.\n     * @type {string[]}\n     */\n    this.oneof = fieldNames || []; // toJSON, marker\n\n    /**\n     * Fields that belong to this oneof as an array for iteration.\n     * @type {Field[]}\n     * @readonly\n     */\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */\n\n/**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */\nOneOf.fromJSON = function fromJSON(name, json) {\n    return new OneOf(name, json.oneof, json.options, json.comment);\n};\n\n/**\n * Converts this oneof to a oneof descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IOneOf} Oneof descriptor\n */\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , this.options,\n        \"oneof\"   , this.oneof,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */\nfunction addFieldsToParent(oneof) {\n    if (oneof.parent)\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\n            if (!oneof.fieldsArray[i].parent)\n                oneof.parent.add(oneof.fieldsArray[i]);\n}\n\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */\nOneOf.prototype.add = function add(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    if (field.parent && field.parent !== this.parent)\n        field.parent.remove(field);\n    this.oneof.push(field.name);\n    this.fieldsArray.push(field);\n    field.partOf = this; // field.parent remains null\n    addFieldsToParent(this);\n    return this;\n};\n\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */\nOneOf.prototype.remove = function remove(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    var index = this.fieldsArray.indexOf(field);\n\n    /* istanbul ignore if */\n    if (index < 0)\n        throw Error(field + \" is not a member of \" + this);\n\n    this.fieldsArray.splice(index, 1);\n    index = this.oneof.indexOf(field.name);\n\n    /* istanbul ignore else */\n    if (index > -1) // theoretical\n        this.oneof.splice(index, 1);\n\n    field.partOf = null;\n    return this;\n};\n\n/**\n * @override\n */\nOneOf.prototype.onAdd = function onAdd(parent) {\n    ReflectionObject.prototype.onAdd.call(this, parent);\n    var self = this;\n    // Collect present fields\n    for (var i = 0; i < this.oneof.length; ++i) {\n        var field = parent.get(this.oneof[i]);\n        if (field && !field.partOf) {\n            field.partOf = self;\n            self.fieldsArray.push(field);\n        }\n    }\n    // Add not yet present fields\n    addFieldsToParent(this);\n};\n\n/**\n * @override\n */\nOneOf.prototype.onRemove = function onRemove(parent) {\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\n        if ((field = this.fieldsArray[i]).parent)\n            field.parent.remove(field);\n    ReflectionObject.prototype.onRemove.call(this, parent);\n};\n\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */\n\n/**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */\nOneOf.d = function decorateOneOf() {\n    var fieldNames = new Array(arguments.length),\n        index = 0;\n    while (index < arguments.length)\n        fieldNames[index] = arguments[index++];\n    return function oneOfDecorator(prototype, oneofName) {\n        util.decorateType(prototype.constructor)\n            .add(new OneOf(oneofName, fieldNames));\n        Object.defineProperty(prototype, oneofName, {\n            get: util.oneOfGetter(fieldNames),\n            set: util.oneOfSetter(fieldNames)\n        });\n    };\n};\n","\"use strict\";\nmodule.exports = parse;\n\nparse.filename = null;\nparse.defaults = { keepCase: false };\n\nvar tokenize  = require(35),\n    Root      = require(30),\n    Type      = require(36),\n    Field     = require(17),\n    MapField  = require(21),\n    OneOf     = require(26),\n    Enum      = require(14),\n    Service   = require(34),\n    Method    = require(23),\n    types     = require(37),\n    util      = require(38);\n\nvar base10Re    = /^[1-9][0-9]*$/,\n    base10NegRe = /^-?[1-9][0-9]*$/,\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\n    base8Re     = /^0[0-7]+$/,\n    base8NegRe  = /^-?0[0-7]+$/,\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\n    fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\n\n/**\n * Result object returned from {@link parse}.\n * @interface IParserResult\n * @property {string|undefined} package Package name, if declared\n * @property {string[]|undefined} imports Imports, if any\n * @property {string[]|undefined} weakImports Weak imports, if any\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\n * @property {Root} root Populated root instance\n */\n\n/**\n * Options modifying the behavior of {@link parse}.\n * @interface IParseOptions\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\n * @property {boolean} [flattenNamespace=false] Treat foo.bar as a single namespace vs. two nested. The type of target should dictate this flag.\n */\n\n/**\n * Options modifying the behavior of JSON serialization.\n * @interface IToJSONOptions\n * @property {boolean} [keepComments=false] Serializes comments.\n */\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @param {string} source Source contents\n * @param {Root} root Root to populate\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n */\nfunction parse(source, root, options) {\n    /* eslint-disable callback-return */\n    if (!(root instanceof Root)) {\n        options = root;\n        root = new Root();\n        root.filename = parse.filename;\n    }\n    if (!options)\n        options = parse.defaults;\n\n    var preferTrailingComment = options.preferTrailingComment || false;\n    var tn = tokenize(source, options.alternateCommentMode || false),\n        next = tn.next,\n        push = tn.push,\n        peek = tn.peek,\n        skip = tn.skip,\n        cmnt = tn.cmnt;\n\n    var head = true,\n        pkg,\n        imports,\n        weakImports,\n        syntax,\n        isProto3 = false;\n\n    var ptr = root;\n\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\n\n    /* istanbul ignore next */\n    function illegal(token, name, insideTryCatch) {\n        var filename = parse.filename;\n        if (!insideTryCatch)\n            parse.filename = null;\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\n    }\n\n    function readString() {\n        var values = [],\n            token;\n        do {\n            /* istanbul ignore if */\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\n                throw illegal(token);\n\n            values.push(next());\n            skip(token);\n            token = peek();\n        } while (token === \"\\\"\" || token === \"'\");\n        return values.join(\"\");\n    }\n\n    function readValue(acceptTypeRef) {\n        var token = next();\n        switch (token) {\n            case \"'\":\n            case \"\\\"\":\n                push(token);\n                return readString();\n            case \"true\": case \"TRUE\":\n                return true;\n            case \"false\": case \"FALSE\":\n                return false;\n        }\n        try {\n            return parseNumber(token, /* insideTryCatch */ true);\n        } catch (e) {\n\n            /* istanbul ignore else */\n            if (acceptTypeRef && typeRefRe.test(token))\n                return token;\n\n            /* istanbul ignore next */\n            throw illegal(token, \"value\");\n        }\n    }\n\n    function readRanges(target, acceptStrings) {\n        var token, start;\n        do {\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\n                target.push(readString());\n            else\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\n        } while (skip(\",\", true));\n        skip(\";\");\n    }\n\n    function parseNumber(token, insideTryCatch) {\n        var sign = 1;\n        if (token.charAt(0) === \"-\") {\n            sign = -1;\n            token = token.substring(1);\n        }\n        switch (token) {\n            case \"inf\": case \"INF\": case \"Inf\":\n                return sign * Infinity;\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\n                return NaN;\n            case \"0\":\n                return 0;\n        }\n        if (base10Re.test(token))\n            return sign * parseInt(token, 10);\n        if (base16Re.test(token))\n            return sign * parseInt(token, 16);\n        if (base8Re.test(token))\n            return sign * parseInt(token, 8);\n\n        /* istanbul ignore else */\n        if (numberRe.test(token))\n            return sign * parseFloat(token);\n\n        /* istanbul ignore next */\n        throw illegal(token, \"number\", insideTryCatch);\n    }\n\n    function parseId(token, acceptNegative) {\n        switch (token) {\n            case \"max\": case \"MAX\": case \"Max\":\n                return 536870911;\n            case \"0\":\n                return 0;\n        }\n\n        /* istanbul ignore if */\n        if (!acceptNegative && token.charAt(0) === \"-\")\n            throw illegal(token, \"id\");\n\n        if (base10NegRe.test(token))\n            return parseInt(token, 10);\n        if (base16NegRe.test(token))\n            return parseInt(token, 16);\n\n        /* istanbul ignore else */\n        if (base8NegRe.test(token))\n            return parseInt(token, 8);\n\n        /* istanbul ignore next */\n        throw illegal(token, \"id\");\n    }\n\n    function parsePackage() {\n\n        /* istanbul ignore if */\n        if (pkg !== undefined)\n            throw illegal(\"package\");\n\n        pkg = next();\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(pkg))\n            throw illegal(pkg, \"name\");\n\n        if (options.flattenNamespace) {\n            ptr = ptr.define(pkg, false, parse.filename);\n        } else {\n            pkg.split(/\\./g).forEach(function (pkgComponent) {\n                ptr = ptr.define(pkgComponent, false, parse.filename);\n            });\n        }\n        skip(\";\");\n    }\n\n    function parseImport() {\n        var token = peek();\n        var whichImports;\n        switch (token) {\n            case \"weak\":\n                whichImports = weakImports || (weakImports = []);\n                next();\n                break;\n            case \"public\":\n                next();\n                // eslint-disable-line no-fallthrough\n            default:\n                whichImports = imports || (imports = []);\n                break;\n        }\n        token = readString();\n        skip(\";\");\n        whichImports.push(token);\n    }\n\n    function parseSyntax() {\n        skip(\"=\");\n        syntax = readString();\n        isProto3 = syntax === \"proto3\";\n\n        /* istanbul ignore if */\n        if (!isProto3 && syntax !== \"proto2\")\n            throw illegal(syntax, \"syntax\");\n\n        skip(\";\");\n    }\n\n    function parseCommon(parent, token) {\n        switch (token) {\n\n            case \"option\":\n                parseOption(parent, token);\n                skip(\";\");\n                return true;\n\n            case \"message\":\n                parseType(parent, token);\n                return true;\n\n            case \"enum\":\n                parseEnum(parent, token);\n                return true;\n\n            case \"service\":\n                parseService(parent, token);\n                return true;\n\n            case \"extend\":\n                parseExtension(parent, token);\n                return true;\n        }\n        return false;\n    }\n\n    function ifBlock(obj, fnIf, fnElse) {\n        var trailingLine = tn.line;\n        if (obj) {\n            if(typeof obj.comment !== \"string\") {\n              obj.comment = cmnt(); // try block-type comment\n            }\n            obj.filename = parse.filename;\n        }\n        if (skip(\"{\", true)) {\n            var token;\n            while ((token = next()) !== \"}\")\n                fnIf(token);\n            skip(\";\", true);\n        } else {\n            if (fnElse)\n                fnElse();\n            skip(\";\");\n            if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment))\n                obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\n        }\n    }\n\n    function parseType(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"type name\");\n\n        var type = new Type(token);\n        type.filename = parse.filename;\n        ifBlock(type, function parseType_block(token) {\n            if (parseCommon(type, token))\n                return;\n\n            switch (token) {\n\n                case \"map\":\n                    parseMapField(type, token);\n                    break;\n\n                case \"required\":\n                case \"optional\":\n                case \"repeated\":\n                    parseField(type, token);\n                    break;\n\n                case \"oneof\":\n                    parseOneOf(type, token);\n                    break;\n\n                case \"extensions\":\n                    readRanges(type.extensions || (type.extensions = []));\n                    break;\n\n                case \"reserved\":\n                    readRanges(type.reserved || (type.reserved = []), true);\n                    break;\n\n                default:\n                    /* istanbul ignore if */\n                    if (!isProto3 || !typeRefRe.test(token))\n                        throw illegal(token);\n\n                    push(token);\n                    parseField(type, \"optional\");\n                    break;\n            }\n        });\n        parent.add(type);\n    }\n\n    function parseField(parent, rule, extend) {\n        var type = next();\n        if (type === \"group\") {\n            parseGroup(parent, rule);\n            return;\n        }\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(type))\n            throw illegal(type, \"type\");\n\n        var name = next();\n\n        /* istanbul ignore if */\n        if (!nameRe.test(name))\n            throw illegal(name, \"name\");\n\n        name = applyCase(name);\n        skip(\"=\");\n\n        var field = new Field(name, parseId(next()), type, rule, extend);\n        field.filename = parse.filename;\n        ifBlock(field, function parseField_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(field, token);\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        }, function parseField_line() {\n            parseInlineOptions(field);\n        });\n        parent.add(field);\n\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\n        // all known packable types and anything that could be an enum (= is not a basic type).\n        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\n    }\n\n    function parseGroup(parent, rule) {\n        var name = next();\n\n        /* istanbul ignore if */\n        if (!nameRe.test(name))\n            throw illegal(name, \"name\");\n\n        var fieldName = util.lcFirst(name);\n        if (name === fieldName)\n            name = util.ucFirst(name);\n        skip(\"=\");\n        var id = parseId(next());\n        var type = new Type(name);\n        type.group = true;\n        type.filename = parse.filename;\n        var field = new Field(fieldName, id, name, rule);\n        field.filename = parse.filename;\n        ifBlock(type, function parseGroup_block(token) {\n            switch (token) {\n\n                case \"option\":\n                    parseOption(type, token);\n                    skip(\";\");\n                    break;\n\n                case \"required\":\n                case \"optional\":\n                case \"repeated\":\n                    parseField(type, token);\n                    break;\n\n                /* istanbul ignore next */\n                default:\n                    throw illegal(token); // there are no groups with proto3 semantics\n            }\n        });\n        parent.add(type)\n              .add(field);\n    }\n\n    function parseMapField(parent) {\n        skip(\"<\");\n        var keyType = next();\n\n        /* istanbul ignore if */\n        if (types.mapKey[keyType] === undefined)\n            throw illegal(keyType, \"type\");\n\n        skip(\",\");\n        var valueType = next();\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(valueType))\n            throw illegal(valueType, \"type\");\n\n        skip(\">\");\n        var name = next();\n\n        /* istanbul ignore if */\n        if (!nameRe.test(name))\n            throw illegal(name, \"name\");\n\n        skip(\"=\");\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\n        field.filename = parse.filename;\n        ifBlock(field, function parseMapField_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(field, token);\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        }, function parseMapField_line() {\n            parseInlineOptions(field);\n        });\n        parent.add(field);\n    }\n\n    function parseOneOf(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var oneof = new OneOf(applyCase(token));\n        oneof.filename = parse.filename;\n        ifBlock(oneof, function parseOneOf_block(token) {\n            if (token === \"option\") {\n                parseOption(oneof, token);\n                skip(\";\");\n            } else {\n                push(token);\n                parseField(oneof, \"optional\");\n            }\n        });\n        parent.add(oneof);\n    }\n\n    function parseEnum(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var enm = new Enum(token);\n        enm.filename = parse.filename;\n        ifBlock(enm, function parseEnum_block(token) {\n          switch(token) {\n            case \"option\":\n              parseOption(enm, token);\n              skip(\";\");\n              break;\n\n            case \"reserved\":\n              readRanges(enm.reserved || (enm.reserved = []), true);\n              break;\n\n            default:\n              parseEnumValue(enm, token);\n          }\n        });\n        parent.add(enm);\n    }\n\n    function parseEnumValue(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token))\n            throw illegal(token, \"name\");\n\n        skip(\"=\");\n        var value = parseId(next(), true),\n            dummy = {};\n        ifBlock(dummy, function parseEnumValue_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(dummy, token); // skip\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        }, function parseEnumValue_line() {\n            parseInlineOptions(dummy); // skip\n        });\n        parent.add(token, value, dummy.comment);\n    }\n\n    function parseOption(parent, token) {\n        var isCustom = skip(\"(\", true);\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var name = token;\n        var option = name;\n        var propName;\n\n        if (isCustom) {\n            skip(\")\");\n            name = \"(\" + name + \")\";\n            option = name;\n            token = peek();\n            if (fqTypeRefRe.test(token)) {\n                propName = token.substr(1); //remove '.' before property name\n                name += token;\n                next();\n            }\n        }\n        skip(\"=\");\n        var optionValue = parseOptionValue(parent, name);\n        setParsedOption(parent, option, optionValue, propName);\n    }\n\n    function parseOptionValue(parent, name) {\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\n            var result = {};\n            while (!skip(\"}\", true)) {\n                /* istanbul ignore if */\n                if (!nameRe.test(token = next()))\n                    throw illegal(token, \"name\");\n\n                var value;\n                var propName = token;\n                if (peek() === \"{\")\n                    value = parseOptionValue(parent, name + \".\" + token);\n                else {\n                    skip(\":\");\n                    if (peek() === \"{\")\n                        value = parseOptionValue(parent, name + \".\" + token);\n                    else {\n                        value = readValue(true);\n                        setOption(parent, name + \".\" + token, value);\n                    }\n                }\n                var prevValue = result[propName];\n                if (prevValue)\n                    value = [].concat(prevValue).concat(value);\n                result[propName] = value;\n                skip(\",\", true);\n            }\n            return result;\n        }\n\n        var simpleValue = readValue(true);\n        setOption(parent, name, simpleValue);\n        return simpleValue;\n        // Does not enforce a delimiter to be universal\n    }\n\n    function setOption(parent, name, value) {\n        if (parent.setOption)\n            parent.setOption(name, value);\n    }\n\n    function setParsedOption(parent, name, value, propName) {\n        if (parent.setParsedOption)\n            parent.setParsedOption(name, value, propName);\n    }\n\n    function parseInlineOptions(parent) {\n        if (skip(\"[\", true)) {\n            do {\n                parseOption(parent, \"option\");\n            } while (skip(\",\", true));\n            skip(\"]\");\n        }\n        return parent;\n    }\n\n    function parseService(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"service name\");\n\n        var service = new Service(token);\n        service.filename = parse.filename;\n        ifBlock(service, function parseService_block(token) {\n            if (parseCommon(service, token))\n                return;\n\n            /* istanbul ignore else */\n            if (token === \"rpc\")\n                parseMethod(service, token);\n            else\n                throw illegal(token);\n        });\n        parent.add(service);\n    }\n\n    function parseMethod(parent, token) {\n        // Get the comment of the preceding line now (if one exists) in case the\n        // method is defined across multiple lines.\n        var commentText = cmnt();\n\n        var type = token;\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var name = token,\n            requestType, requestStream,\n            responseType, responseStream;\n\n        skip(\"(\");\n        if (skip(\"stream\", true))\n            requestStream = true;\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token);\n\n        requestType = token;\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\n        if (skip(\"stream\", true))\n            responseStream = true;\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token);\n\n        responseType = token;\n        skip(\")\");\n\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\n        method.filename = parse.filename;\n        method.comment = commentText;\n        ifBlock(method, function parseMethod_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(method, token);\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        });\n        parent.add(method);\n    }\n\n    function parseExtension(parent, token) {\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token, \"reference\");\n\n        var reference = token;\n        ifBlock(null, function parseExtension_block(token) {\n            switch (token) {\n\n                case \"required\":\n                case \"repeated\":\n                case \"optional\":\n                    parseField(parent, token, reference);\n                    break;\n\n                default:\n                    /* istanbul ignore if */\n                    if (!isProto3 || !typeRefRe.test(token))\n                        throw illegal(token);\n                    push(token);\n                    parseField(parent, \"optional\", reference);\n                    break;\n            }\n        });\n    }\n\n    var token;\n    while ((token = next()) !== null) {\n        switch (token) {\n\n            case \"package\":\n\n                /* istanbul ignore if */\n                if (!head)\n                    throw illegal(token);\n\n                parsePackage();\n                break;\n\n            case \"import\":\n\n                /* istanbul ignore if */\n                if (!head)\n                    throw illegal(token);\n\n                parseImport();\n                break;\n\n            case \"syntax\":\n\n                /* istanbul ignore if */\n                if (!head)\n                    throw illegal(token);\n\n                parseSyntax();\n                break;\n\n            case \"option\":\n\n                parseOption(ptr, token);\n                skip(\";\");\n                break;\n\n            default:\n\n                /* istanbul ignore else */\n                if (parseCommon(ptr, token)) {\n                    head = false;\n                    continue;\n                }\n\n                /* istanbul ignore next */\n                throw illegal(token);\n        }\n    }\n\n    parse.filename = null;\n    return {\n        \"package\"     : pkg,\n        \"imports\"     : imports,\n         weakImports  : weakImports,\n         syntax       : syntax,\n         root         : root\n    };\n}\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @name parse\n * @function\n * @param {string} source Source contents\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n * @variation 2\n */\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(40);\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(28);\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(40);\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Root;\n\nvar Path = require(9);\n\n// extends Namespace\nvar Namespace = require(24);\n((Root.prototype = Object.create(\n  Namespace.prototype\n)).constructor = Root).className = \"Root\";\n\nvar Field = require(17),\n  Enum = require(14),\n  OneOf = require(26),\n  util = require(38);\n\nvar Type, // cyclic\n  parse, // might be excluded\n  common; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\nfunction Root(options) {\n  Namespace.call(this, \"\", options);\n\n  /**\n   * Deferred extension fields.\n   * @type {Field[]}\n   */\n  this.deferred = [];\n\n  /**\n   * Resolved file names of loaded files.\n   * @type {string[]}\n   */\n  this.files = [];\n}\n\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @param {string} [filename] Optional filename to associate with this object.\n * @returns {Root} Root namespace\n */\nRoot.fromJSON = function fromJSON(json, root, filename) {\n  if (!root) root = new Root();\n  if (json.options) root.setOptions(json.options);\n  root.filename = filename;\n  return root.addJSON(json.nested, filename);\n};\n\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n/**\n * Fetch content from file path or url\n * This method exists so you can override it with your own logic.\n * @function\n * @param {string} path File path or url\n * @returns {Promise<string|Uint8Array>} Promise\n */\nRoot.prototype.fetch = util.fetch;\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options\n * @returns {Promise<Root>} Promise\n */\nRoot.prototype.load = function load(filename, options) {\n  var self = this;\n  if (!options) {\n    options = {};\n  }\n\n  return new Promise(function (resolve, reject) {\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(root);\n      }\n    }\n\n    // Bundled definition existence checking\n    function getBundledFileName(filename) {\n      var idx = filename.lastIndexOf(\"google/protobuf/\");\n      if (idx > -1) {\n        var altname = filename.substring(idx);\n        if (altname in common) return altname;\n      }\n      return null;\n    }\n\n    // Processes a single file\n    function process(filename, source, referenced) {\n      try {\n        if (util.isString(source) && source.charAt(0) === \"{\")\n          source = JSON.parse(source);\n\n        if (!util.isString(source))\n          self.setOptions(source.options).addJSON(source.nested, filename);\n        else {\n          parse.filename = referenced;\n          var parsed = parse(source, self, options),\n            resolved,\n            i = 0;\n          if (parsed.imports)\n            for (; i < parsed.imports.length; ++i)\n              if (\n                resolved =\n                  getBundledFileName(parsed.imports[i]) ||\n                  self.resolvePath(filename, parsed.imports[i])\n              )\n                fetch(resolved, false, parsed.imports[i].replace(/\\//g, \"_\"));\n          if (parsed.weakImports)\n            for (i = 0; i < parsed.weakImports.length; ++i)\n              if (\n                resolved =\n                  getBundledFileName(parsed.weakImports[i]) ||\n                  self.resolvePath(filename, parsed.weakImports[i])\n              )\n                fetch(\n                  resolved,\n                  true,\n                  parsed.weakImports[i].replace(/\\//g, \"_\")\n                );\n        }\n      } catch (err) {\n        finish(err);\n      }\n      if (!options.sync && !queued) finish(null, self); // only once anyway\n    }\n\n    // Fetches a single file\n    function fetch(filename, weak, referenced) {\n      referenced = referenced || filename;\n\n      // Skip if already loaded / attempted\n      if (self.files.indexOf(referenced) > -1) return;\n      self.files.push(referenced);\n\n      // Shortcut bundled definitions\n      if (filename in common) {\n        if (options.sync)\n          process(filename.replace(/\\//g, \"_\"), common[filename], referenced);\n        else {\n          ++queued;\n          setTimeout(function () {\n            --queued;\n            process(filename.replace(/\\//g, \"_\"), common[filename], referenced);\n          });\n        }\n        return;\n      }\n\n      // Otherwise fetch from disk or network\n      if (options.sync) {\n        var source;\n        try {\n          source = util.fs.readFileSync(filename).toString(\"utf8\");\n        } catch (err) {\n          if (!weak) finish(err);\n          return;\n        }\n        process(filename, source, referenced);\n      } else {\n        ++queued;\n        self.fetch(filename).then(\n          function (source) {\n            --queued;\n            process(filename, source, referenced);\n          },\n          function (err) {\n            --queued;\n            /* istanbul ignore else */\n            if (!weak) finish(err);\n            else if (!queued)\n              // can't be covered reliably\n              finish(null, self);\n          }\n        );\n      }\n    }\n    var queued = 0;\n\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename)) filename = [filename];\n    for (var i = 0, resolved; i < filename.length; ++i)\n      if (resolved = self.resolvePath(\"\", filename[i]))\n        fetch(resolved, false, Path.basename(filename[i]));\n\n    if (options.sync) return self;\n    if (!queued) finish(null, self);\n    return undefined;\n  });\n};\n\n/**\n * @override\n */\nRoot.prototype.resolveAll = function resolveAll() {\n  if (this.deferred.length)\n    throw Error(\n      \"unresolvable extensions: \" +\n        this.deferred\n          .map(function (field) {\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n          })\n          .join(\", \")\n    );\n  return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\nfunction tryHandleExtension(root, field) {\n  var extendedType = field.parent.lookup(field.extend);\n  if (extendedType) {\n    var sisterField = new Field(\n      field.fullName,\n      field.id,\n      field.type,\n      field.rule,\n      undefined,\n      field.options\n    );\n    sisterField.declaringField = field;\n    field.extensionField = sisterField;\n    extendedType.add(sisterField);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n  if (object instanceof Field) {\n    if (\n      /* an extension field (implies not part of a oneof) */ object.extend !==\n        undefined &&\n      /* not already handled */ !object.extensionField\n    )\n      if (!tryHandleExtension(this, object)) this.deferred.push(object);\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent\n  } else if (!(object instanceof OneOf)) {\n    /* everything else is a namespace */ if (object instanceof Type)\n      // Try to handle any deferred extensions\n      for (var i = 0; i < this.deferred.length; )\n        if (tryHandleExtension(this, this.deferred[i]))\n          this.deferred.splice(i, 1);\n        else ++i;\n    for (\n      var j = 0;\n      j < /* initializes */ object.nestedArray.length;\n      ++j // recurse into the namespace\n    )\n      this._handleAdd(object._nestedArray[j]);\n    if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent\n  }\n\n  // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n  // properties of namespaces just like static code does. This allows using a .d.ts generated for\n  // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n  if (object instanceof Field) {\n    if (/* an extension field */ object.extend !== undefined) {\n      if (/* already handled */ object.extensionField) {\n        // remove its sister field\n        object.extensionField.parent.remove(object.extensionField);\n        object.extensionField = null;\n      } else {\n        // cancel the extension\n        var index = this.deferred.indexOf(object);\n        /* istanbul ignore else */\n        if (index > -1) this.deferred.splice(index, 1);\n      }\n    }\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values\n  } else if (object instanceof Namespace) {\n    for (\n      var i = 0;\n      i < /* initializes */ object.nestedArray.length;\n      ++i // recurse into the namespace\n    )\n      this._handleRemove(object._nestedArray[i]);\n\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces\n  }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function (Type_, parse_, common_) {\n  Type = Type_;\n  parse = parse_;\n  common = common_;\n};\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(33);\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(40);\n\n// Extends EventEmitter\n(Service.prototype = Object.create(\n  util.EventEmitter.prototype\n)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n  if (typeof rpcImpl !== \"function\")\n    throw TypeError(\"rpcImpl must be a function\");\n\n  util.EventEmitter.call(this);\n\n  /**\n   * RPC implementation. Becomes `null` once the service is ended.\n   * @type {RPCImpl|null}\n   */\n  this.rpcImpl = rpcImpl;\n\n  /**\n   * Whether requests are length-delimited.\n   * @type {boolean}\n   */\n  this.requestDelimited = Boolean(requestDelimited);\n\n  /**\n   * Whether responses are length-delimited.\n   * @type {boolean}\n   */\n  this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n  if (this.rpcImpl) {\n    if (!endedByRPC)\n      // signal end to rpcImpl\n      this.rpcImpl(null, null, null);\n    this.rpcImpl = null;\n    this.emit(\"end\").off();\n  }\n  return this;\n};\n","\"use strict\";\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(24);\n((Service.prototype = Object.create(\n  Namespace.prototype\n)).constructor = Service).className = \"Service\";\n\nvar Method = require(23),\n  util = require(38),\n  rpc = require(32);\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n  Namespace.call(this, name, options);\n\n  /**\n   * Service methods.\n   * @type {Object.<string,Method>}\n   */\n  this.methods = {}; // toJSON, marker\n\n  /**\n   * Cached methods as an array.\n   * @type {Method[]|null}\n   * @private\n   */\n  this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @param {string} [filename] Optional filename to associate with this object.\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json, filename) {\n  var service = new Service(name, json.options);\n  /* istanbul ignore else */\n  if (json.methods)\n    for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n      service.add(Method.fromJSON(names[i], json.methods[names[i]], filename));\n  if (json.nested) service.addJSON(json.nested, filename);\n  service.comment = json.comment;\n  service.filename = filename;\n  return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions\n    ? Boolean(toJSONOptions.keepComments)\n    : false;\n  return util.toObject([\n    \"options\",\n    inherited && inherited.options || undefined,\n    \"methods\",\n    Namespace.arrayToJSON(this.methodsArray, toJSONOptions) ||\n      /* istanbul ignore next */ {},\n    \"nested\",\n    inherited && inherited.nested || undefined,\n    \"comment\",\n    keepComments ? this.comment : undefined,\n  ]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n  get: function () {\n    return (\n      this._methodsArray || (this._methodsArray = util.toArray(this.methods))\n    );\n  },\n});\n\nService.prototype.clearCache = function clearCache() {\n  this._methodsArray = null;\n  return Namespace.prototype.clearCache.call(this);\n};\n\nService.prototype._loadPathMap = function _loadPathMap() {\n  var pathMap = Namespace.prototype._loadPathMap.call(this);\n  pathMap.children = pathMap.children.concat(\n    this.methodsArray.map(function (method) {\n      return {\n        name: method.name,\n        node: method,\n      };\n    })\n  );\n  return pathMap;\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n  var methods = this.methodsArray;\n  for (var i = 0; i < methods.length; ++i) methods[i].resolve();\n  return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n  /* istanbul ignore if */\n  if (this.get(object.name))\n    throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n  if (object instanceof Method) {\n    this.methods[object.name] = object;\n    object.parent = this;\n    return this.clearCache();\n  }\n  return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n  if (object instanceof Method) {\n    /* istanbul ignore if */\n    if (this.methods[object.name] !== object)\n      throw Error(object + \" is not a member of \" + this);\n\n    delete this.methods[object.name];\n    object.parent = null;\n    return this.clearCache();\n  }\n  return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(\n  rpcImpl,\n  requestDelimited,\n  responseDelimited\n) {\n  var rpcService = new rpc.Service(\n    rpcImpl,\n    requestDelimited,\n    responseDelimited\n  );\n  for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n    var methodName = util\n      .lcFirst((method = this._methodsArray[i]).resolve().name)\n      .replace(/[^$\\w_]/g, \"\");\n    methodName = util.isReserved(methodName) ? methodName + \"_\" : methodName;\n\n    if (method.requestStream) {\n      rpcService[methodName] = util.codegen(\n        [],\n        methodName\n      )(\"return this.rpcImpl(m)\")({\n        m: method,\n      });\n    } else {\n      rpcService[methodName] = util.codegen(\n        [\"r\"],\n        methodName\n      )(\"return this.rpcImpl(m,r)\")({\n        m: method,\n      });\n    }\n  }\n  return rpcService;\n};\n","\"use strict\";\nmodule.exports = tokenize;\n\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\n\nvar setCommentRe = /^ *[*/]+ */,\n    setCommentAltRe = /^\\s*\\*?\\/*/,\n    setCommentSplitRe = /\\n/g,\n    whitespaceRe = /\\s/,\n    unescapeRe = /\\\\(.?)/g;\n\nvar unescapeMap = {\n    \"0\": \"\\0\",\n    \"r\": \"\\r\",\n    \"n\": \"\\n\",\n    \"t\": \"\\t\"\n};\n\n/**\n * Unescapes a string.\n * @param {string} str String to unescape\n * @returns {string} Unescaped string\n * @property {Object.<string,string>} map Special characters map\n * @memberof tokenize\n */\nfunction unescape(str) {\n    return str.replace(unescapeRe, function($0, $1) {\n        switch ($1) {\n            case \"\\\\\":\n            case \"\":\n                return $1;\n            default:\n                return unescapeMap[$1] || \"\";\n        }\n    });\n}\n\ntokenize.unescape = unescape;\n\n/**\n * Gets the next token and advances.\n * @typedef TokenizerHandleNext\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Peeks for the next token.\n * @typedef TokenizerHandlePeek\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Pushes a token back to the stack.\n * @typedef TokenizerHandlePush\n * @type {function}\n * @param {string} token Token\n * @returns {undefined}\n */\n\n/**\n * Skips the next token.\n * @typedef TokenizerHandleSkip\n * @type {function}\n * @param {string} expected Expected token\n * @param {boolean} [optional=false] If optional\n * @returns {boolean} Whether the token matched\n * @throws {Error} If the token didn't match and is not optional\n */\n\n/**\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\n * @typedef TokenizerHandleCmnt\n * @type {function}\n * @param {number} [line] Line number\n * @returns {string|null} Comment text or `null` if none\n */\n\n/**\n * Handle object returned from {@link tokenize}.\n * @interface ITokenizerHandle\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\n * @property {number} line Current line number\n */\n\n/**\n * Tokenizes the given .proto source and returns an object with useful utility functions.\n * @param {string} source Source contents\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\n * @returns {ITokenizerHandle} Tokenizer handle\n */\nfunction tokenize(source, alternateCommentMode) {\n    /* eslint-disable callback-return */\n    source = source.toString();\n\n    var offset = 0,\n        length = source.length,\n        line = 1,\n        commentType = null,\n        commentText = null,\n        commentLine = 0,\n        commentLineEmpty = false,\n        commentIsLeading = false;\n\n    var stack = [];\n\n    var stringDelim = null;\n\n    /* istanbul ignore next */\n    /**\n     * Creates an error for illegal syntax.\n     * @param {string} subject Subject\n     * @returns {Error} Error created\n     * @inner\n     */\n    function illegal(subject) {\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n    }\n\n    /**\n     * Reads a string till its end.\n     * @returns {string} String read\n     * @inner\n     */\n    function readString() {\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n        re.lastIndex = offset - 1;\n        var match = re.exec(source);\n        if (!match)\n            throw illegal(\"string\");\n        offset = re.lastIndex;\n        push(stringDelim);\n        stringDelim = null;\n        return unescape(match[1]);\n    }\n\n    /**\n     * Gets the character at `pos` within the source.\n     * @param {number} pos Position\n     * @returns {string} Character\n     * @inner\n     */\n    function charAt(pos) {\n        return source.charAt(pos);\n    }\n\n    /**\n     * Sets the current comment text.\n     * @param {number} start Start offset\n     * @param {number} end End offset\n     * @param {boolean} isLeading set if a leading comment\n     * @returns {undefined}\n     * @inner\n     */\n    function setComment(start, end, isLeading) {\n        commentType = source.charAt(start++);\n        commentLine = line;\n        commentLineEmpty = false;\n        commentIsLeading = isLeading;\n        var lookback;\n        if (alternateCommentMode) {\n            lookback = 2;  // alternate comment parsing: \"//\" or \"/*\"\n        } else {\n            lookback = 3;  // \"///\" or \"/**\"\n        }\n        var commentOffset = start - lookback,\n            c;\n        do {\n            if (--commentOffset < 0 ||\n                    (c = source.charAt(commentOffset)) === \"\\n\") {\n                commentLineEmpty = true;\n                break;\n            }\n        } while (c === \" \" || c === \"\\t\");\n        var lines = source\n            .substring(start, end)\n            .split(setCommentSplitRe);\n        for (var i = 0; i < lines.length; ++i)\n            lines[i] = lines[i]\n                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\")\n                .trim();\n        commentText = lines\n            .join(\"\\n\")\n            .trim();\n    }\n\n    function isDoubleSlashCommentLine(startOffset) {\n        var endOffset = findEndOfLine(startOffset);\n\n        // see if remaining line matches comment pattern\n        var lineText = source.substring(startOffset, endOffset);\n        // look for 1 or 2 slashes since startOffset would already point past\n        // the first slash that started the comment.\n        var isComment = /^\\s*\\/{1,2}/.test(lineText);\n        return isComment;\n    }\n\n    function findEndOfLine(cursor) {\n        // find end of cursor's line\n        var endOffset = cursor;\n        while (endOffset < length && charAt(endOffset) !== \"\\n\") {\n            endOffset++;\n        }\n        return endOffset;\n    }\n\n    /**\n     * Obtains the next token.\n     * @returns {string|null} Next token or `null` on eof\n     * @inner\n     */\n    function next() {\n        if (stack.length > 0)\n            return stack.shift();\n        if (stringDelim)\n            return readString();\n        var repeat,\n            prev,\n            curr,\n            start,\n            isDoc,\n            isLeadingComment = offset === 0;\n        do {\n            if (offset === length)\n                return null;\n            repeat = false;\n            while (whitespaceRe.test(curr = charAt(offset))) {\n                if (curr === \"\\n\") {\n                    isLeadingComment = true;\n                    ++line;\n                }\n                if (++offset === length)\n                    return null;\n            }\n\n            if (charAt(offset) === \"/\") {\n                if (++offset === length) {\n                    throw illegal(\"comment\");\n                }\n                if (charAt(offset) === \"/\") { // Line\n                    if (!alternateCommentMode) {\n                        // check for triple-slash comment\n                        isDoc = charAt(start = offset + 1) === \"/\";\n\n                        while (charAt(++offset) !== \"\\n\") {\n                            if (offset === length) {\n                                return null;\n                            }\n                        }\n                        ++offset;\n                        if (isDoc) {\n                            setComment(start, offset - 1, isLeadingComment);\n                        }\n                        ++line;\n                        repeat = true;\n                    } else {\n                        // check for double-slash comments, consolidating consecutive lines\n                        start = offset;\n                        isDoc = false;\n                        if (isDoubleSlashCommentLine(offset)) {\n                            isDoc = true;\n                            do {\n                                offset = findEndOfLine(offset);\n                                if (offset === length) {\n                                    break;\n                                }\n                                offset++;\n                            } while (isDoubleSlashCommentLine(offset));\n                        } else {\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\n                        }\n                        if (isDoc) {\n                            setComment(start, offset, isLeadingComment);\n                        }\n                        line++;\n                        repeat = true;\n                    }\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\n                    start = offset + 1;\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\n                    do {\n                        if (curr === \"\\n\") {\n                            ++line;\n                        }\n                        if (++offset === length) {\n                            throw illegal(\"comment\");\n                        }\n                        prev = curr;\n                        curr = charAt(offset);\n                    } while (prev !== \"*\" || curr !== \"/\");\n                    ++offset;\n                    if (isDoc) {\n                        setComment(start, offset - 2, isLeadingComment);\n                    }\n                    repeat = true;\n                } else {\n                    return \"/\";\n                }\n            }\n        } while (repeat);\n\n        // offset !== length if we got here\n\n        var end = offset;\n        delimRe.lastIndex = 0;\n        var delim = delimRe.test(charAt(end++));\n        if (!delim)\n            while (end < length && !delimRe.test(charAt(end)))\n                ++end;\n        var token = source.substring(offset, offset = end);\n        if (token === \"\\\"\" || token === \"'\")\n            stringDelim = token;\n        return token;\n    }\n\n    /**\n     * Pushes a token back to the stack.\n     * @param {string} token Token\n     * @returns {undefined}\n     * @inner\n     */\n    function push(token) {\n        stack.push(token);\n    }\n\n    /**\n     * Peeks for the next token.\n     * @returns {string|null} Token or `null` on eof\n     * @inner\n     */\n    function peek() {\n        if (!stack.length) {\n            var token = next();\n            if (token === null)\n                return null;\n            push(token);\n        }\n        return stack[0];\n    }\n\n    /**\n     * Skips a token.\n     * @param {string} expected Expected token\n     * @param {boolean} [optional=false] Whether the token is optional\n     * @returns {boolean} `true` when skipped, `false` if not\n     * @throws {Error} When a required token is not present\n     * @inner\n     */\n    function skip(expected, optional) {\n        var actual = peek(),\n            equals = actual === expected;\n        if (equals) {\n            next();\n            return true;\n        }\n        if (!optional)\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n        return false;\n    }\n\n    /**\n     * Gets a comment.\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\n     * @returns {string|null} Comment text\n     * @inner\n     */\n    function cmnt(trailingLine) {\n        var ret = null;\n        if (trailingLine === undefined) {\n            if (commentLine === line - 1 && (alternateCommentMode || commentType === \"*\" || commentLineEmpty)) {\n                ret = commentIsLeading ? commentText : null;\n            }\n        } else {\n            /* istanbul ignore else */\n            if (commentLine < trailingLine) {\n                peek();\n            }\n            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === \"/\")) {\n                ret = commentIsLeading ? null : commentText;\n            }\n        }\n        return ret;\n    }\n\n    return Object.defineProperty({\n        next: next,\n        peek: peek,\n        push: push,\n        skip: skip,\n        cmnt: cmnt\n    }, \"line\", {\n        get: function() { return line; }\n    });\n    /* eslint-enable callback-return */\n}\n","\"use strict\";\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = require(24);\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\n\nvar Enum      = require(14),\n    OneOf     = require(26),\n    Field     = require(17),\n    MapField  = require(21),\n    Service   = require(34),\n    Message   = require(22),\n    Reader    = require(28),\n    Writer    = require(43),\n    util      = require(38),\n    encoder   = require(13),\n    decoder   = require(12),\n    verifier  = require(41),\n    converter = require(11),\n    wrappers  = require(42);\n\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Type(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Message fields.\n     * @type {Object.<string,Field>}\n     */\n    this.fields = {};  // toJSON, marker\n\n    /**\n     * Oneofs declared within this namespace, if any.\n     * @type {Object.<string,OneOf>}\n     */\n    this.oneofs = undefined; // toJSON\n\n    /**\n     * Extension ranges, if any.\n     * @type {number[][]}\n     */\n    this.extensions = undefined; // toJSON\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    /*?\n     * Whether this type is a legacy group.\n     * @type {boolean|undefined}\n     */\n    this.group = undefined; // toJSON\n\n    /**\n     * Cached fields by id.\n     * @type {Object.<number,Field>|null}\n     * @private\n     */\n    this._fieldsById = null;\n\n    /**\n     * Cached fields as an array.\n     * @type {Field[]|null}\n     * @private\n     */\n    this._fieldsArray = null;\n\n    /**\n     * Cached oneofs as an array.\n     * @type {OneOf[]|null}\n     * @private\n     */\n    this._oneofsArray = null;\n\n    /**\n     * Cached constructor.\n     * @type {Constructor<{}>}\n     * @private\n     */\n    this._ctor = null;\n}\n\nObject.defineProperties(Type.prototype, {\n\n    /**\n     * Message fields by id.\n     * @name Type#fieldsById\n     * @type {Object.<number,Field>}\n     * @readonly\n     */\n    fieldsById: {\n        get: function() {\n\n            /* istanbul ignore if */\n            if (this._fieldsById)\n                return this._fieldsById;\n\n            this._fieldsById = {};\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n                var field = this.fields[names[i]],\n                    id = field.id;\n\n                /* istanbul ignore if */\n                if (this._fieldsById[id])\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\n\n                this._fieldsById[id] = field;\n            }\n            return this._fieldsById;\n        }\n    },\n\n    /**\n     * Fields of this message as an array for iteration.\n     * @name Type#fieldsArray\n     * @type {Field[]}\n     * @readonly\n     */\n    fieldsArray: {\n        get: function() {\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n        }\n    },\n\n    /**\n     * Oneofs of this message as an array for iteration.\n     * @name Type#oneofsArray\n     * @type {OneOf[]}\n     * @readonly\n     */\n    oneofsArray: {\n        get: function() {\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n        }\n    },\n\n    /**\n     * The registered constructor, if any registered, otherwise a generic constructor.\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n     * @name Type#ctor\n     * @type {Constructor<{}>}\n     */\n    ctor: {\n        get: function() {\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\n        },\n        set: function(ctor) {\n\n            // Ensure proper prototype\n            var prototype = ctor.prototype;\n            if (!(prototype instanceof Message)) {\n                (ctor.prototype = new Message()).constructor = ctor;\n                util.merge(ctor.prototype, prototype);\n            }\n\n            // Classes and messages reference their reflected type\n            ctor.$type = ctor.prototype.$type = this;\n\n            // Mix in static methods\n            util.merge(ctor, Message, true);\n\n            this._ctor = ctor;\n\n            // Messages have non-enumerable default values on their prototype\n            var i = 0;\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\n                this._fieldsArray[i].resolve(); // ensures a proper value\n\n            // Messages have non-enumerable getters and setters for each virtual oneof field\n            var ctorProperties = {};\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\n                };\n            if (i)\n                Object.defineProperties(ctor.prototype, ctorProperties);\n        }\n    }\n});\n\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nType.generateConstructor = function generateConstructor(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"p\"], mtype.name);\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\n        if ((field = mtype._fieldsArray[i]).map && !field.optional) gen\n            (\"this%s={}\", util.safeProp(field.name));\n        else if (field.repeated && !field.optional) gen\n            (\"this%s=[]\", util.safeProp(field.name));\n    return gen\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n        (\"this[ks[i]]=p[ks[i]]\");\n    /* eslint-enable no-unexpected-multiline */\n};\n\nType.prototype.clearCache = function clearCache() {\n    this._fieldsById = this._fieldsArray = this._oneofsArray = null;\n    delete this.encode;\n    delete this.decode;\n    delete this.verify;\n    return Namespace.prototype.clearCache.call(this);\n};\n\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {number[][]} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @param {string} [filename] Optional filename to associate with this object.\n * @returns {Type} Created message type\n */\nType.fromJSON = function fromJSON(name, json, filename) {\n    var type = new Type(name, json.options);\n    type.filename = filename;\n    type.extensions = json.extensions;\n    type.reserved = json.reserved;\n    var names = Object.keys(json.fields),\n        i = 0;\n    for (; i < names.length; ++i)\n        type.add(\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\n            ? MapField.fromJSON\n            : Field.fromJSON )(names[i], json.fields[names[i]], filename)\n        );\n    if (json.oneofs)\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]], filename));\n    if (json.nested)\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n            var nested = json.nested[names[i]];\n            type.add( // most to least likely\n                ( nested.id !== undefined\n                ? Field.fromJSON\n                : nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : Namespace.fromJSON )(names[i], nested, filename)\n            );\n        }\n    if (json.extensions && json.extensions.length)\n        type.extensions = json.extensions;\n    if (json.reserved && json.reserved.length)\n        type.reserved = json.reserved;\n    if (json.group)\n        type.group = true;\n    if (json.comment)\n        type.comment = json.comment;\n    return type;\n};\n\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"    , inherited && inherited.options || undefined,\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"group\"      , this.group || undefined,\n        \"nested\"     , inherited && inherited.nested || undefined,\n        \"comment\"    , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nType.prototype.resolveAll = function resolveAll() {\n    var fields = this.fieldsArray, i = 0;\n    while (i < fields.length)\n        fields[i++].resolve();\n    var oneofs = this.oneofsArray; i = 0;\n    while (i < oneofs.length)\n        oneofs[i++].resolve();\n    return Namespace.prototype.resolveAll.call(this);\n};\n\nType.prototype._loadPathMap = function _loadPathMap() {\n    var pathMap = Namespace.prototype._loadPathMap.call(this);\n    pathMap.children = pathMap.children.concat(this.fieldsArray.map(function (field) {\n        return {\n            name: field.name,\n            node: field\n        };\n    }));\n    if (this.oneofsArray) {\n      pathMap.children = pathMap.children.concat(\n        this.oneofsArray.map(function (oneOf) {\n          return {\n            name: oneOf.name,\n            node: oneOf,\n          };\n        })\n      );\n    }\n\n    return pathMap;\n};\n\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\nType.prototype.add = function add(object) {\n\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Field && object.extend === undefined) {\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n        // The root object takes care of adding distinct sister-fields to the respective extended\n        // type instead.\n\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\n        if (this.isReservedId(object.id))\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\n        if (this.isReservedName(object.name))\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n\n        if (object.parent)\n            object.parent.remove(object);\n        this.fields[object.name] = object;\n        object.message = this;\n        object.onAdd(this);\n        return this.clearCache();\n    }\n    if (object instanceof OneOf) {\n        if (!this.oneofs)\n            this.oneofs = {};\n        this.oneofs[object.name] = object;\n        object.onAdd(this);\n        return this.clearCache();\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\nType.prototype.remove = function remove(object) {\n    if (object instanceof Field && object.extend === undefined) {\n        // See Type#add for the reason why extension fields are excluded here.\n\n        /* istanbul ignore if */\n        if (!this.fields || this.fields[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.fields[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return this.clearCache();\n    }\n    if (object instanceof OneOf) {\n\n        /* istanbul ignore if */\n        if (!this.oneofs || this.oneofs[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.oneofs[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return this.clearCache();\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\nType.prototype.create = function create(properties) {\n    return new this.ctor(properties);\n};\n\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\nType.prototype.setup = function setup() {\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n    // multiple times (V8, soft-deopt prototype-check).\n\n    var fullName = this.fullName,\n        types    = [];\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\n        types.push(this._fieldsArray[i].resolve().resolvedType);\n\n    // Replace setup methods with type-specific generated functions\n    this.encode = encoder(this)({\n        Writer : Writer,\n        types  : types,\n        util   : util\n    });\n    this.decode = decoder(this)({\n        Reader : Reader,\n        types  : types,\n        util   : util\n    });\n    this.verify = verifier(this)({\n        types : types,\n        util  : util\n    });\n    this.fromObject = converter.fromObject(this)({\n        types : types,\n        util  : util\n    });\n    this.toObject = converter.toObject(this)({\n        types : types,\n        util  : util\n    });\n\n    // Inject custom wrappers for common types\n    var wrapper = wrappers[fullName];\n    if (wrapper) {\n        var originalThis = Object.create(this);\n        // if (wrapper.fromObject) {\n            originalThis.fromObject = this.fromObject;\n            this.fromObject = wrapper.fromObject.bind(originalThis);\n        // }\n        // if (wrapper.toObject) {\n            originalThis.toObject = this.toObject;\n            this.toObject = wrapper.toObject.bind(originalThis);\n        // }\n    }\n\n    return this;\n};\n\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encode = function encode_setup(message, writer) {\n    return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\nType.prototype.decode = function decode_setup(reader, length) {\n    return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof Reader))\n        reader = Reader.create(reader);\n    return this.decode(reader, reader.uint32());\n};\n\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\nType.prototype.verify = function verify_setup(message) {\n    return this.setup().verify(message); // overrides this method\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\nType.prototype.fromObject = function fromObject(object) {\n    return this.setup().fromObject(object);\n};\n\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\nType.prototype.toObject = function toObject(message, options) {\n    return this.setup().toObject(message, options);\n};\n\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\nType.d = function decorateType(typeName) {\n    return function typeDecorator(target) {\n        util.decorateType(target, typeName);\n    };\n};\n","\"use strict\";\n\n/**\n * Common type constants.\n * @namespace\n */\nvar types = exports;\n\nvar util = require(38);\n\nvar s = [\n    \"double\",   // 0\n    \"float\",    // 1\n    \"int32\",    // 2\n    \"uint32\",   // 3\n    \"sint32\",   // 4\n    \"fixed32\",  // 5\n    \"sfixed32\", // 6\n    \"int64\",    // 7\n    \"uint64\",   // 8\n    \"sint64\",   // 9\n    \"fixed64\",  // 10\n    \"sfixed64\", // 11\n    \"bool\",     // 12\n    \"string\",   // 13\n    \"bytes\"     // 14\n];\n\nfunction bake(values, offset) {\n    var i = 0, o = {};\n    offset |= 0;\n    while (i < values.length) o[s[i + offset]] = values[i++];\n    return o;\n}\n\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\ntypes.basic = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2,\n    /* bytes    */ 2\n]);\n\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\ntypes.defaults = bake([\n    /* double   */ 0,\n    /* float    */ 0,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 0,\n    /* sfixed32 */ 0,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 0,\n    /* sfixed64 */ 0,\n    /* bool     */ false,\n    /* string   */ \"\",\n    /* bytes    */ util.emptyArray,\n    /* message  */ null\n]);\n\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\ntypes.long = bake([\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1\n], 7);\n\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\ntypes.mapKey = bake([\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2\n], 2);\n\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\ntypes.packed = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0\n]);\n","\"use strict\";\n\n/**\n * Various utility functions.\n * @namespace\n */\nvar util = (module.exports = require(40));\n\nvar roots = require(31);\n\nvar Type, // cyclic\n  Enum;\n\nutil.codegen = require(2);\nutil.fetch = require(16);\nutil.path = require(6);\n\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */\nutil.fs = util.inquire(\"fs\");\n\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */\nutil.toArray = function toArray(object) {\n  if (object) {\n    var keys = Object.keys(object),\n      array = new Array(keys.length),\n      index = 0;\n    while (index < keys.length) array[index] = object[keys[index++]];\n    return array;\n  }\n  return [];\n};\n\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */\nutil.toObject = function toObject(array) {\n  var object = {},\n    index = 0;\n  while (index < array.length) {\n    var key = array[index++],\n      val = array[index++];\n    if (val !== undefined) object[key] = val;\n  }\n  return object;\n};\n\nvar safePropBackslashRe = /\\\\/g,\n  safePropQuoteRe = /\"/g;\n\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nutil.isReserved = function isReserved(name) {\n  return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(\n    name\n  );\n};\n\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */\nutil.safeProp = function safeProp(prop) {\n  if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\n    return (\n      '[\"' +\n      prop\n        .replace(safePropBackslashRe, \"\\\\\\\\\")\n        .replace(safePropQuoteRe, '\\\\\"') +\n      '\"]'\n    );\n  return \".\" + prop;\n};\n\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.ucFirst = function ucFirst(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n};\n\nvar camelCaseRe = /_([a-z])/g;\n\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.camelCase = function camelCase(str) {\n  return (\n    str.substring(0, 1) +\n    str.substring(1).replace(camelCaseRe, function ($0, $1) {\n      return $1.toUpperCase();\n    })\n  );\n};\n\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */\nutil.compareFieldsById = function compareFieldsById(a, b) {\n  return a.id - b.id;\n};\n\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */\nutil.decorateType = function decorateType(ctor, typeName) {\n  /* istanbul ignore if */\n  if (ctor.$type) {\n    if (typeName && ctor.$type.name !== typeName) {\n      util.decorateRoot.remove(ctor.$type);\n      ctor.$type.name = typeName;\n      util.decorateRoot.add(ctor.$type);\n    }\n    return ctor.$type;\n  }\n\n  /* istanbul ignore next */\n  if (!Type) Type = require(36);\n\n  var type = new Type(typeName || ctor.name);\n  util.decorateRoot.add(type);\n  type.ctor = ctor; // sets up .encode, .decode etc.\n  Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\n  Object.defineProperty(ctor.prototype, \"$type\", {\n    value: type,\n    enumerable: false,\n  });\n  return type;\n};\n\nvar decorateEnumIndex = 0;\n\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */\nutil.decorateEnum = function decorateEnum(object) {\n  /* istanbul ignore if */\n  if (object.$type) return object.$type;\n\n  /* istanbul ignore next */\n  if (!Enum) Enum = require(14);\n\n  var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n  util.decorateRoot.add(enm);\n  Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\n  return enm;\n};\n\n/**\n * Sets the value of a property by property path. If a value already exists, it is turned to an array\n * @param {Object.<string,*>} dst Destination object\n * @param {string} path dot '.' delimited path of the property to set\n * @param {Object} value the value to set\n * @returns {Object.<string,*>} Destination object\n */\nutil.setProperty = function setProperty(dst, path, value) {\n  function setProp(dst, path, value) {\n    var part = path.shift();\n    if (path.length > 0) {\n      dst[part] = setProp(dst[part] || {}, path, value);\n    } else {\n      var prevValue = dst[part];\n      if (prevValue) value = [].concat(prevValue).concat(value);\n      dst[part] = value;\n    }\n    return dst;\n  }\n\n  if (typeof dst !== \"object\") throw TypeError(\"dst must be an object\");\n  if (!path) throw TypeError(\"path must be specified\");\n\n  path = path.split(\".\");\n  return setProp(dst, path, value);\n};\n\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */\nObject.defineProperty(util, \"decorateRoot\", {\n  get: function () {\n    return (\n      roots[\"decorated\"] || (roots[\"decorated\"] = new (require(30))())\n    );\n  },\n});\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(40);\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number|Long|LongBits} lo Low 32 bits, unsigned or long object to copy\n * @param {number} [hi] High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    if (typeof lo === \"object\") {\n        this.lo = lo.low != null ? lo.low : lo.lo;\n        this.hi = lo.high != null ? lo.high : lo.hi;\n    } else {\n        /**\n         * Low bits.\n         * @type {number}\n         */\n        this.lo = lo >>> 0;\n\n        /**\n         * High bits.\n         * @type {number}\n         */\n        this.hi = hi >>> 0;\n    }\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// converts to / from base64 encoded strings\nutil.base64 = require(1);\n\n// base class of rpc.Service\nutil.EventEmitter = require(3);\n\n// float handling accross browsers\nutil.float = require(4);\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(5);\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(8);\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(7);\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(39);\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Equality check for byte data fields.\n * @param {Uint8Array|Buffer|number[]|string} [a] Left side\n * @param {Uint8Array|Buffer|number[]|string} [b] Right side\n * @returns {boolean} true if equals\n */\nutil.bytesEquals = function bytesEquals(a, b) {\n    if (a === b)\n        return true;\n\n    if (!a || !b)\n        return false;\n\n    return a.length === b.length && a.findIndex(function(aValue, index) {\n        return aValue !== b[index];\n    }) < 0;\n};\n\n\n/**\n * Equality check for map data fields.\n * @param {object|null|undefined} a Left side\n * @param {object|null|undefined} b Right side\n * @param {function} fn Key comparison check. Returns true if a given key name is a mismatch.\n * @returns {boolean} true if equals\n */\nutil.mapEquals = function mapEquals(a, b, fn) {\n    if (a === b)\n        return true;\n\n    if (!a || !b)\n        return false;\n\n    var aKeys = Object.keys(a);\n    return aKeys.length === Object.keys(b).length && aKeys.findIndex(fn) < 0;\n};\n\n\n/**\n * Equality check for long data fields.\n * @param {number|Long} [a] Left side\n * @param {number|Long} [b] Right side\n * @returns {boolean} true if equals\n */\nutil.longEquals = function longEquals(a, b) {\n    if (a === b)\n        return true;\n\n    if (a == null || b == null)\n        return false;\n\n    // If the checks above did not resolve, then this is either an object that may be equal\n    // or a primitive that is not equal\n    return util.Long && util.Long.isLong(a) ? a.equals(b) : false;\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @class Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n/**\n * @method Long#toNumber\n * @returns {number}\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n\n/**\n * Generates long representation from a variety of source formats.\n *\n * @param {number|object|Long|LongBits} value value to convert\n * @param {boolean} isUnsigned Whether unsigned or not, default false\n * @returns {number|Long} Hydrated value\n */\nutil.longValue = function longValue(value, isUnsigned) {\n    if (util.Long) {\n        var ret = util.Long.fromValue(value);\n        ret.unsigned = Boolean(isUnsigned);\n        return ret;\n    } else if (typeof value === \"string\")\n        return parseInt(value, 10);\n    else if (typeof value === \"number\")\n        return value;\n    else if (typeof value === \"object\")\n        return new util.LongBits(value).toNumber();\n    return undefined;\n};\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {any|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {any|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = verifier;\n\nvar Enum      = require(14),\n    util      = require(38);\n\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(%s){\", ref)\n                (\"default:\")\n                    (\"return%j\", invalid(field, \"enum value\"));\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\n            gen\n                    (\"break\")\n            (\"}\");\n        } else {\n            gen\n            (\"{\")\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\n                (\"if(e)\")\n                    (\"return%j+e\", field.name + \".\")\n            (\"}\");\n        }\n    } else {\n        switch (field.type) {\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\": gen\n                (\"if(!util.isInteger(%s))\", ref)\n                    (\"return%j\", invalid(field, \"integer\"));\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\n                    (\"return%j\", invalid(field, \"integer|Long\"));\n                break;\n            case \"float\":\n            case \"double\": gen\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\n                    (\"return%j\", invalid(field, \"number\"));\n                break;\n            case \"bool\": gen\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\n                    (\"return%j\", invalid(field, \"boolean\"));\n                break;\n            case \"string\": gen\n                (\"if(!util.isString(%s))\", ref)\n                    (\"return%j\", invalid(field, \"string\"));\n                break;\n            case \"bytes\": gen\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\n                    (\"return%j\", invalid(field, \"buffer\"));\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    switch (field.keyType) {\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\": gen\n            (\"if(!util.key32Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"integer key\"));\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\": gen\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n                (\"return%j\", invalid(field, \"integer|Long key\"));\n            break;\n        case \"bool\": gen\n            (\"if(!util.key2Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"boolean key\"));\n            break;\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\n        (\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray,\n        seenFirstField = {};\n    if (oneofs.length) gen\n    (\"var p={}\");\n\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            ref   = \"m\" + util.safeProp(field.name);\n\n        if (field.optional) gen\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n        // map fields\n        if (field.map) { gen\n            (\"if(!util.isObject(%s))\", ref)\n                (\"return%j\", invalid(field, \"object\"))\n            (\"var k=Object.keys(%s)\", ref)\n            (\"for(var i=0;i<k.length;++i){\");\n                genVerifyKey(gen, field, \"k[i]\");\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\n            (\"}\");\n\n        // repeated fields\n        } else if (field.repeated) { gen\n            (\"if(!Array.isArray(%s))\", ref)\n                (\"return%j\", invalid(field, \"array\"))\n            (\"for(var i=0;i<%s.length;++i){\", ref);\n                genVerifyValue(gen, field, i, ref + \"[i]\")\n            (\"}\");\n\n        // required or present fields\n        } else {\n            if (field.partOf) {\n                var oneofProp = util.safeProp(field.partOf.name);\n                if (seenFirstField[field.partOf.name] === 1) gen\n            (\"if(p%s===1)\", oneofProp)\n                (\"return%j\", field.partOf.name + \": multiple values\");\n                seenFirstField[field.partOf.name] = 1;\n                gen\n            (\"p%s=1\", oneofProp);\n            }\n            genVerifyValue(gen, field, i, ref);\n        }\n        if (field.optional) gen\n        (\"}\");\n    }\n    return gen\n    (\"return null\");\n    /* eslint-enable no-unexpected-multiline */\n}","\"use strict\";\n\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\nvar wrappers = exports;\n\nvar Message = require(22);\n\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n\n    fromObject: function(object) {\n\n        // unwrap value type if mapped\n        if (object && object[\"@type\"]) {\n             // Only use fully qualified type name after the last '/'\n            var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type) {\n                // type_url does not accept leading \".\"\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\n                    object[\"@type\"].substr(1) : object[\"@type\"];\n                // type_url prefix is optional, but path seperator is required\n                if (type_url.indexOf(\"/\") === -1) {\n                    type_url = \"/\" + type_url;\n                }\n                return this.create({\n                    type_url: type_url,\n                    value: type.encode(type.fromObject(object)).finish()\n                });\n            }\n        }\n\n        return this.fromObject(object);\n    },\n\n    toObject: function(message, options) {\n\n        // Default prefix\n        var googleApi = \"type.googleapis.com/\";\n        var prefix = \"\";\n        var name = \"\";\n\n        // decode value if requested and unmapped\n        if (options && options.json && message.type_url && message.value) {\n            // Only use fully qualified type name after the last '/'\n            name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n            // Separate the prefix used\n            prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type)\n                message = type.decode(message.value);\n        }\n\n        // wrap value if unmapped\n        if (!(message instanceof this.ctor) && message instanceof Message) {\n            var object = message.$type.toObject(message, options);\n            var messageName = message.$type.fullName[0] === \".\" ?\n                message.$type.fullName.substr(1) : message.$type.fullName;\n            // Default to type.googleapis.com prefix if no prefix is used\n            if (prefix === \"\") {\n                prefix = googleApi;\n            }\n            name = prefix + messageName;\n            object[\"@type\"] = name;\n            return object;\n        }\n\n        return this.toObject(message, options);\n    }\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(40);\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number | string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    if (typeof value === \"string\") {\n      value = parseFloat(value);\n    }\n\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number | string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    if (typeof value === \"string\") {\n        value = parseFloat(value);\n    }\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean|any} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(43);\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(40);\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n"],"sourceRoot":"."}