{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/index-minimal","../src/reader.js","../src/reader_buffer.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/util/longbits.js","../src/util/minimal.js","../src/writer.js","../src/writer_buffer.js"],"names":["undefined","modules","cache","entries","protobuf","1","require","module","exports","base64","length","string","p","n","Math","ceil","b64","Array","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","apply","slice","join","invalidEncoding","decode","offset","c","charCodeAt","Error","test","EventEmitter","this","_listeners","prototype","on","evt","fn","ctx","off","listeners","splice","emit","args","arguments","factory","writeFloat_ieee754","writeUint","val","buf","pos","exponent","sign","isNaN","round","floor","log","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeFloat_f32_cpy","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","le","f64","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","Float32Array","Uint8Array","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","inquire","moduleName","mod","eval","Object","keys","e","alloc","size","SIZE","MAX","slab","call","utf8","len","read","write","c1","c2","configure","util","_configure","Writer","BufferWriter","Reader","BufferReader","build","rpc","roots","Long","LongBits","indexOutOfRange","reader","writeLength","RangeError","create","Buffer","isBuffer","create_array","value","isArray","readLongVarint","bits","readFixed32_end","readFixed64","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","double","bytes","constructor","skip","skipType","wireType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","toString","Service","rpcImpl","requestDelimited","responseDelimited","TypeError","endedByRPC","low","high","zero","toNumber","zzEncode","zeroHash","fromNumber","from","isString","parseInt","fromString","unsigned","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","ifNotSet","newError","name","CustomError","message","properties","defineProperty","get","captureStackTrace","stack","pool","isNode","global","process","versions","node","window","self","emptyArray","freeze","emptyObject","isInteger","Number","isFinite","isObject","isset","isSet","obj","prop","hasOwnProperty","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","bytesEquals","a","findIndex","aValue","index","mapEquals","aKeys","longEquals","isLong","equals","dcodeIO","longValue","isUnsigned","ret","fromValue","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","lcFirst","str","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","json","encoding","allocUnsafe","Op","next","noop","State","writer","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","parseFloat","writeBytes","set","fork","reset","ldelim","finish","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength","$require","$module","define","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\n\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\n    // sources through a conflict-free require shim and is again wrapped within an iife that\n    // provides a minification-friendly `undefined` var plus a global \"use strict\" directive\n    // so that minification can remove the directives of each module.\n\n    function $require(name) {\n        var $module = cache[name];\n        if (!$module)\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\n        return $module.exports;\n    }\n\n    var protobuf = $require(entries[0]);\n\n    // Expose globally\n    protobuf.util.global.protobuf = protobuf;\n\n    // Be nice to AMD\n    if (typeof define === \"function\" && define.amd)\n        define([\"long\"], function(Long) {\n            if (Long && Long.isLong) {\n                protobuf.util.Long = Long;\n                protobuf.configure();\n            }\n            return protobuf;\n        });\n\n    // Be nice to CommonJS\n    if (typeof module === \"object\" && module && module.exports)\n        module.exports = protobuf;\n\n})/* end of prelude */","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(15);\nprotobuf.BufferWriter = require(16);\nprotobuf.Reader       = require(8);\nprotobuf.BufferReader = require(9);\n\n// Utility\nprotobuf.util         = require(14);\nprotobuf.rpc          = require(11);\nprotobuf.roots        = require(10);\nprotobuf.configure    = configure;\n\nprotobuf.Long = protobuf.util.Long;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(14);\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(8);\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(14);\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(12);\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(14);\n\n// Extends EventEmitter\n(Service.prototype = Object.create(\n  util.EventEmitter.prototype\n)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n  if (typeof rpcImpl !== \"function\")\n    throw TypeError(\"rpcImpl must be a function\");\n\n  util.EventEmitter.call(this);\n\n  /**\n   * RPC implementation. Becomes `null` once the service is ended.\n   * @type {RPCImpl|null}\n   */\n  this.rpcImpl = rpcImpl;\n\n  /**\n   * Whether requests are length-delimited.\n   * @type {boolean}\n   */\n  this.requestDelimited = Boolean(requestDelimited);\n\n  /**\n   * Whether responses are length-delimited.\n   * @type {boolean}\n   */\n  this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n  if (this.rpcImpl) {\n    if (!endedByRPC)\n      // signal end to rpcImpl\n      this.rpcImpl(null, null, null);\n    this.rpcImpl = null;\n    this.emit(\"end\").off();\n  }\n  return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(14);\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number|Long|LongBits} lo Low 32 bits, unsigned or long object to copy\n * @param {number} [hi] High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    if (typeof lo === \"object\") {\n        this.lo = lo.low != null ? lo.low : lo.lo;\n        this.hi = lo.high != null ? lo.high : lo.hi;\n    } else {\n        /**\n         * Low bits.\n         * @type {number}\n         */\n        this.lo = lo >>> 0;\n\n        /**\n         * High bits.\n         * @type {number}\n         */\n        this.hi = hi >>> 0;\n    }\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// converts to / from base64 encoded strings\nutil.base64 = require(1);\n\n// base class of rpc.Service\nutil.EventEmitter = require(2);\n\n// float handling accross browsers\nutil.float = require(3);\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(4);\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(6);\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(5);\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(13);\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Equality check for byte data fields.\n * @param {Uint8Array|Buffer|number[]|string} [a] Left side\n * @param {Uint8Array|Buffer|number[]|string} [b] Right side\n * @returns {boolean} true if equals\n */\nutil.bytesEquals = function bytesEquals(a, b) {\n    if (a === b)\n        return true;\n\n    if (!a || !b)\n        return false;\n\n    return a.length === b.length && a.findIndex(function(aValue, index) {\n        return aValue !== b[index];\n    }) < 0;\n};\n\n\n/**\n * Equality check for map data fields.\n * @param {object|null|undefined} a Left side\n * @param {object|null|undefined} b Right side\n * @param {function} fn Key comparison check. Returns true if a given key name is a mismatch.\n * @returns {boolean} true if equals\n */\nutil.mapEquals = function mapEquals(a, b, fn) {\n    if (a === b)\n        return true;\n\n    if (!a || !b)\n        return false;\n\n    var aKeys = Object.keys(a);\n    return aKeys.length === Object.keys(b).length && aKeys.findIndex(fn) < 0;\n};\n\n\n/**\n * Equality check for long data fields.\n * @param {number|Long} [a] Left side\n * @param {number|Long} [b] Right side\n * @returns {boolean} true if equals\n */\nutil.longEquals = function longEquals(a, b) {\n    if (a === b)\n        return true;\n\n    if (a == null || b == null)\n        return false;\n\n    // If the checks above did not resolve, then this is either an object that may be equal\n    // or a primitive that is not equal\n    return util.Long && util.Long.isLong(a) ? a.equals(b) : false;\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @class Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n/**\n * @method Long#toNumber\n * @returns {number}\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n\n/**\n * Generates long representation from a variety of source formats.\n *\n * @param {number|object|Long|LongBits} value value to convert\n * @param {boolean} isUnsigned Whether unsigned or not, default false\n * @returns {number|Long} Hydrated value\n */\nutil.longValue = function longValue(value, isUnsigned) {\n    if (util.Long) {\n        var ret = util.Long.fromValue(value);\n        ret.unsigned = Boolean(isUnsigned);\n        return ret;\n    } else if (typeof value === \"string\")\n        return parseInt(value, 10);\n    else if (typeof value === \"number\")\n        return value;\n    else if (typeof value === \"object\")\n        return new util.LongBits(value).toNumber();\n    return undefined;\n};\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {any|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {any|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(14);\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number | string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    if (typeof value === \"string\") {\n      value = parseFloat(value);\n    }\n\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number | string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    if (typeof value === \"string\") {\n        value = parseFloat(value);\n    }\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean|any} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(15);\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(14);\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n"],"sourceRoot":"."}